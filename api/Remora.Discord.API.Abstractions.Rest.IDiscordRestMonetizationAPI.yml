### YamlMime:ManagedReference
items:
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  id: IDiscordRestMonetizationAPI
  parent: Remora.Discord.API.Abstractions.Rest
  children:
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDiscordRestMonetizationAPI
  nameWithType: IDiscordRestMonetizationAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  type: Interface
  source:
    id: IDiscordRestMonetizationAPI
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestMonetizationAPI.cs
    startLine: 35
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Represents the Discord Monetization API.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public interface IDiscordRestMonetizationAPI
    content.vb: >-
      <PublicAPI>

      Public Interface IDiscordRestMonetizationAPI
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  id: ListEntitlementsAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  langs:
  - csharp
  - vb
  name: ListEntitlementsAsync(Snowflake, Optional<Snowflake>, Optional<IReadOnlyList<Snowflake>>, Optional<Snowflake>, Optional<Snowflake>, Optional<int>, Optional<Snowflake>, Optional<bool>, CancellationToken)
  nameWithType: IDiscordRestMonetizationAPI.ListEntitlementsAsync(Snowflake, Optional<Snowflake>, Optional<IReadOnlyList<Snowflake>>, Optional<Snowflake>, Optional<Snowflake>, Optional<int>, Optional<Snowflake>, Optional<bool>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<bool>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ListEntitlementsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestMonetizationAPI.cs
    startLine: 51
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets all entitlements for a given application.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IEntitlement>>> ListEntitlementsAsync(Snowflake applicationID, Optional<Snowflake> userID = default, Optional<IReadOnlyList<Snowflake>> skuIDs = default, Optional<Snowflake> before = default, Optional<Snowflake> after = default, Optional<int> limit = default, Optional<Snowflake> guildID = default, Optional<bool> excludeEnded = default, CancellationToken ct = default)
    parameters:
    - id: applicationID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the application.
    - id: userID
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the user to limit the search to.
    - id: skuIDs
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
      description: The SKUs to limit the search to.
    - id: before
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The entitlement to search before.
    - id: after
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The entitlement to search after.
    - id: limit
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The maximum number of entitlements to return (1-100). Defaults to 100.
    - id: guildID
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the guild to limit the search to.
    - id: excludeEnded
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether to exclude expired entitlements.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEntitlement}}}
      description: The entitlements.
    content.vb: Function ListEntitlementsAsync(applicationID As Snowflake, userID As [Optional](Of Snowflake) = Nothing, skuIDs As [Optional](Of IReadOnlyList(Of Snowflake)) = Nothing, before As [Optional](Of Snowflake) = Nothing, after As [Optional](Of Snowflake) = Nothing, limit As [Optional](Of Integer) = Nothing, guildID As [Optional](Of Snowflake) = Nothing, excludeEnded As [Optional](Of Boolean) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IEntitlement)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync*
  nameWithType.vb: IDiscordRestMonetizationAPI.ListEntitlementsAsync(Snowflake, Optional(Of Snowflake), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of Snowflake), Optional(Of Snowflake), Optional(Of Integer), Optional(Of Snowflake), Optional(Of Boolean), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Boolean), System.Threading.CancellationToken)
  name.vb: ListEntitlementsAsync(Snowflake, Optional(Of Snowflake), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of Snowflake), Optional(Of Snowflake), Optional(Of Integer), Optional(Of Snowflake), Optional(Of Boolean), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: ConsumeEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  langs:
  - csharp
  - vb
  name: ConsumeEntitlementAsync(Snowflake, Snowflake, CancellationToken)
  nameWithType: IDiscordRestMonetizationAPI.ConsumeEntitlementAsync(Snowflake, Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: ConsumeEntitlementAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestMonetizationAPI.cs
    startLine: 71
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Marks the given one-time purchase item as consumed.
  example: []
  syntax:
    content: Task<Result> ConsumeEntitlementAsync(Snowflake applicationID, Snowflake entitlementID, CancellationToken ct = default)
    parameters:
    - id: applicationID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the application.
    - id: entitlementID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the entitlement.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A value representing the result of the operation.
    content.vb: Function ConsumeEntitlementAsync(applicationID As Snowflake, entitlementID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType,System.Threading.CancellationToken)
  id: CreateTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  langs:
  - csharp
  - vb
  name: CreateTestEntitlementAsync(Snowflake, Snowflake, Snowflake, EntitlementOwnerType, CancellationToken)
  nameWithType: IDiscordRestMonetizationAPI.CreateTestEntitlementAsync(Snowflake, Snowflake, Snowflake, EntitlementOwnerType, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateTestEntitlementAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestMonetizationAPI.cs
    startLine: 87
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a test entitlement to a given SKU for a given guild or user.
  example: []
  syntax:
    content: Task<Result<IPartialEntitlement>> CreateTestEntitlementAsync(Snowflake applicationID, Snowflake skuID, Snowflake ownerID, EntitlementOwnerType ownerType, CancellationToken ct = default)
    parameters:
    - id: applicationID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the application.
    - id: skuID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the SKU to grant the entitlement for.
    - id: ownerID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild or user to grant the entitlement to.
    - id: ownerType
      type: Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType
      description: The type of the owner.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPartialEntitlement}}
      description: The test entitlement.
    content.vb: Function CreateTestEntitlementAsync(applicationID As Snowflake, skuID As Snowflake, ownerID As Snowflake, ownerType As EntitlementOwnerType, ct As CancellationToken = Nothing) As Task(Of Result(Of IPartialEntitlement))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: DeleteTestEntitlementAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  langs:
  - csharp
  - vb
  name: DeleteTestEntitlementAsync(Snowflake, Snowflake, CancellationToken)
  nameWithType: IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync(Snowflake, Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeleteTestEntitlementAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestMonetizationAPI.cs
    startLine: 103
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Deletes the given test entitlement.
  example: []
  syntax:
    content: Task<Result> DeleteTestEntitlementAsync(Snowflake applicationID, Snowflake entitlementID, CancellationToken ct = default)
    parameters:
    - id: applicationID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the application.
    - id: entitlementID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the entitlement.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A value representing the result of the operation.
    content.vb: Function DeleteTestEntitlementAsync(applicationID As Snowflake, entitlementID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: ListSKUsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI
  langs:
  - csharp
  - vb
  name: ListSKUsAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestMonetizationAPI.ListSKUsAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: ListSKUsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestMonetizationAPI.cs
    startLine: 116
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets all SKUs for the given application.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<ISKU>>> ListSKUsAsync(Snowflake applicationID, CancellationToken ct = default)
    parameters:
    - id: applicationID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the application.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.ISKU}}}
      description: The SKUs.
    content.vb: Function ListSKUsAsync(applicationID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of ISKU)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync*
references:
- uid: Remora.Discord.API.Abstractions.Rest
  commentId: N:Remora.Discord.API.Abstractions.Rest
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Rest
  nameWithType: Remora.Discord.API.Abstractions.Rest
  fullName: Remora.Discord.API.Abstractions.Rest
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestMonetizationAPI_ListEntitlementsAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_Boolean__System_Threading_CancellationToken_
  name: ListEntitlementsAsync
  nameWithType: IDiscordRestMonetizationAPI.ListEntitlementsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListEntitlementsAsync
- uid: Remora.Rest.Core.Snowflake
  commentId: T:Remora.Rest.Core.Snowflake
  parent: Remora.Rest.Core
  isExternal: true
  name: Snowflake
  nameWithType: Snowflake
  fullName: Remora.Rest.Core.Snowflake
- uid: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
  commentId: T:Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  name: Optional<Snowflake>
  nameWithType: Optional<Snowflake>
  fullName: Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>
  nameWithType.vb: Optional(Of Snowflake)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake)
  name.vb: Optional(Of Snowflake)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<Snowflake>>
  nameWithType: Optional<IReadOnlyList<Snowflake>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of Snowflake))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake))
  name.vb: Optional(Of IReadOnlyList(Of Snowflake))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional{System.Int32}
  commentId: T:Remora.Rest.Core.Optional{System.Int32}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: Optional<int>
  nameWithType: Optional<int>
  fullName: Remora.Rest.Core.Optional<int>
  nameWithType.vb: Optional(Of Integer)
  fullName.vb: Remora.Rest.Core.Optional(Of Integer)
  name.vb: Optional(Of Integer)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Remora.Rest.Core.Optional{System.Boolean}
  commentId: T:Remora.Rest.Core.Optional{System.Boolean}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Optional<bool>
  nameWithType: Optional<bool>
  fullName: Remora.Rest.Core.Optional<bool>
  nameWithType.vb: Optional(Of Boolean)
  fullName.vb: Remora.Rest.Core.Optional(Of Boolean)
  name.vb: Optional(Of Boolean)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEntitlement}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEntitlement}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IEntitlement>>>
  nameWithType: Task<Result<IReadOnlyList<IEntitlement>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEntitlement>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IEntitlement)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEntitlement)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IEntitlement)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IEntitlement
    name: IEntitlement
    href: Remora.Discord.API.Abstractions.Objects.IEntitlement.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IEntitlement
    name: IEntitlement
    href: Remora.Discord.API.Abstractions.Objects.IEntitlement.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Rest.Core
  commentId: N:Remora.Rest.Core
  isExternal: true
  name: Remora.Rest.Core
  nameWithType: Remora.Rest.Core
  fullName: Remora.Rest.Core
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
- uid: Remora.Rest.Core.Optional`1
  commentId: T:Remora.Rest.Core.Optional`1
  isExternal: true
  name: Optional<TValue>
  nameWithType: Optional<TValue>
  fullName: Remora.Rest.Core.Optional<TValue>
  nameWithType.vb: Optional(Of TValue)
  fullName.vb: Remora.Rest.Core.Optional(Of TValue)
  name.vb: Optional(Of TValue)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestMonetizationAPI_ConsumeEntitlementAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: ConsumeEntitlementAsync
  nameWithType: IDiscordRestMonetizationAPI.ConsumeEntitlementAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ConsumeEntitlementAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result>
  nameWithType: Task<Result>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result>
  nameWithType.vb: Task(Of Result)
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result)
  name.vb: Task(Of Result)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result
    name: Result
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result
    name: Result
    isExternal: true
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestMonetizationAPI_CreateTestEntitlementAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Discord_API_Abstractions_Objects_EntitlementOwnerType_System_Threading_CancellationToken_
  name: CreateTestEntitlementAsync
  nameWithType: IDiscordRestMonetizationAPI.CreateTestEntitlementAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.CreateTestEntitlementAsync
- uid: Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType
  commentId: T:Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType
  parent: Remora.Discord.API.Abstractions.Objects
  href: Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType.html
  name: EntitlementOwnerType
  nameWithType: EntitlementOwnerType
  fullName: Remora.Discord.API.Abstractions.Objects.EntitlementOwnerType
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPartialEntitlement}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPartialEntitlement}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IPartialEntitlement>>
  nameWithType: Task<Result<IPartialEntitlement>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IPartialEntitlement>>
  nameWithType.vb: Task(Of Result(Of IPartialEntitlement))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IPartialEntitlement))
  name.vb: Task(Of Result(Of IPartialEntitlement))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialEntitlement
    name: IPartialEntitlement
    href: Remora.Discord.API.Abstractions.Objects.IPartialEntitlement.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialEntitlement
    name: IPartialEntitlement
    href: Remora.Discord.API.Abstractions.Objects.IPartialEntitlement.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects
  commentId: N:Remora.Discord.API.Abstractions.Objects
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Objects
  nameWithType: Remora.Discord.API.Abstractions.Objects
  fullName: Remora.Discord.API.Abstractions.Objects
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Objects
    name: Objects
    href: Remora.Discord.API.Abstractions.Objects.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Objects
    name: Objects
    href: Remora.Discord.API.Abstractions.Objects.html
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestMonetizationAPI_DeleteTestEntitlementAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: DeleteTestEntitlementAsync
  nameWithType: IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.DeleteTestEntitlementAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestMonetizationAPI_ListSKUsAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: ListSKUsAsync
  nameWithType: IDiscordRestMonetizationAPI.ListSKUsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestMonetizationAPI.ListSKUsAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.ISKU}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.ISKU}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<ISKU>>>
  nameWithType: Task<Result<IReadOnlyList<ISKU>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.ISKU>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of ISKU)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.ISKU)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of ISKU)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ISKU
    name: ISKU
    href: Remora.Discord.API.Abstractions.Objects.ISKU.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ISKU
    name: ISKU
    href: Remora.Discord.API.Abstractions.Objects.ISKU.html
  - name: )
  - name: )
  - name: )
