### YamlMime:ManagedReference
items:
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  commentId: T:Remora.Discord.Interactivity.Services.InMemoryDataService`2
  id: InMemoryDataService`2
  parent: Remora.Discord.Interactivity.Services
  children:
  - Remora.Discord.Interactivity.Services.InMemoryDataService`2.DisposeAsync
  - Remora.Discord.Interactivity.Services.InMemoryDataService`2.Instance
  - Remora.Discord.Interactivity.Services.InMemoryDataService`2.LeaseDataAsync(`0,System.Threading.CancellationToken)
  - Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryAddData(`0,`1)
  - Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteData(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  - Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteDataAsync(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  langs:
  - csharp
  - vb
  name: InMemoryDataService<TKey, TData>
  nameWithType: InMemoryDataService<TKey, TData>
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>
  type: Class
  source:
    id: InMemoryDataService
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 42
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Manages synchronized access to data.
  remarks: >-
    While <code class="typeparamref">TKey</code> should be a simple dictionary key, <code class="typeparamref">TData</code> may be any complex

    type such as classes, structures, or records. If the data type implements <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref> or

    <xref href="System.IAsyncDisposable" data-throw-if-not-resolved="false"></xref>, the instance will also be disposed upon removal.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public class InMemoryDataService<TKey, TData> : IAsyncDisposable where TKey : notnull
    typeParameters:
    - id: TKey
      description: The key type for the stored data.
    - id: TData
      description: The data type stored by the service.
    content.vb: >-
      <PublicAPI>

      Public Class InMemoryDataService(Of TKey, TData) Implements IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: InMemoryDataService(Of TKey, TData)
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData)
  name.vb: InMemoryDataService(Of TKey, TData)
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.Instance
  commentId: P:Remora.Discord.Interactivity.Services.InMemoryDataService`2.Instance
  id: Instance
  parent: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: InMemoryDataService<TKey, TData>.Instance
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.Instance
  type: Property
  source:
    id: Instance
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 48
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Gets the singleton instance of this service.
  example: []
  syntax:
    content: public static InMemoryDataService<TKey, TData> Instance { get; }
    parameters: []
    return:
      type: Remora.Discord.Interactivity.Services.InMemoryDataService`2
    content.vb: Public Shared ReadOnly Property Instance As InMemoryDataService(Of TKey, TData)
  overload: Remora.Discord.Interactivity.Services.InMemoryDataService`2.Instance*
  nameWithType.vb: InMemoryDataService(Of TKey, TData).Instance
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).Instance
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryAddData(`0,`1)
  commentId: M:Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryAddData(`0,`1)
  id: TryAddData(`0,`1)
  parent: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  langs:
  - csharp
  - vb
  name: TryAddData(TKey, TData)
  nameWithType: InMemoryDataService<TKey, TData>.TryAddData(TKey, TData)
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.TryAddData(TKey, TData)
  type: Method
  source:
    id: TryAddData
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 67
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Inserts a new data object into the service.
  remarks: >-
    After inserting the value, any further access to the data is invalid. If you come from a C++ or Rust background,

    consider the value as having been moved into this method.
  example: []
  syntax:
    content: public bool TryAddData(TKey key, TData data)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key the data object is associated with.
    - id: data
      type: '{TData}'
      description: The data object.
    return:
      type: System.Boolean
      description: true if the data was successfully added; otherwise, false.
    content.vb: Public Function TryAddData(key As TKey, data As TData) As Boolean
  overload: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryAddData*
  nameWithType.vb: InMemoryDataService(Of TKey, TData).TryAddData(TKey, TData)
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).TryAddData(TKey, TData)
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.LeaseDataAsync(`0,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Interactivity.Services.InMemoryDataService`2.LeaseDataAsync(`0,System.Threading.CancellationToken)
  id: LeaseDataAsync(`0,System.Threading.CancellationToken)
  parent: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  langs:
  - csharp
  - vb
  name: LeaseDataAsync(TKey, CancellationToken)
  nameWithType: InMemoryDataService<TKey, TData>.LeaseDataAsync(TKey, CancellationToken)
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.LeaseDataAsync(TKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: LeaseDataAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 87
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Leases the data associated with the given key, blocking until a lock can be taken on the data object.
  remarks: >-
    The semaphore returned by this method has the lock held on it and must be released once the caller is done with

    the object.
  example: []
  syntax:
    content: public Task<Result<DataLease<TKey, TData>>> LeaseDataAsync(TKey key, CancellationToken ct = default)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key the data object is associated with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.Interactivity.Services.DataLease{{TKey},{TData}}}}
      description: The data and semaphore associated with the data or a <xref href="Remora.Results.NotFoundError" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function LeaseDataAsync(key As TKey, ct As CancellationToken = Nothing) As Task(Of Result(Of DataLease(Of TKey, TData)))
  overload: Remora.Discord.Interactivity.Services.InMemoryDataService`2.LeaseDataAsync*
  nameWithType.vb: InMemoryDataService(Of TKey, TData).LeaseDataAsync(TKey, CancellationToken)
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).LeaseDataAsync(TKey, System.Threading.CancellationToken)
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteData(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  commentId: M:Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteData(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  id: TryDeleteData(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  parent: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  langs:
  - csharp
  - vb
  name: TryDeleteData(DataLease<TKey, TData>)
  nameWithType: InMemoryDataService<TKey, TData>.TryDeleteData(DataLease<TKey, TData>)
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.TryDeleteData(Remora.Discord.Interactivity.Services.DataLease<TKey, TData>)
  type: Method
  source:
    id: TryDeleteData
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 117
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Deletes the data associated with the given lease.
  example: []
  syntax:
    content: public bool TryDeleteData(DataLease<TKey, TData> lease)
    parameters:
    - id: lease
      type: Remora.Discord.Interactivity.Services.DataLease{{TKey},{TData}}
      description: The lease you have on the data object.
    return:
      type: System.Boolean
      description: true if the data was successfully removed; otherwise, false.
    content.vb: Public Function TryDeleteData(lease As DataLease(Of TKey, TData)) As Boolean
  overload: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteData*
  nameWithType.vb: InMemoryDataService(Of TKey, TData).TryDeleteData(DataLease(Of TKey, TData))
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).TryDeleteData(Remora.Discord.Interactivity.Services.DataLease(Of TKey, TData))
  name.vb: TryDeleteData(DataLease(Of TKey, TData))
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteDataAsync(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  commentId: M:Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteDataAsync(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  id: TryDeleteDataAsync(Remora.Discord.Interactivity.Services.DataLease{`0,`1})
  parent: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  langs:
  - csharp
  - vb
  name: TryDeleteDataAsync(DataLease<TKey, TData>)
  nameWithType: InMemoryDataService<TKey, TData>.TryDeleteDataAsync(DataLease<TKey, TData>)
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.TryDeleteDataAsync(Remora.Discord.Interactivity.Services.DataLease<TKey, TData>)
  type: Method
  source:
    id: TryDeleteDataAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 151
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Deletes the data associated with the given lease.
  example: []
  syntax:
    content: public Task<bool> TryDeleteDataAsync(DataLease<TKey, TData> lease)
    parameters:
    - id: lease
      type: Remora.Discord.Interactivity.Services.DataLease{{TKey},{TData}}
      description: The lease you have on the data object.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true if the data was successfully removed; otherwise, false.
    content.vb: Public Function TryDeleteDataAsync(lease As DataLease(Of TKey, TData)) As Task(Of Boolean)
  overload: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteDataAsync*
  nameWithType.vb: InMemoryDataService(Of TKey, TData).TryDeleteDataAsync(DataLease(Of TKey, TData))
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).TryDeleteDataAsync(Remora.Discord.Interactivity.Services.DataLease(Of TKey, TData))
  name.vb: TryDeleteDataAsync(DataLease(Of TKey, TData))
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.DisposeAsync
  commentId: M:Remora.Discord.Interactivity.Services.InMemoryDataService`2.DisposeAsync
  id: DisposeAsync
  parent: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: InMemoryDataService<TKey, TData>.DisposeAsync()
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.DisposeAsync()
  type: Method
  source:
    id: DisposeAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Interactivity\Services\InMemoryDataService.cs
    startLine: 258
  assemblies:
  - Remora.Discord.Interactivity
  namespace: Remora.Discord.Interactivity.Services
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
  example: []
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: System.Threading.Tasks.ValueTask
      description: A task that represents the asynchronous dispose operation.
    content.vb: Public Function DisposeAsync() As ValueTask
  overload: Remora.Discord.Interactivity.Services.InMemoryDataService`2.DisposeAsync*
  implements:
  - System.IAsyncDisposable.DisposeAsync
  nameWithType.vb: InMemoryDataService(Of TKey, TData).DisposeAsync()
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).DisposeAsync()
references:
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: Remora.Discord.Interactivity.Services
  commentId: N:Remora.Discord.Interactivity.Services
  href: Remora.html
  name: Remora.Discord.Interactivity.Services
  nameWithType: Remora.Discord.Interactivity.Services
  fullName: Remora.Discord.Interactivity.Services
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Interactivity
    name: Interactivity
    href: Remora.Discord.Interactivity.html
  - name: .
  - uid: Remora.Discord.Interactivity.Services
    name: Services
    href: Remora.Discord.Interactivity.Services.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Interactivity
    name: Interactivity
    href: Remora.Discord.Interactivity.html
  - name: .
  - uid: Remora.Discord.Interactivity.Services
    name: Services
    href: Remora.Discord.Interactivity.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.Instance*
  commentId: Overload:Remora.Discord.Interactivity.Services.InMemoryDataService`2.Instance
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html#Remora_Discord_Interactivity_Services_InMemoryDataService_2_Instance
  name: Instance
  nameWithType: InMemoryDataService<TKey, TData>.Instance
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.Instance
  nameWithType.vb: InMemoryDataService(Of TKey, TData).Instance
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).Instance
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2
  commentId: T:Remora.Discord.Interactivity.Services.InMemoryDataService`2
  parent: Remora.Discord.Interactivity.Services
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html
  name: InMemoryDataService<TKey, TData>
  nameWithType: InMemoryDataService<TKey, TData>
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>
  nameWithType.vb: InMemoryDataService(Of TKey, TData)
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData)
  name.vb: InMemoryDataService(Of TKey, TData)
  spec.csharp:
  - uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2
    name: InMemoryDataService
    href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: '>'
  spec.vb:
  - uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2
    name: InMemoryDataService
    href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: )
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryAddData*
  commentId: Overload:Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryAddData
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html#Remora_Discord_Interactivity_Services_InMemoryDataService_2_TryAddData__0__1_
  name: TryAddData
  nameWithType: InMemoryDataService<TKey, TData>.TryAddData
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.TryAddData
  nameWithType.vb: InMemoryDataService(Of TKey, TData).TryAddData
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).TryAddData
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TData}'
  commentId: '!:TData'
  definition: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TData
  name: TData
  nameWithType: TData
  fullName: TData
- uid: Remora.Results.NotFoundError
  commentId: T:Remora.Results.NotFoundError
  isExternal: true
  name: NotFoundError
  nameWithType: NotFoundError
  fullName: Remora.Results.NotFoundError
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.LeaseDataAsync*
  commentId: Overload:Remora.Discord.Interactivity.Services.InMemoryDataService`2.LeaseDataAsync
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html#Remora_Discord_Interactivity_Services_InMemoryDataService_2_LeaseDataAsync__0_System_Threading_CancellationToken_
  name: LeaseDataAsync
  nameWithType: InMemoryDataService<TKey, TData>.LeaseDataAsync
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.LeaseDataAsync
  nameWithType.vb: InMemoryDataService(Of TKey, TData).LeaseDataAsync
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).LeaseDataAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.Interactivity.Services.DataLease{{TKey},{TData}}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.Interactivity.Services.DataLease{`0,`1}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<DataLease<TKey, TData>>>
  nameWithType: Task<Result<DataLease<TKey, TData>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.Interactivity.Services.DataLease<TKey, TData>>>
  nameWithType.vb: Task(Of Result(Of DataLease(Of TKey, TData)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.Interactivity.Services.DataLease(Of TKey, TData)))
  name.vb: Task(Of Result(Of DataLease(Of TKey, TData)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.Interactivity.Services.DataLease`2
    name: DataLease
    href: Remora.Discord.Interactivity.Services.DataLease-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.Interactivity.Services.DataLease`2
    name: DataLease
    href: Remora.Discord.Interactivity.Services.DataLease-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: )
  - name: )
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteData*
  commentId: Overload:Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteData
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html#Remora_Discord_Interactivity_Services_InMemoryDataService_2_TryDeleteData_Remora_Discord_Interactivity_Services_DataLease__0__1__
  name: TryDeleteData
  nameWithType: InMemoryDataService<TKey, TData>.TryDeleteData
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.TryDeleteData
  nameWithType.vb: InMemoryDataService(Of TKey, TData).TryDeleteData
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).TryDeleteData
- uid: Remora.Discord.Interactivity.Services.DataLease{{TKey},{TData}}
  commentId: T:Remora.Discord.Interactivity.Services.DataLease{`0,`1}
  parent: Remora.Discord.Interactivity.Services
  definition: Remora.Discord.Interactivity.Services.DataLease`2
  href: Remora.Discord.Interactivity.Services.DataLease-2.html
  name: DataLease<TKey, TData>
  nameWithType: DataLease<TKey, TData>
  fullName: Remora.Discord.Interactivity.Services.DataLease<TKey, TData>
  nameWithType.vb: DataLease(Of TKey, TData)
  fullName.vb: Remora.Discord.Interactivity.Services.DataLease(Of TKey, TData)
  name.vb: DataLease(Of TKey, TData)
  spec.csharp:
  - uid: Remora.Discord.Interactivity.Services.DataLease`2
    name: DataLease
    href: Remora.Discord.Interactivity.Services.DataLease-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: '>'
  spec.vb:
  - uid: Remora.Discord.Interactivity.Services.DataLease`2
    name: DataLease
    href: Remora.Discord.Interactivity.Services.DataLease-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: )
- uid: Remora.Discord.Interactivity.Services.DataLease`2
  commentId: T:Remora.Discord.Interactivity.Services.DataLease`2
  href: Remora.Discord.Interactivity.Services.DataLease-2.html
  name: DataLease<TKey, TData>
  nameWithType: DataLease<TKey, TData>
  fullName: Remora.Discord.Interactivity.Services.DataLease<TKey, TData>
  nameWithType.vb: DataLease(Of TKey, TData)
  fullName.vb: Remora.Discord.Interactivity.Services.DataLease(Of TKey, TData)
  name.vb: DataLease(Of TKey, TData)
  spec.csharp:
  - uid: Remora.Discord.Interactivity.Services.DataLease`2
    name: DataLease
    href: Remora.Discord.Interactivity.Services.DataLease-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: '>'
  spec.vb:
  - uid: Remora.Discord.Interactivity.Services.DataLease`2
    name: DataLease
    href: Remora.Discord.Interactivity.Services.DataLease-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TData
  - name: )
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteDataAsync*
  commentId: Overload:Remora.Discord.Interactivity.Services.InMemoryDataService`2.TryDeleteDataAsync
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html#Remora_Discord_Interactivity_Services_InMemoryDataService_2_TryDeleteDataAsync_Remora_Discord_Interactivity_Services_DataLease__0__1__
  name: TryDeleteDataAsync
  nameWithType: InMemoryDataService<TKey, TData>.TryDeleteDataAsync
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.TryDeleteDataAsync
  nameWithType.vb: InMemoryDataService(Of TKey, TData).TryDeleteDataAsync
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).TryDeleteDataAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Remora.Discord.Interactivity.Services.InMemoryDataService`2.DisposeAsync*
  commentId: Overload:Remora.Discord.Interactivity.Services.InMemoryDataService`2.DisposeAsync
  href: Remora.Discord.Interactivity.Services.InMemoryDataService-2.html#Remora_Discord_Interactivity_Services_InMemoryDataService_2_DisposeAsync
  name: DisposeAsync
  nameWithType: InMemoryDataService<TKey, TData>.DisposeAsync
  fullName: Remora.Discord.Interactivity.Services.InMemoryDataService<TKey, TData>.DisposeAsync
  nameWithType.vb: InMemoryDataService(Of TKey, TData).DisposeAsync
  fullName.vb: Remora.Discord.Interactivity.Services.InMemoryDataService(Of TKey, TData).DisposeAsync
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
