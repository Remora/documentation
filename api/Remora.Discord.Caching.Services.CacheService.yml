### YamlMime:ManagedReference
items:
- uid: Remora.Discord.Caching.Services.CacheService
  commentId: T:Remora.Discord.Caching.Services.CacheService
  id: CacheService
  parent: Remora.Discord.Caching.Services
  children:
  - Remora.Discord.Caching.Services.CacheService.#ctor(Remora.Discord.Caching.Abstractions.Services.ICacheProvider,Remora.Discord.Caching.Services.ImmutableCacheSettings)
  - Remora.Discord.Caching.Services.CacheService.CacheAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,``0,System.Threading.CancellationToken)
  - Remora.Discord.Caching.Services.CacheService.EvictAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  - Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey)
  - Remora.Discord.Caching.Services.CacheService.TryGetValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: CacheService
  nameWithType: CacheService
  fullName: Remora.Discord.Caching.Services.CacheService
  type: Class
  source:
    id: CacheService
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.Caching\Services\CacheService.cs
    startLine: 36
  assemblies:
  - Remora.Discord.Caching
  namespace: Remora.Discord.Caching.Services
  summary: Handles cache insert/evict operations for various types.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public class CacheService
    content.vb: >-
      <PublicAPI>

      Public Class CacheService
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.Caching.Services.CacheService.#ctor(Remora.Discord.Caching.Abstractions.Services.ICacheProvider,Remora.Discord.Caching.Services.ImmutableCacheSettings)
  commentId: M:Remora.Discord.Caching.Services.CacheService.#ctor(Remora.Discord.Caching.Abstractions.Services.ICacheProvider,Remora.Discord.Caching.Services.ImmutableCacheSettings)
  id: '#ctor(Remora.Discord.Caching.Abstractions.Services.ICacheProvider,Remora.Discord.Caching.Services.ImmutableCacheSettings)'
  parent: Remora.Discord.Caching.Services.CacheService
  langs:
  - csharp
  - vb
  name: CacheService(ICacheProvider, ImmutableCacheSettings)
  nameWithType: CacheService.CacheService(ICacheProvider, ImmutableCacheSettings)
  fullName: Remora.Discord.Caching.Services.CacheService.CacheService(Remora.Discord.Caching.Abstractions.Services.ICacheProvider, Remora.Discord.Caching.Services.ImmutableCacheSettings)
  type: Constructor
  source:
    id: .ctor
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.Caching\Services\CacheService.cs
    startLine: 47
  assemblies:
  - Remora.Discord.Caching
  namespace: Remora.Discord.Caching.Services
  summary: Initializes a new instance of the <xref href="Remora.Discord.Caching.Services.CacheService" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public CacheService(ICacheProvider cacheProvider, ImmutableCacheSettings cacheSettings)
    parameters:
    - id: cacheProvider
      type: Remora.Discord.Caching.Abstractions.Services.ICacheProvider
      description: The cache provider.
    - id: cacheSettings
      type: Remora.Discord.Caching.Services.ImmutableCacheSettings
      description: The cache settings.
    content.vb: Public Sub New(cacheProvider As ICacheProvider, cacheSettings As ImmutableCacheSettings)
  overload: Remora.Discord.Caching.Services.CacheService.#ctor*
  nameWithType.vb: CacheService.New(ICacheProvider, ImmutableCacheSettings)
  fullName.vb: Remora.Discord.Caching.Services.CacheService.New(Remora.Discord.Caching.Abstractions.Services.ICacheProvider, Remora.Discord.Caching.Services.ImmutableCacheSettings)
  name.vb: New(ICacheProvider, ImmutableCacheSettings)
- uid: Remora.Discord.Caching.Services.CacheService.CacheAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,``0,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Caching.Services.CacheService.CacheAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,``0,System.Threading.CancellationToken)
  id: CacheAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,``0,System.Threading.CancellationToken)
  parent: Remora.Discord.Caching.Services.CacheService
  langs:
  - csharp
  - vb
  name: CacheAsync<TInstance>(CacheKey, TInstance, CancellationToken)
  nameWithType: CacheService.CacheAsync<TInstance>(CacheKey, TInstance, CancellationToken)
  fullName: Remora.Discord.Caching.Services.CacheService.CacheAsync<TInstance>(Remora.Discord.Caching.Abstractions.CacheKey, TInstance, System.Threading.CancellationToken)
  type: Method
  source:
    id: CacheAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.Caching\Services\CacheService.cs
    startLine: 62
  assemblies:
  - Remora.Discord.Caching
  namespace: Remora.Discord.Caching.Services
  summary: >-
    Caches a value. Certain instance types may have specializations which cache more than one value from the

    instance.
  example: []
  syntax:
    content: 'public ValueTask CacheAsync<TInstance>(CacheKey key, TInstance instance, CancellationToken ct = default) where TInstance : class'
    parameters:
    - id: key
      type: Remora.Discord.Caching.Abstractions.CacheKey
      description: The cache key.
    - id: instance
      type: '{TInstance}'
      description: The instance.
    - id: ct
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    typeParameters:
    - id: TInstance
      description: The instance type.
    return:
      type: System.Threading.Tasks.ValueTask
      description: A <xref href="System.Threading.Tasks.ValueTask" data-throw-if-not-resolved="false"></xref> representing the potentially asynchronous operation.
    content.vb: Public Function CacheAsync(Of TInstance As Class)(key As CacheKey, instance As TInstance, ct As CancellationToken = Nothing) As ValueTask
  overload: Remora.Discord.Caching.Services.CacheService.CacheAsync*
  nameWithType.vb: CacheService.CacheAsync(Of TInstance)(CacheKey, TInstance, CancellationToken)
  fullName.vb: Remora.Discord.Caching.Services.CacheService.CacheAsync(Of TInstance)(Remora.Discord.Caching.Abstractions.CacheKey, TInstance, System.Threading.CancellationToken)
  name.vb: CacheAsync(Of TInstance)(CacheKey, TInstance, CancellationToken)
- uid: Remora.Discord.Caching.Services.CacheService.TryGetValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Caching.Services.CacheService.TryGetValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  id: TryGetValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  parent: Remora.Discord.Caching.Services.CacheService
  langs:
  - csharp
  - vb
  name: TryGetValueAsync<TInstance>(CacheKey, CancellationToken)
  nameWithType: CacheService.TryGetValueAsync<TInstance>(CacheKey, CancellationToken)
  fullName: Remora.Discord.Caching.Services.CacheService.TryGetValueAsync<TInstance>(Remora.Discord.Caching.Abstractions.CacheKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: TryGetValueAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.Caching\Services\CacheService.cs
    startLine: 99
  assemblies:
  - Remora.Discord.Caching
  namespace: Remora.Discord.Caching.Services
  summary: Attempts to retrieve a value from the cache.
  example: []
  syntax:
    content: 'public ValueTask<Result<TInstance>> TryGetValueAsync<TInstance>(CacheKey key, CancellationToken ct = default) where TInstance : class'
    parameters:
    - id: key
      type: Remora.Discord.Caching.Abstractions.CacheKey
      description: The cache key.
    - id: ct
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    typeParameters:
    - id: TInstance
      description: The instance type.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result{{TInstance}}}
      description: A <xref href="Remora.Results.Result" data-throw-if-not-resolved="false"></xref> that may or not have succeeded.
    content.vb: Public Function TryGetValueAsync(Of TInstance As Class)(key As CacheKey, ct As CancellationToken = Nothing) As ValueTask(Of Result(Of TInstance))
  overload: Remora.Discord.Caching.Services.CacheService.TryGetValueAsync*
  nameWithType.vb: CacheService.TryGetValueAsync(Of TInstance)(CacheKey, CancellationToken)
  fullName.vb: Remora.Discord.Caching.Services.CacheService.TryGetValueAsync(Of TInstance)(Remora.Discord.Caching.Abstractions.CacheKey, System.Threading.CancellationToken)
  name.vb: TryGetValueAsync(Of TInstance)(CacheKey, CancellationToken)
- uid: Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey)
  commentId: M:Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey)
  id: TryGetPreviousValueAsync``1(Remora.Discord.Caching.Abstractions.CacheKey)
  parent: Remora.Discord.Caching.Services.CacheService
  langs:
  - csharp
  - vb
  name: TryGetPreviousValueAsync<TInstance>(CacheKey)
  nameWithType: CacheService.TryGetPreviousValueAsync<TInstance>(CacheKey)
  fullName: Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync<TInstance>(Remora.Discord.Caching.Abstractions.CacheKey)
  type: Method
  source:
    id: TryGetPreviousValueAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.Caching\Services\CacheService.cs
    startLine: 108
  assemblies:
  - Remora.Discord.Caching
  namespace: Remora.Discord.Caching.Services
  summary: Attempts to retrieve the previous value of the given key from the eviction cache.
  example: []
  syntax:
    content: 'public ValueTask<Result<TInstance>> TryGetPreviousValueAsync<TInstance>(CacheKey key) where TInstance : class'
    parameters:
    - id: key
      type: Remora.Discord.Caching.Abstractions.CacheKey
      description: The cache key.
    typeParameters:
    - id: TInstance
      description: The instance type.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result{{TInstance}}}
      description: A <xref href="Remora.Results.Result" data-throw-if-not-resolved="false"></xref> that may or not have succeeded.
    content.vb: Public Function TryGetPreviousValueAsync(Of TInstance As Class)(key As CacheKey) As ValueTask(Of Result(Of TInstance))
  overload: Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync*
  nameWithType.vb: CacheService.TryGetPreviousValueAsync(Of TInstance)(CacheKey)
  fullName.vb: Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync(Of TInstance)(Remora.Discord.Caching.Abstractions.CacheKey)
  name.vb: TryGetPreviousValueAsync(Of TInstance)(CacheKey)
- uid: Remora.Discord.Caching.Services.CacheService.EvictAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Caching.Services.CacheService.EvictAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  id: EvictAsync``1(Remora.Discord.Caching.Abstractions.CacheKey,System.Threading.CancellationToken)
  parent: Remora.Discord.Caching.Services.CacheService
  langs:
  - csharp
  - vb
  name: EvictAsync<TInstance>(CacheKey, CancellationToken)
  nameWithType: CacheService.EvictAsync<TInstance>(CacheKey, CancellationToken)
  fullName: Remora.Discord.Caching.Services.CacheService.EvictAsync<TInstance>(Remora.Discord.Caching.Abstractions.CacheKey, System.Threading.CancellationToken)
  type: Method
  source:
    id: EvictAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.Caching\Services\CacheService.cs
    startLine: 118
  assemblies:
  - Remora.Discord.Caching
  namespace: Remora.Discord.Caching.Services
  summary: Evicts the instance with the given key from the cache.
  example: []
  syntax:
    content: 'public ValueTask<Result<TInstance>> EvictAsync<TInstance>(CacheKey key, CancellationToken ct = default) where TInstance : class'
    parameters:
    - id: key
      type: Remora.Discord.Caching.Abstractions.CacheKey
      description: The cache key.
    - id: ct
      type: System.Threading.CancellationToken
      description: A cancellation token to cancel the operation.
    typeParameters:
    - id: TInstance
      description: The type of the value.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result{{TInstance}}}
      description: A <xref href="System.Threading.Tasks.ValueTask" data-throw-if-not-resolved="false"></xref> representing the potentially asynchronous operation.
    content.vb: Public Function EvictAsync(Of TInstance As Class)(key As CacheKey, ct As CancellationToken = Nothing) As ValueTask(Of Result(Of TInstance))
  overload: Remora.Discord.Caching.Services.CacheService.EvictAsync*
  nameWithType.vb: CacheService.EvictAsync(Of TInstance)(CacheKey, CancellationToken)
  fullName.vb: Remora.Discord.Caching.Services.CacheService.EvictAsync(Of TInstance)(Remora.Discord.Caching.Abstractions.CacheKey, System.Threading.CancellationToken)
  name.vb: EvictAsync(Of TInstance)(CacheKey, CancellationToken)
references:
- uid: Remora.Discord.Caching.Services
  commentId: N:Remora.Discord.Caching.Services
  href: Remora.html
  name: Remora.Discord.Caching.Services
  nameWithType: Remora.Discord.Caching.Services
  fullName: Remora.Discord.Caching.Services
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Caching
    name: Caching
    href: Remora.Discord.Caching.html
  - name: .
  - uid: Remora.Discord.Caching.Services
    name: Services
    href: Remora.Discord.Caching.Services.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Caching
    name: Caching
    href: Remora.Discord.Caching.html
  - name: .
  - uid: Remora.Discord.Caching.Services
    name: Services
    href: Remora.Discord.Caching.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Remora.Discord.Caching.Services.CacheService
  commentId: T:Remora.Discord.Caching.Services.CacheService
  parent: Remora.Discord.Caching.Services
  href: Remora.Discord.Caching.Services.CacheService.html
  name: CacheService
  nameWithType: CacheService
  fullName: Remora.Discord.Caching.Services.CacheService
- uid: Remora.Discord.Caching.Services.CacheService.#ctor*
  commentId: Overload:Remora.Discord.Caching.Services.CacheService.#ctor
  href: Remora.Discord.Caching.Services.CacheService.html#Remora_Discord_Caching_Services_CacheService__ctor_Remora_Discord_Caching_Abstractions_Services_ICacheProvider_Remora_Discord_Caching_Services_ImmutableCacheSettings_
  name: CacheService
  nameWithType: CacheService.CacheService
  fullName: Remora.Discord.Caching.Services.CacheService.CacheService
  nameWithType.vb: CacheService.New
  fullName.vb: Remora.Discord.Caching.Services.CacheService.New
  name.vb: New
- uid: Remora.Discord.Caching.Abstractions.Services.ICacheProvider
  commentId: T:Remora.Discord.Caching.Abstractions.Services.ICacheProvider
  parent: Remora.Discord.Caching.Abstractions.Services
  href: Remora.Discord.Caching.Abstractions.Services.ICacheProvider.html
  name: ICacheProvider
  nameWithType: ICacheProvider
  fullName: Remora.Discord.Caching.Abstractions.Services.ICacheProvider
- uid: Remora.Discord.Caching.Services.ImmutableCacheSettings
  commentId: T:Remora.Discord.Caching.Services.ImmutableCacheSettings
  parent: Remora.Discord.Caching.Services
  href: Remora.Discord.Caching.Services.ImmutableCacheSettings.html
  name: ImmutableCacheSettings
  nameWithType: ImmutableCacheSettings
  fullName: Remora.Discord.Caching.Services.ImmutableCacheSettings
- uid: Remora.Discord.Caching.Abstractions.Services
  commentId: N:Remora.Discord.Caching.Abstractions.Services
  href: Remora.html
  name: Remora.Discord.Caching.Abstractions.Services
  nameWithType: Remora.Discord.Caching.Abstractions.Services
  fullName: Remora.Discord.Caching.Abstractions.Services
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Caching
    name: Caching
    href: Remora.Discord.Caching.html
  - name: .
  - uid: Remora.Discord.Caching.Abstractions
    name: Abstractions
    href: Remora.Discord.Caching.Abstractions.html
  - name: .
  - uid: Remora.Discord.Caching.Abstractions.Services
    name: Services
    href: Remora.Discord.Caching.Abstractions.Services.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Caching
    name: Caching
    href: Remora.Discord.Caching.html
  - name: .
  - uid: Remora.Discord.Caching.Abstractions
    name: Abstractions
    href: Remora.Discord.Caching.Abstractions.html
  - name: .
  - uid: Remora.Discord.Caching.Abstractions.Services
    name: Services
    href: Remora.Discord.Caching.Abstractions.Services.html
- uid: System.Threading.Tasks.ValueTask
  commentId: T:System.Threading.Tasks.ValueTask
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask
  name: ValueTask
  nameWithType: ValueTask
  fullName: System.Threading.Tasks.ValueTask
- uid: Remora.Discord.Caching.Services.CacheService.CacheAsync*
  commentId: Overload:Remora.Discord.Caching.Services.CacheService.CacheAsync
  href: Remora.Discord.Caching.Services.CacheService.html#Remora_Discord_Caching_Services_CacheService_CacheAsync__1_Remora_Discord_Caching_Abstractions_CacheKey___0_System_Threading_CancellationToken_
  name: CacheAsync
  nameWithType: CacheService.CacheAsync
  fullName: Remora.Discord.Caching.Services.CacheService.CacheAsync
- uid: Remora.Discord.Caching.Abstractions.CacheKey
  commentId: T:Remora.Discord.Caching.Abstractions.CacheKey
  parent: Remora.Discord.Caching.Abstractions
  href: Remora.Discord.Caching.Abstractions.CacheKey.html
  name: CacheKey
  nameWithType: CacheKey
  fullName: Remora.Discord.Caching.Abstractions.CacheKey
- uid: '{TInstance}'
  commentId: '!:TInstance'
  definition: TInstance
  name: TInstance
  nameWithType: TInstance
  fullName: TInstance
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Discord.Caching.Abstractions
  commentId: N:Remora.Discord.Caching.Abstractions
  href: Remora.html
  name: Remora.Discord.Caching.Abstractions
  nameWithType: Remora.Discord.Caching.Abstractions
  fullName: Remora.Discord.Caching.Abstractions
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Caching
    name: Caching
    href: Remora.Discord.Caching.html
  - name: .
  - uid: Remora.Discord.Caching.Abstractions
    name: Abstractions
    href: Remora.Discord.Caching.Abstractions.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Caching
    name: Caching
    href: Remora.Discord.Caching.html
  - name: .
  - uid: Remora.Discord.Caching.Abstractions
    name: Abstractions
    href: Remora.Discord.Caching.Abstractions.html
- uid: TInstance
  name: TInstance
  nameWithType: TInstance
  fullName: TInstance
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: Remora.Results.Result
  commentId: T:Remora.Results.Result
  parent: Remora.Results
  isExternal: true
  name: Result
  nameWithType: Result
  fullName: Remora.Results.Result
- uid: Remora.Discord.Caching.Services.CacheService.TryGetValueAsync*
  commentId: Overload:Remora.Discord.Caching.Services.CacheService.TryGetValueAsync
  href: Remora.Discord.Caching.Services.CacheService.html#Remora_Discord_Caching_Services_CacheService_TryGetValueAsync__1_Remora_Discord_Caching_Abstractions_CacheKey_System_Threading_CancellationToken_
  name: TryGetValueAsync
  nameWithType: CacheService.TryGetValueAsync
  fullName: Remora.Discord.Caching.Services.CacheService.TryGetValueAsync
- uid: System.Threading.Tasks.ValueTask{Remora.Results.Result{{TInstance}}}
  commentId: T:System.Threading.Tasks.ValueTask{Remora.Results.Result{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<Result<TInstance>>
  nameWithType: ValueTask<Result<TInstance>>
  fullName: System.Threading.Tasks.ValueTask<Remora.Results.Result<TInstance>>
  nameWithType.vb: ValueTask(Of Result(Of TInstance))
  fullName.vb: System.Threading.Tasks.ValueTask(Of Remora.Results.Result(Of TInstance))
  name.vb: ValueTask(Of Result(Of TInstance))
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - name: TInstance
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInstance
  - name: )
  - name: )
- uid: Remora.Results
  commentId: N:Remora.Results
  isExternal: true
  name: Remora.Results
  nameWithType: Remora.Results
  fullName: Remora.Results
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Results
    name: Results
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Results
    name: Results
    isExternal: true
- uid: System.Threading.Tasks.ValueTask`1
  commentId: T:System.Threading.Tasks.ValueTask`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<TResult>
  nameWithType: ValueTask<TResult>
  fullName: System.Threading.Tasks.ValueTask<TResult>
  nameWithType.vb: ValueTask(Of TResult)
  fullName.vb: System.Threading.Tasks.ValueTask(Of TResult)
  name.vb: ValueTask(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync*
  commentId: Overload:Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync
  href: Remora.Discord.Caching.Services.CacheService.html#Remora_Discord_Caching_Services_CacheService_TryGetPreviousValueAsync__1_Remora_Discord_Caching_Abstractions_CacheKey_
  name: TryGetPreviousValueAsync
  nameWithType: CacheService.TryGetPreviousValueAsync
  fullName: Remora.Discord.Caching.Services.CacheService.TryGetPreviousValueAsync
- uid: Remora.Discord.Caching.Services.CacheService.EvictAsync*
  commentId: Overload:Remora.Discord.Caching.Services.CacheService.EvictAsync
  href: Remora.Discord.Caching.Services.CacheService.html#Remora_Discord_Caching_Services_CacheService_EvictAsync__1_Remora_Discord_Caching_Abstractions_CacheKey_System_Threading_CancellationToken_
  name: EvictAsync
  nameWithType: CacheService.EvictAsync
  fullName: Remora.Discord.Caching.Services.CacheService.EvictAsync
