### YamlMime:ManagedReference
items:
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
  commentId: T:Remora.Discord.Commands.Feedback.Services.FeedbackService
  id: FeedbackService
  parent: Remora.Discord.Commands.Feedback.Services
  children:
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI,Remora.Discord.Commands.Services.ContextInjectionService,Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI,Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme
  langs:
  - csharp
  - vb
  name: FeedbackService
  nameWithType: FeedbackService
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService
  type: Class
  source:
    id: FeedbackService
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 42
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public class FeedbackService : IFeedbackService
    content.vb: >-
      <PublicAPI>

      Public Class FeedbackService Implements IFeedbackService
  inheritance:
  - System.Object
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.FeedbackService.Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme
  commentId: P:Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme
  id: Theme
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: Theme
  nameWithType: FeedbackService.Theme
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme
  type: Property
  source:
    id: Theme
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 51
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Gets the theme used by the feedback service.
  example: []
  syntax:
    content: public IFeedbackTheme Theme { get; }
    parameters: []
    return:
      type: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
    content.vb: Public ReadOnly Property Theme As IFeedbackTheme
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage
  commentId: P:Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage
  id: HasEditedOriginalMessage
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: HasEditedOriginalMessage
  nameWithType: FeedbackService.HasEditedOriginalMessage
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage
  type: Property
  source:
    id: HasEditedOriginalMessage
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 54
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: >-
    Gets a value indicating whether the service, in the context of an interaction, has edited the original

    message.
  remarks: This method always returns false in a message context.
  example: []
  syntax:
    content: public bool HasEditedOriginalMessage { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property HasEditedOriginalMessage As Boolean
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI,Remora.Discord.Commands.Services.ContextInjectionService,Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI,Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI,Remora.Discord.Commands.Services.ContextInjectionService,Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI,Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme)
  id: '#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI,Remora.Discord.Commands.Services.ContextInjectionService,Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI,Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme)'
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: FeedbackService(IDiscordRestChannelAPI, IDiscordRestUserAPI, ContextInjectionService, IDiscordRestInteractionAPI, IFeedbackTheme)
  nameWithType: FeedbackService.FeedbackService(IDiscordRestChannelAPI, IDiscordRestUserAPI, ContextInjectionService, IDiscordRestInteractionAPI, IFeedbackTheme)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.FeedbackService(Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI, Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI, Remora.Discord.Commands.Services.ContextInjectionService, Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI, Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme)
  type: Constructor
  source:
    id: .ctor
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 64
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Initializes a new instance of the <xref href="Remora.Discord.Commands.Feedback.Services.FeedbackService" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public FeedbackService(IDiscordRestChannelAPI channelAPI, IDiscordRestUserAPI userAPI, ContextInjectionService contextInjection, IDiscordRestInteractionAPI interactionAPI, IFeedbackTheme feedbackTheme)
    parameters:
    - id: channelAPI
      type: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
      description: The channel API.
    - id: userAPI
      type: Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI
      description: The user API.
    - id: contextInjection
      type: Remora.Discord.Commands.Services.ContextInjectionService
      description: The context injection service.
    - id: interactionAPI
      type: Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI
      description: The webhook API.
    - id: feedbackTheme
      type: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
      description: The feedback theme to use.
    content.vb: Public Sub New(channelAPI As IDiscordRestChannelAPI, userAPI As IDiscordRestUserAPI, contextInjection As ContextInjectionService, interactionAPI As IDiscordRestInteractionAPI, feedbackTheme As IFeedbackTheme)
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.#ctor*
  nameWithType.vb: FeedbackService.New(IDiscordRestChannelAPI, IDiscordRestUserAPI, ContextInjectionService, IDiscordRestInteractionAPI, IFeedbackTheme)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.New(Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI, Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI, Remora.Discord.Commands.Services.ContextInjectionService, Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI, Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme)
  name.vb: New(IDiscordRestChannelAPI, IDiscordRestUserAPI, ContextInjectionService, IDiscordRestInteractionAPI, IFeedbackTheme)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendInfoAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendInfoAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendInfoAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 82
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send an informational message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendInfoAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendInfoAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendInfoAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendInfoAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualInfoAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualInfoAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualInfoAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 93
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send an informational message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualInfoAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualInfoAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualInfoAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualInfoAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateInfoAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateInfoAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateInfoAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 103
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send an informational message to the given user as a direct message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateInfoAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateInfoAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendSuccessAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendSuccessAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendSuccessAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 113
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a positive, successful message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendSuccessAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendSuccessAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendSuccessAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendSuccessAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualSuccessAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualSuccessAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualSuccessAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 124
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a positive, successful message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualSuccessAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualSuccessAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualSuccessAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualSuccessAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateSuccessAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateSuccessAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateSuccessAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 134
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a positive, successful message to the given user as a direct message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateSuccessAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateSuccessAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendNeutralAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendNeutralAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendNeutralAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 144
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a neutral message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendNeutralAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendNeutralAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendNeutralAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendNeutralAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualNeutralAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualNeutralAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualNeutralAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 155
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a neutral message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualNeutralAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualNeutralAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualNeutralAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualNeutralAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateNeutralAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateNeutralAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateNeutralAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 165
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a neutral message to the given user as a direct message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateNeutralAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateNeutralAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendWarningAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendWarningAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendWarningAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 175
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a warning message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendWarningAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendWarningAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendWarningAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendWarningAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualWarningAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualWarningAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualWarningAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 186
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a warning message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualWarningAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualWarningAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualWarningAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualWarningAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateWarningAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateWarningAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateWarningAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 196
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a warning message to the given user as a direct message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateWarningAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateWarningAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendErrorAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendErrorAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendErrorAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 206
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a negative error message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendErrorAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendErrorAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendErrorAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendErrorAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualErrorAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualErrorAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualErrorAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 217
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a negative error message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualErrorAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualErrorAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualErrorAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualErrorAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateErrorAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateErrorAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateErrorAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 227
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a negative error message to the given user as a direct message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateErrorAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateErrorAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendMessageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 237
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendMessageAsync(Snowflake channel, FeedbackMessage message, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: message
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
      description: The message to send.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendMessageAsync(channel As Snowflake, message As FeedbackMessage, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualMessageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 248
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a contextual message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualMessageAsync(FeedbackMessage message, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: message
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
      description: The message to send.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualMessageAsync(message As FeedbackMessage, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateMessageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 258
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a private message.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateMessageAsync(Snowflake user, FeedbackMessage message, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: message
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
      description: The message to send.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateMessageAsync(user As Snowflake, message As FeedbackMessage, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendEmbedAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 268
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given embed to the given channel.
  example: []
  syntax:
    content: public Task<Result<IMessage>> SendEmbedAsync(Snowflake channel, Embed embed, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the embed to.
    - id: embed
      type: Remora.Discord.API.Objects.Embed
      description: The embed.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendEmbedAsync(channel As Snowflake, embed As Embed, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualEmbedAsync(Embed, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualEmbedAsync(Embed, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualEmbedAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 278
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given embed to current context.
  example: []
  syntax:
    content: public Task<Result<IMessage>> SendContextualEmbedAsync(Embed embed, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: embed
      type: Remora.Discord.API.Objects.Embed
      description: The embed.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualEmbedAsync(embed As Embed, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateEmbedAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 287
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given embed to the given user in their private DM channel.
  example: []
  syntax:
    content: public Task<Result<IMessage>> SendPrivateEmbedAsync(Snowflake user, Embed embed, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user to send the embed to.
    - id: embed
      type: Remora.Discord.API.Objects.Embed
      description: The embed.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateEmbedAsync(user As Snowflake, embed As Embed, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContentAsync(Snowflake, string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContentAsync(Snowflake, string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake, string, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContentAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 297
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given string as one or more sequential embeds, chunked into sets of 1024 characters.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContentAsync(Snowflake channel, string contents, Color color, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the embed to.
    - id: contents
      type: System.String
      description: The contents to send.
    - id: color
      type: System.Drawing.Color
      description: The embed colour.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContentAsync(channel As Snowflake, contents As String, color As Color, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContentAsync(Snowflake, String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake, String, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContentAsync(Snowflake, String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualContentAsync(string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualContentAsync(string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync(string, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualContentAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 323
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given string as one or more sequential embeds, chunked into sets of 1024 characters.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendContextualContentAsync(string contents, Color color, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents to send.
    - id: color
      type: System.Drawing.Color
      description: The embed colour.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendContextualContentAsync(contents As String, color As Color, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualContentAsync(String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync(String, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualContentAsync(String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateContentAsync(Snowflake, string, Color, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateContentAsync(Snowflake, string, Color, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake, string, System.Drawing.Color, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateContentAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 348
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: >-
    Sends the given string as one or more sequential embeds to the given user over DM, chunked into sets of 1024

    characters.
  example: []
  syntax:
    content: public Task<Result<IReadOnlyList<IMessage>>> SendPrivateContentAsync(Snowflake user, string contents, Color color, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user to send the content to.
    - id: contents
      type: System.String
      description: The contents to send.
    - id: color
      type: System.Drawing.Color
      description: The embed colour.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Public Function SendPrivateContentAsync(user As Snowflake, contents As String, color As Color, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake, String, System.Drawing.Color, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 368
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends an unformatted message.
  example: []
  syntax:
    content: public Task<Result<IMessage>> SendAsync(Snowflake channel, Optional<string> content = default, Optional<IReadOnlyList<IEmbed>> embeds = default, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: content
      type: Remora.Rest.Core.Optional{System.String}
      description: The content of the message.
    - id: embeds
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
      description: The embeds of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: The created message.
    content.vb: Public Function SendAsync(channel As Snowflake, content As [Optional](Of String) = Nothing, embeds As [Optional](Of IReadOnlyList(Of IEmbed)) = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualAsync(Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendContextualAsync(Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync(Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 391
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends an unformatted message to the current context.
  example: []
  syntax:
    content: public Task<Result<IMessage>> SendContextualAsync(Optional<string> content = default, Optional<IReadOnlyList<IEmbed>> embeds = default, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: content
      type: Remora.Rest.Core.Optional{System.String}
      description: The content of the message.
    - id: embeds
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
      description: The embeds of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: The created message.
    content.vb: Public Function SendContextualAsync(content As [Optional](Of String) = Nothing, embeds As [Optional](Of IReadOnlyList(Of IEmbed)) = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendContextualAsync(Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync(Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualAsync(Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  nameWithType: FeedbackService.SendPrivateAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 445
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends an unformatted message to the given user in their private DM channel.
  example: []
  syntax:
    content: public Task<Result<IMessage>> SendPrivateAsync(Snowflake user, Optional<string> content = default, Optional<IReadOnlyList<IEmbed>> embeds = default, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: content
      type: Remora.Rest.Core.Optional{System.String}
      description: The content of the message.
    - id: embeds
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
      description: The embeds of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: The created message.
    content.vb: Public Function SendPrivateAsync(user As Snowflake, content As [Optional](Of String) = Nothing, embeds As [Optional](Of IReadOnlyList(Of IEmbed)) = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  nameWithType.vb: FeedbackService.SendPrivateAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext
  commentId: M:Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext
  id: HasInteractionContext
  parent: Remora.Discord.Commands.Feedback.Services.FeedbackService
  langs:
  - csharp
  - vb
  name: HasInteractionContext()
  nameWithType: FeedbackService.HasInteractionContext()
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext()
  type: Method
  source:
    id: HasInteractionContext
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\FeedbackService.cs
    startLine: 466
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Determines whether the feedback service has access to an interaction context.
  example: []
  syntax:
    content: public bool HasInteractionContext()
    return:
      type: System.Boolean
      description: true if the feedback service has access to an interaction context; otherwise, false.
    content.vb: Public Function HasInteractionContext() As Boolean
  overload: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext*
  implements:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
references:
- uid: Remora.Discord.Commands.Feedback.Services
  commentId: N:Remora.Discord.Commands.Feedback.Services
  href: Remora.html
  name: Remora.Discord.Commands.Feedback.Services
  nameWithType: Remora.Discord.Commands.Feedback.Services
  fullName: Remora.Discord.Commands.Feedback.Services
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Services
    name: Services
    href: Remora.Discord.Commands.Feedback.Services.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Services
    name: Services
    href: Remora.Discord.Commands.Feedback.Services.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  commentId: T:Remora.Discord.Commands.Feedback.Services.IFeedbackService
  parent: Remora.Discord.Commands.Feedback.Services
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html
  name: IFeedbackService
  nameWithType: IFeedbackService
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions
  definition: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendContextualPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  nameWithType: FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Objects.Embed>, Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Objects.Embed), Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendContextualPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendContextualPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions
  definition: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  nameWithType: FeedbackServiceExtensions.SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Objects.Embed>, Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: FeedbackServiceExtensions.SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Objects.Embed), Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions
  definition: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPrivatePaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  nameWithType: FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Objects.Embed>, Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Objects.Embed), Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivatePaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPrivatePaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivatePaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPrivatePaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  isExternal: true
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendContextualPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  nameWithType: FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Objects.Embed>, Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Objects.Embed), Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualPaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendContextualPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendContextualPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendContextualPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions
  commentId: T:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions
  parent: Remora.Discord.Pagination.Extensions
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html
  name: FeedbackServiceExtensions
  nameWithType: FeedbackServiceExtensions
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions
- uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  isExternal: true
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  nameWithType: FeedbackServiceExtensions.SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Objects.Embed>, Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: FeedbackServiceExtensions.SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Objects.Embed), Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPaginatedMessageAsync(FeedbackService, Snowflake, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  isExternal: true
  href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPrivatePaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  nameWithType: FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList<Embed>, PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Objects.Embed>, Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService, Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Objects.Embed), Remora.Discord.Pagination.PaginatedAppearanceOptions, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivatePaginatedMessageAsync(FeedbackService, Snowflake, IReadOnlyList(Of Embed), PaginatedAppearanceOptions, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivatePaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPrivatePaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.SendPrivatePaginatedMessageAsync(Remora.Discord.Commands.Feedback.Services.FeedbackService,Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Objects.Embed},Remora.Discord.Pagination.PaginatedAppearanceOptions,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivatePaginatedMessageAsync
    href: Remora.Discord.Pagination.Extensions.FeedbackServiceExtensions.html#Remora_Discord_Pagination_Extensions_FeedbackServiceExtensions_SendPrivatePaginatedMessageAsync_Remora_Discord_Commands_Feedback_Services_FeedbackService_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Objects_Embed__Remora_Discord_Pagination_PaginatedAppearanceOptions_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
    name: FeedbackService
    href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Pagination.PaginatedAppearanceOptions
    name: PaginatedAppearanceOptions
    href: Remora.Discord.Pagination.PaginatedAppearanceOptions.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Pagination.Extensions
  commentId: N:Remora.Discord.Pagination.Extensions
  href: Remora.html
  name: Remora.Discord.Pagination.Extensions
  nameWithType: Remora.Discord.Pagination.Extensions
  fullName: Remora.Discord.Pagination.Extensions
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Pagination
    name: Pagination
    href: Remora.Discord.Pagination.html
  - name: .
  - uid: Remora.Discord.Pagination.Extensions
    name: Extensions
    href: Remora.Discord.Pagination.Extensions.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Pagination
    name: Pagination
    href: Remora.Discord.Pagination.html
  - name: .
  - uid: Remora.Discord.Pagination.Extensions
    name: Extensions
    href: Remora.Discord.Pagination.Extensions.html
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_Theme
  name: Theme
  nameWithType: FeedbackService.Theme
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.Theme
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  commentId: P:Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_Theme
  name: Theme
  nameWithType: IFeedbackService.Theme
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
- uid: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
  commentId: T:Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
  parent: Remora.Discord.Commands.Feedback.Themes
  href: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme.html
  name: IFeedbackTheme
  nameWithType: IFeedbackTheme
  fullName: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
- uid: Remora.Discord.Commands.Feedback.Themes
  commentId: N:Remora.Discord.Commands.Feedback.Themes
  href: Remora.html
  name: Remora.Discord.Commands.Feedback.Themes
  nameWithType: Remora.Discord.Commands.Feedback.Themes
  fullName: Remora.Discord.Commands.Feedback.Themes
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Themes
    name: Themes
    href: Remora.Discord.Commands.Feedback.Themes.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Themes
    name: Themes
    href: Remora.Discord.Commands.Feedback.Themes.html
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_HasEditedOriginalMessage
  name: HasEditedOriginalMessage
  nameWithType: FeedbackService.HasEditedOriginalMessage
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasEditedOriginalMessage
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  commentId: P:Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_HasEditedOriginalMessage
  name: HasEditedOriginalMessage
  nameWithType: IFeedbackService.HasEditedOriginalMessage
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService
  commentId: T:Remora.Discord.Commands.Feedback.Services.FeedbackService
  parent: Remora.Discord.Commands.Feedback.Services
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html
  name: FeedbackService
  nameWithType: FeedbackService
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.#ctor*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.#ctor
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService__ctor_Remora_Discord_API_Abstractions_Rest_IDiscordRestChannelAPI_Remora_Discord_API_Abstractions_Rest_IDiscordRestUserAPI_Remora_Discord_Commands_Services_ContextInjectionService_Remora_Discord_API_Abstractions_Rest_IDiscordRestInteractionAPI_Remora_Discord_Commands_Feedback_Themes_IFeedbackTheme_
  name: FeedbackService
  nameWithType: FeedbackService.FeedbackService
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.FeedbackService
  nameWithType.vb: FeedbackService.New
  fullName.vb: Remora.Discord.Commands.Feedback.Services.FeedbackService.New
  name.vb: New
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
  parent: Remora.Discord.API.Abstractions.Rest
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI.html
  name: IDiscordRestChannelAPI
  nameWithType: IDiscordRestChannelAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI
  parent: Remora.Discord.API.Abstractions.Rest
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI.html
  name: IDiscordRestUserAPI
  nameWithType: IDiscordRestUserAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestUserAPI
- uid: Remora.Discord.Commands.Services.ContextInjectionService
  commentId: T:Remora.Discord.Commands.Services.ContextInjectionService
  parent: Remora.Discord.Commands.Services
  href: Remora.Discord.Commands.Services.ContextInjectionService.html
  name: ContextInjectionService
  nameWithType: ContextInjectionService
  fullName: Remora.Discord.Commands.Services.ContextInjectionService
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI
  parent: Remora.Discord.API.Abstractions.Rest
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI.html
  name: IDiscordRestInteractionAPI
  nameWithType: IDiscordRestInteractionAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestInteractionAPI
- uid: Remora.Discord.API.Abstractions.Rest
  commentId: N:Remora.Discord.API.Abstractions.Rest
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Rest
  nameWithType: Remora.Discord.API.Abstractions.Rest
  fullName: Remora.Discord.API.Abstractions.Rest
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
- uid: Remora.Discord.Commands.Services
  commentId: N:Remora.Discord.Commands.Services
  href: Remora.html
  name: Remora.Discord.Commands.Services
  nameWithType: Remora.Discord.Commands.Services
  fullName: Remora.Discord.Commands.Services
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Services
    name: Services
    href: Remora.Discord.Commands.Services.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Services
    name: Services
    href: Remora.Discord.Commands.Services.html
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendInfoAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendInfoAsync
  nameWithType: FeedbackService.SendInfoAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendInfoAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendInfoAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendInfoAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendInfoAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendInfoAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendInfoAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendInfoAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendInfoAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendInfoAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendInfoAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Rest.Core.Snowflake
  commentId: T:Remora.Rest.Core.Snowflake
  parent: Remora.Rest.Core
  isExternal: true
  name: Snowflake
  nameWithType: Snowflake
  fullName: Remora.Rest.Core.Snowflake
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Nullable{Remora.Rest.Core.Snowflake}
  commentId: T:System.Nullable{Remora.Rest.Core.Snowflake}
  parent: System
  definition: System.Nullable`1
  name: Snowflake?
  nameWithType: Snowflake?
  fullName: Remora.Rest.Core.Snowflake?
  spec.csharp:
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
- uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
  commentId: T:Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
  parent: Remora.Discord.Commands.Feedback.Messages
  href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  name: FeedbackMessageOptions
  nameWithType: FeedbackMessageOptions
  fullName: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IMessage>>>
  nameWithType: Task<Result<IReadOnlyList<IMessage>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IMessage>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IMessage)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IMessage)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IMessage)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: )
  - name: )
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Rest.Core
  commentId: N:Remora.Rest.Core
  isExternal: true
  name: Remora.Rest.Core
  nameWithType: Remora.Rest.Core
  fullName: Remora.Rest.Core
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Remora.Discord.Commands.Feedback.Messages
  commentId: N:Remora.Discord.Commands.Feedback.Messages
  href: Remora.html
  name: Remora.Discord.Commands.Feedback.Messages
  nameWithType: Remora.Discord.Commands.Feedback.Messages
  fullName: Remora.Discord.Commands.Feedback.Messages
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Messages
    name: Messages
    href: Remora.Discord.Commands.Feedback.Messages.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Messages
    name: Messages
    href: Remora.Discord.Commands.Feedback.Messages.html
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualInfoAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualInfoAsync
  nameWithType: FeedbackService.SendContextualInfoAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualInfoAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualInfoAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualInfoAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualInfoAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualInfoAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualInfoAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualInfoAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualInfoAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualInfoAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualInfoAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateInfoAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateInfoAsync
  nameWithType: FeedbackService.SendPrivateInfoAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateInfoAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateInfoAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateInfoAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateInfoAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateInfoAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateInfoAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateInfoAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateInfoAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendSuccessAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendSuccessAsync
  nameWithType: FeedbackService.SendSuccessAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendSuccessAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendSuccessAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendSuccessAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendSuccessAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendSuccessAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendSuccessAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendSuccessAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendSuccessAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendSuccessAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendSuccessAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualSuccessAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualSuccessAsync
  nameWithType: FeedbackService.SendContextualSuccessAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualSuccessAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualSuccessAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualSuccessAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualSuccessAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualSuccessAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualSuccessAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualSuccessAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualSuccessAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualSuccessAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualSuccessAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateSuccessAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateSuccessAsync
  nameWithType: FeedbackService.SendPrivateSuccessAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateSuccessAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateSuccessAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateSuccessAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateSuccessAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateSuccessAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateSuccessAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateSuccessAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateSuccessAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendNeutralAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendNeutralAsync
  nameWithType: FeedbackService.SendNeutralAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendNeutralAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendNeutralAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendNeutralAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendNeutralAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendNeutralAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendNeutralAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendNeutralAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendNeutralAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendNeutralAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendNeutralAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualNeutralAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualNeutralAsync
  nameWithType: FeedbackService.SendContextualNeutralAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualNeutralAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualNeutralAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualNeutralAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualNeutralAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualNeutralAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualNeutralAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualNeutralAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualNeutralAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualNeutralAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualNeutralAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateNeutralAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateNeutralAsync
  nameWithType: FeedbackService.SendPrivateNeutralAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateNeutralAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateNeutralAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateNeutralAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateNeutralAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateNeutralAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateNeutralAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateNeutralAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateNeutralAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendWarningAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendWarningAsync
  nameWithType: FeedbackService.SendWarningAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendWarningAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendWarningAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendWarningAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendWarningAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendWarningAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendWarningAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendWarningAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendWarningAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendWarningAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendWarningAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualWarningAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualWarningAsync
  nameWithType: FeedbackService.SendContextualWarningAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualWarningAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualWarningAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualWarningAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualWarningAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualWarningAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualWarningAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualWarningAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualWarningAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualWarningAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualWarningAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateWarningAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateWarningAsync
  nameWithType: FeedbackService.SendPrivateWarningAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateWarningAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateWarningAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateWarningAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateWarningAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateWarningAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateWarningAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateWarningAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateWarningAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendErrorAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendErrorAsync
  nameWithType: FeedbackService.SendErrorAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendErrorAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendErrorAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendErrorAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendErrorAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendErrorAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendErrorAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendErrorAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendErrorAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendErrorAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendErrorAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualErrorAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualErrorAsync
  nameWithType: FeedbackService.SendContextualErrorAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualErrorAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualErrorAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualErrorAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualErrorAsync(string, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualErrorAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualErrorAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualErrorAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualErrorAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualErrorAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualErrorAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateErrorAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateErrorAsync
  nameWithType: FeedbackService.SendPrivateErrorAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateErrorAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateErrorAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateErrorAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateErrorAsync(Snowflake, string, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateErrorAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateErrorAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateErrorAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateErrorAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendMessageAsync
  nameWithType: FeedbackService.SendMessageAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendMessageAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendMessageAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
    name: FeedbackMessage
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendMessageAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
    name: FeedbackMessage
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
  commentId: T:Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
  parent: Remora.Discord.Commands.Feedback.Messages
  href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  name: FeedbackMessage
  nameWithType: FeedbackMessage
  fullName: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualMessageAsync_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualMessageAsync
  nameWithType: FeedbackService.SendContextualMessageAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualMessageAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualMessageAsync_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualMessageAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualMessageAsync_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
    name: FeedbackMessage
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualMessageAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualMessageAsync_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
    name: FeedbackMessage
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateMessageAsync
  nameWithType: FeedbackService.SendPrivateMessageAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateMessageAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateMessageAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
    name: FeedbackMessage
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateMessageAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
    name: FeedbackMessage
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendEmbedAsync
  nameWithType: FeedbackService.SendEmbedAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendEmbedAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendEmbedAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendEmbedAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.API.Objects.Embed
  commentId: T:Remora.Discord.API.Objects.Embed
  parent: Remora.Discord.API.Objects
  href: Remora.Discord.API.Objects.Embed.html
  name: Embed
  nameWithType: Embed
  fullName: Remora.Discord.API.Objects.Embed
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IMessage>>
  nameWithType: Task<Result<IMessage>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IMessage>>
  nameWithType.vb: Task(Of Result(Of IMessage))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IMessage))
  name.vb: Task(Of Result(Of IMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Objects
  commentId: N:Remora.Discord.API.Objects
  href: Remora.html
  name: Remora.Discord.API.Objects
  nameWithType: Remora.Discord.API.Objects
  fullName: Remora.Discord.API.Objects
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Objects
    name: Objects
    href: Remora.Discord.API.Objects.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Objects
    name: Objects
    href: Remora.Discord.API.Objects.html
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualEmbedAsync_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualEmbedAsync
  nameWithType: FeedbackService.SendContextualEmbedAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualEmbedAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualEmbedAsync_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualEmbedAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualEmbedAsync_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualEmbedAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualEmbedAsync_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateEmbedAsync
  nameWithType: FeedbackService.SendPrivateEmbedAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateEmbedAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateEmbedAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateEmbedAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Objects.Embed
    name: Embed
    href: Remora.Discord.API.Objects.Embed.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContentAsync
  nameWithType: FeedbackService.SendContentAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContentAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContentAsync(Snowflake, string, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContentAsync(Snowflake, string, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake, string, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContentAsync(Snowflake, String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake, String, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContentAsync(Snowflake, String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContentAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContentAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualContentAsync_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualContentAsync
  nameWithType: FeedbackService.SendContextualContentAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualContentAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualContentAsync_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualContentAsync(string, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualContentAsync(string, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(string, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualContentAsync(String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(String, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualContentAsync(String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualContentAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualContentAsync_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualContentAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualContentAsync_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateContentAsync
  nameWithType: FeedbackService.SendPrivateContentAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateContentAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateContentAsync(Snowflake, string, Color, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateContentAsync(Snowflake, string, Color, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake, string, System.Drawing.Color, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake, String, System.Drawing.Color, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateContentAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateContentAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendAsync
  nameWithType: FeedbackService.SendAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Rest.Core.Optional{System.String}
  commentId: T:Remora.Rest.Core.Optional{System.String}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Optional<string>
  nameWithType: Optional<string>
  fullName: Remora.Rest.Core.Optional<string>
  nameWithType.vb: Optional(Of String)
  fullName.vb: Remora.Rest.Core.Optional(Of String)
  name.vb: Optional(Of String)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IEmbed>>
  nameWithType: Optional<IReadOnlyList<IEmbed>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IEmbed))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed))
  name.vb: Optional(Of IReadOnlyList(Of IEmbed))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional`1
  commentId: T:Remora.Rest.Core.Optional`1
  isExternal: true
  name: Optional<TValue>
  nameWithType: Optional<TValue>
  fullName: Remora.Rest.Core.Optional<TValue>
  nameWithType.vb: Optional(Of TValue)
  fullName.vb: Remora.Rest.Core.Optional(Of TValue)
  name.vb: Optional(Of TValue)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendContextualAsync_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualAsync
  nameWithType: FeedbackService.SendContextualAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendContextualAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualAsync_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualAsync(Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendContextualAsync(Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendContextualAsync(Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualAsync(Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualAsync_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendContextualAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualAsync_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_SendPrivateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateAsync
  nameWithType: FeedbackService.SendPrivateAsync
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.SendPrivateAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  isExternal: true
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  nameWithType.vb: IFeedbackService.SendPrivateAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
    name: SendPrivateAsync
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
    name: FeedbackMessageOptions
    href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext
  href: Remora.Discord.Commands.Feedback.Services.FeedbackService.html#Remora_Discord_Commands_Feedback_Services_FeedbackService_HasInteractionContext
  name: HasInteractionContext
  nameWithType: FeedbackService.HasInteractionContext
  fullName: Remora.Discord.Commands.Feedback.Services.FeedbackService.HasInteractionContext
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_HasInteractionContext
  name: HasInteractionContext()
  nameWithType: IFeedbackService.HasInteractionContext()
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext()
  spec.csharp:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
    name: HasInteractionContext
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_HasInteractionContext
  - name: (
  - name: )
  spec.vb:
  - uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
    name: HasInteractionContext
    href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_HasInteractionContext
  - name: (
  - name: )
