### YamlMime:ManagedReference
items:
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  commentId: T:Remora.Discord.Commands.Feedback.Services.IFeedbackService
  id: IFeedbackService
  parent: Remora.Discord.Commands.Feedback.Services
  children:
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  langs:
  - csharp
  - vb
  name: IFeedbackService
  nameWithType: IFeedbackService
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  type: Interface
  source:
    id: IFeedbackService
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 38
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Handles sending formatted messages to the users.
  example: []
  syntax:
    content: public interface IFeedbackService
    content.vb: Public Interface IFeedbackService
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  commentId: P:Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  id: Theme
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: Theme
  nameWithType: IFeedbackService.Theme
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  type: Property
  source:
    id: Theme
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 43
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Gets the theme used by the feedback service.
  example: []
  syntax:
    content: IFeedbackTheme Theme { get; }
    parameters: []
    return:
      type: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
    content.vb: ReadOnly Property Theme As IFeedbackTheme
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme*
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  commentId: P:Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  id: HasEditedOriginalMessage
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: HasEditedOriginalMessage
  nameWithType: IFeedbackService.HasEditedOriginalMessage
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  type: Property
  source:
    id: HasEditedOriginalMessage
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 50
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: >-
    Gets a value indicating whether the service, in the context of an interaction, has edited the original

    message.
  remarks: This method always returns false in a message context.
  example: []
  syntax:
    content: bool HasEditedOriginalMessage { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property HasEditedOriginalMessage As Boolean
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage*
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendInfoAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendInfoAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendInfoAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendInfoAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 61
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send an informational message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendInfoAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendInfoAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync*
  nameWithType.vb: IFeedbackService.SendInfoAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendInfoAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualInfoAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualInfoAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualInfoAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualInfoAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 82
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send an informational message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualInfoAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualInfoAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync*
  nameWithType.vb: IFeedbackService.SendContextualInfoAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualInfoAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateInfoAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateInfoAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateInfoAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateInfoAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 98
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send an informational message to the given user as a direct message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateInfoAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateInfoAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync*
  nameWithType.vb: IFeedbackService.SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateInfoAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendSuccessAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendSuccessAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendSuccessAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendSuccessAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 115
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a positive, successful message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendSuccessAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendSuccessAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync*
  nameWithType.vb: IFeedbackService.SendSuccessAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendSuccessAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualSuccessAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualSuccessAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualSuccessAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualSuccessAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 136
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a positive, successful message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualSuccessAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualSuccessAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync*
  nameWithType.vb: IFeedbackService.SendContextualSuccessAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualSuccessAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateSuccessAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateSuccessAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateSuccessAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 152
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a positive, successful message to the given user as a direct message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateSuccessAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateSuccessAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync*
  nameWithType.vb: IFeedbackService.SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateSuccessAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendNeutralAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendNeutralAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendNeutralAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendNeutralAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 169
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a neutral message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendNeutralAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendNeutralAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync*
  nameWithType.vb: IFeedbackService.SendNeutralAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendNeutralAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualNeutralAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualNeutralAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualNeutralAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualNeutralAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 190
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a neutral message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualNeutralAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualNeutralAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync*
  nameWithType.vb: IFeedbackService.SendContextualNeutralAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualNeutralAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateNeutralAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateNeutralAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateNeutralAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 206
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a neutral message to the given user as a direct message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateNeutralAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateNeutralAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync*
  nameWithType.vb: IFeedbackService.SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateNeutralAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendWarningAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendWarningAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendWarningAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendWarningAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 223
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a warning message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendWarningAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendWarningAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync*
  nameWithType.vb: IFeedbackService.SendWarningAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendWarningAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualWarningAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualWarningAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualWarningAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualWarningAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 244
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a warning message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualWarningAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualWarningAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync*
  nameWithType.vb: IFeedbackService.SendContextualWarningAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualWarningAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateWarningAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateWarningAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateWarningAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateWarningAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 260
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a warning message to the given user as a direct message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateWarningAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateWarningAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync*
  nameWithType.vb: IFeedbackService.SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateWarningAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendErrorAsync(Remora.Rest.Core.Snowflake,System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendErrorAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendErrorAsync(Snowflake, string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendErrorAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 277
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a negative error message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendErrorAsync(Snowflake channel, string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendErrorAsync(channel As Snowflake, contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync*
  nameWithType.vb: IFeedbackService.SendErrorAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendErrorAsync(Snowflake, String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualErrorAsync(System.String,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualErrorAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualErrorAsync(string, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(string, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualErrorAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 298
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a negative error message wherever is most appropriate to the current context.
  remarks: >-
    This method will either create a followup message (if the context is an interaction) or a normal channel

    message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualErrorAsync(string contents, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualErrorAsync(contents As String, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync*
  nameWithType.vb: IFeedbackService.SendContextualErrorAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync(String, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualErrorAsync(String, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateErrorAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateErrorAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateErrorAsync(Snowflake, string, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake, string, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateErrorAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 314
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a negative error message to the given user as a direct message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateErrorAsync(Snowflake user, string contents, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: contents
      type: System.String
      description: The contents of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateErrorAsync(user As Snowflake, contents As String, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync*
  nameWithType.vb: IFeedbackService.SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync(Remora.Rest.Core.Snowflake, String, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateErrorAsync(Snowflake, String, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendMessageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 331
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendMessageAsync(Snowflake channel, FeedbackMessage message, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: message
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
      description: The message to send.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendMessageAsync(channel As Snowflake, message As FeedbackMessage, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync*
  nameWithType.vb: IFeedbackService.SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendMessageAsync(Snowflake, FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualMessageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 348
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a contextual message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualMessageAsync(FeedbackMessage message, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: message
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
      description: The message to send.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualMessageAsync(message As FeedbackMessage, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync*
  nameWithType.vb: IFeedbackService.SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync(Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualMessageAsync(FeedbackMessage, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateMessageAsync(Remora.Rest.Core.Snowflake,Remora.Discord.Commands.Feedback.Messages.FeedbackMessage,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateMessageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 364
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Send a private message.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateMessageAsync(Snowflake user, FeedbackMessage message, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: message
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
      description: The message to send.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateMessageAsync(user As Snowflake, message As FeedbackMessage, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync*
  nameWithType.vb: IFeedbackService.SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync(Remora.Rest.Core.Snowflake, Remora.Discord.Commands.Feedback.Messages.FeedbackMessage, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateMessageAsync(Snowflake, FeedbackMessage, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendEmbedAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 380
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given embed to the given channel.
  example: []
  syntax:
    content: Task<Result<IMessage>> SendEmbedAsync(Snowflake channel, Embed embed, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the embed to.
    - id: embed
      type: Remora.Discord.API.Objects.Embed
      description: The embed.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendEmbedAsync(channel As Snowflake, embed As Embed, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync*
  nameWithType.vb: IFeedbackService.SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualEmbedAsync(Embed, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualEmbedAsync(Embed, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualEmbedAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 395
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given embed to current context.
  example: []
  syntax:
    content: Task<Result<IMessage>> SendContextualEmbedAsync(Embed embed, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: embed
      type: Remora.Discord.API.Objects.Embed
      description: The embed.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualEmbedAsync(embed As Embed, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync*
  nameWithType.vb: IFeedbackService.SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync(Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualEmbedAsync(Embed, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Objects.Embed,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateEmbedAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 410
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given embed to the given user in their private DM channel.
  example: []
  syntax:
    content: Task<Result<IMessage>> SendPrivateEmbedAsync(Snowflake user, Embed embed, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user to send the embed to.
    - id: embed
      type: Remora.Discord.API.Objects.Embed
      description: The embed.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateEmbedAsync(user As Snowflake, embed As Embed, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync*
  nameWithType.vb: IFeedbackService.SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Objects.Embed, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateEmbedAsync(Snowflake, Embed, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContentAsync(Snowflake, string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContentAsync(Snowflake, string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake, string, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContentAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 428
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given string as one or more sequential embeds, chunked into sets of 1024 characters.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContentAsync(Snowflake channel, string contents, Color color, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the embed to.
    - id: contents
      type: System.String
      description: The contents to send.
    - id: color
      type: System.Drawing.Color
      description: The embed colour.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContentAsync(channel As Snowflake, contents As String, color As Color, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync*
  nameWithType.vb: IFeedbackService.SendContentAsync(Snowflake, String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync(Remora.Rest.Core.Snowflake, String, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContentAsync(Snowflake, String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualContentAsync(System.String,System.Drawing.Color,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualContentAsync(string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualContentAsync(string, Color, Snowflake?, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(string, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualContentAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 447
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends the given string as one or more sequential embeds, chunked into sets of 1024 characters.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendContextualContentAsync(string contents, Color color, Snowflake? target = null, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: contents
      type: System.String
      description: The contents to send.
    - id: color
      type: System.Drawing.Color
      description: The embed colour.
    - id: target
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The target user to mention, if any.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendContextualContentAsync(contents As String, color As Color, target As Snowflake? = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync*
  nameWithType.vb: IFeedbackService.SendContextualContentAsync(String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync(String, System.Drawing.Color, Remora.Rest.Core.Snowflake?, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualContentAsync(String, Color, Snowflake?, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateContentAsync(Remora.Rest.Core.Snowflake,System.String,System.Drawing.Color,Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateContentAsync(Snowflake, string, Color, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateContentAsync(Snowflake, string, Color, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake, string, System.Drawing.Color, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateContentAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 466
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: >-
    Sends the given string as one or more sequential embeds to the given user over DM, chunked into sets of 1024

    characters.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IMessage>>> SendPrivateContentAsync(Snowflake user, string contents, Color color, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user to send the content to.
    - id: contents
      type: System.String
      description: The contents to send.
    - id: color
      type: System.Drawing.Color
      description: The embed colour.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous operation.
    content.vb: Function SendPrivateContentAsync(user As Snowflake, contents As String, color As Color, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IMessage)))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync*
  nameWithType.vb: IFeedbackService.SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync(Remora.Rest.Core.Snowflake, String, System.Drawing.Color, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateContentAsync(Snowflake, String, Color, FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 484
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends an unformatted message.
  example: []
  syntax:
    content: Task<Result<IMessage>> SendAsync(Snowflake channel, Optional<string> content = default, Optional<IReadOnlyList<IEmbed>> embeds = default, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: channel
      type: Remora.Rest.Core.Snowflake
      description: The channel to send the message to.
    - id: content
      type: Remora.Rest.Core.Optional{System.String}
      description: The content of the message.
    - id: embeds
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
      description: The embeds of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: The created message.
    content.vb: Function SendAsync(channel As Snowflake, content As [Optional](Of String) = Nothing, embeds As [Optional](Of IReadOnlyList(Of IEmbed)) = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync*
  nameWithType.vb: IFeedbackService.SendAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendContextualAsync(Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendContextualAsync(Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendContextualAsync(Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendContextualAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 501
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends an unformatted message to the current context.
  example: []
  syntax:
    content: Task<Result<IMessage>> SendContextualAsync(Optional<string> content = default, Optional<IReadOnlyList<IEmbed>> embeds = default, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: content
      type: Remora.Rest.Core.Optional{System.String}
      description: The content of the message.
    - id: embeds
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
      description: The embeds of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: The created message.
    content.vb: Function SendContextualAsync(content As [Optional](Of String) = Nothing, embeds As [Optional](Of IReadOnlyList(Of IEmbed)) = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync*
  nameWithType.vb: IFeedbackService.SendContextualAsync(Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync(Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendContextualAsync(Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  id: SendPrivateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}},Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: SendPrivateAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  nameWithType: IFeedbackService.SendPrivateAsync(Snowflake, Optional<string>, Optional<IReadOnlyList<IEmbed>>, FeedbackMessageOptions?, CancellationToken)
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>, Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions?, System.Threading.CancellationToken)
  type: Method
  source:
    id: SendPrivateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 518
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Sends an unformatted message to the given user in their private DM channel.
  example: []
  syntax:
    content: Task<Result<IMessage>> SendPrivateAsync(Snowflake user, Optional<string> content = default, Optional<IReadOnlyList<IEmbed>> embeds = default, FeedbackMessageOptions? options = null, CancellationToken ct = default)
    parameters:
    - id: user
      type: Remora.Rest.Core.Snowflake
      description: The user to send the message to.
    - id: content
      type: Remora.Rest.Core.Optional{System.String}
      description: The content of the message.
    - id: embeds
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
      description: The embeds of the message.
    - id: options
      type: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
      description: The message options to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
      description: The created message.
    content.vb: Function SendPrivateAsync(user As Snowflake, content As [Optional](Of String) = Nothing, embeds As [Optional](Of IReadOnlyList(Of IEmbed)) = Nothing, options As FeedbackMessageOptions = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IMessage))
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync*
  nameWithType.vb: IFeedbackService.SendPrivateAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
  fullName.vb: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed)), Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions, System.Threading.CancellationToken)
  name.vb: SendPrivateAsync(Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of IEmbed)), FeedbackMessageOptions, CancellationToken)
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
  commentId: M:Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
  id: HasInteractionContext
  parent: Remora.Discord.Commands.Feedback.Services.IFeedbackService
  langs:
  - csharp
  - vb
  name: HasInteractionContext()
  nameWithType: IFeedbackService.HasInteractionContext()
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext()
  type: Method
  source:
    id: HasInteractionContext
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Feedback\Services\IFeedbackService.cs
    startLine: 531
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Feedback.Services
  summary: Determines whether the feedback service has access to an interaction context.
  example: []
  syntax:
    content: bool HasInteractionContext()
    return:
      type: System.Boolean
      description: true if the feedback service has access to an interaction context; otherwise, false.
    content.vb: Function HasInteractionContext() As Boolean
  overload: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext*
references:
- uid: Remora.Discord.Commands.Feedback.Services
  commentId: N:Remora.Discord.Commands.Feedback.Services
  href: Remora.html
  name: Remora.Discord.Commands.Feedback.Services
  nameWithType: Remora.Discord.Commands.Feedback.Services
  fullName: Remora.Discord.Commands.Feedback.Services
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Services
    name: Services
    href: Remora.Discord.Commands.Feedback.Services.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Services
    name: Services
    href: Remora.Discord.Commands.Feedback.Services.html
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_Theme
  name: Theme
  nameWithType: IFeedbackService.Theme
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.Theme
- uid: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
  commentId: T:Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
  parent: Remora.Discord.Commands.Feedback.Themes
  href: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme.html
  name: IFeedbackTheme
  nameWithType: IFeedbackTheme
  fullName: Remora.Discord.Commands.Feedback.Themes.IFeedbackTheme
- uid: Remora.Discord.Commands.Feedback.Themes
  commentId: N:Remora.Discord.Commands.Feedback.Themes
  href: Remora.html
  name: Remora.Discord.Commands.Feedback.Themes
  nameWithType: Remora.Discord.Commands.Feedback.Themes
  fullName: Remora.Discord.Commands.Feedback.Themes
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Themes
    name: Themes
    href: Remora.Discord.Commands.Feedback.Themes.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Themes
    name: Themes
    href: Remora.Discord.Commands.Feedback.Themes.html
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_HasEditedOriginalMessage
  name: HasEditedOriginalMessage
  nameWithType: IFeedbackService.HasEditedOriginalMessage
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasEditedOriginalMessage
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendInfoAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendInfoAsync
  nameWithType: IFeedbackService.SendInfoAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendInfoAsync
- uid: Remora.Rest.Core.Snowflake
  commentId: T:Remora.Rest.Core.Snowflake
  parent: Remora.Rest.Core
  isExternal: true
  name: Snowflake
  nameWithType: Snowflake
  fullName: Remora.Rest.Core.Snowflake
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Nullable{Remora.Rest.Core.Snowflake}
  commentId: T:System.Nullable{Remora.Rest.Core.Snowflake}
  parent: System
  definition: System.Nullable`1
  name: Snowflake?
  nameWithType: Snowflake?
  fullName: Remora.Rest.Core.Snowflake?
  spec.csharp:
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
- uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
  commentId: T:Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
  parent: Remora.Discord.Commands.Feedback.Messages
  href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions.html
  name: FeedbackMessageOptions
  nameWithType: FeedbackMessageOptions
  fullName: Remora.Discord.Commands.Feedback.Messages.FeedbackMessageOptions
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IMessage}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IMessage>>>
  nameWithType: Task<Result<IReadOnlyList<IMessage>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IMessage>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IMessage)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IMessage)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IMessage)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: )
  - name: )
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Rest.Core
  commentId: N:Remora.Rest.Core
  isExternal: true
  name: Remora.Rest.Core
  nameWithType: Remora.Rest.Core
  fullName: Remora.Rest.Core
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Remora.Discord.Commands.Feedback.Messages
  commentId: N:Remora.Discord.Commands.Feedback.Messages
  href: Remora.html
  name: Remora.Discord.Commands.Feedback.Messages
  nameWithType: Remora.Discord.Commands.Feedback.Messages
  fullName: Remora.Discord.Commands.Feedback.Messages
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Messages
    name: Messages
    href: Remora.Discord.Commands.Feedback.Messages.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback
    name: Feedback
    href: Remora.Discord.Commands.Feedback.html
  - name: .
  - uid: Remora.Discord.Commands.Feedback.Messages
    name: Messages
    href: Remora.Discord.Commands.Feedback.Messages.html
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualInfoAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualInfoAsync
  nameWithType: IFeedbackService.SendContextualInfoAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualInfoAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateInfoAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateInfoAsync
  nameWithType: IFeedbackService.SendPrivateInfoAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateInfoAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendSuccessAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendSuccessAsync
  nameWithType: IFeedbackService.SendSuccessAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendSuccessAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualSuccessAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualSuccessAsync
  nameWithType: IFeedbackService.SendContextualSuccessAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualSuccessAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateSuccessAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateSuccessAsync
  nameWithType: IFeedbackService.SendPrivateSuccessAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateSuccessAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendNeutralAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendNeutralAsync
  nameWithType: IFeedbackService.SendNeutralAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendNeutralAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualNeutralAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualNeutralAsync
  nameWithType: IFeedbackService.SendContextualNeutralAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualNeutralAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateNeutralAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateNeutralAsync
  nameWithType: IFeedbackService.SendPrivateNeutralAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateNeutralAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendWarningAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendWarningAsync
  nameWithType: IFeedbackService.SendWarningAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendWarningAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualWarningAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualWarningAsync
  nameWithType: IFeedbackService.SendContextualWarningAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualWarningAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateWarningAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateWarningAsync
  nameWithType: IFeedbackService.SendPrivateWarningAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateWarningAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendErrorAsync_Remora_Rest_Core_Snowflake_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendErrorAsync
  nameWithType: IFeedbackService.SendErrorAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendErrorAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualErrorAsync_System_String_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualErrorAsync
  nameWithType: IFeedbackService.SendContextualErrorAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualErrorAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateErrorAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateErrorAsync
  nameWithType: IFeedbackService.SendPrivateErrorAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateErrorAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendMessageAsync
  nameWithType: IFeedbackService.SendMessageAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendMessageAsync
- uid: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
  commentId: T:Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
  parent: Remora.Discord.Commands.Feedback.Messages
  href: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage.html
  name: FeedbackMessage
  nameWithType: FeedbackMessage
  fullName: Remora.Discord.Commands.Feedback.Messages.FeedbackMessage
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualMessageAsync_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualMessageAsync
  nameWithType: IFeedbackService.SendContextualMessageAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualMessageAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateMessageAsync_Remora_Rest_Core_Snowflake_Remora_Discord_Commands_Feedback_Messages_FeedbackMessage_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateMessageAsync
  nameWithType: IFeedbackService.SendPrivateMessageAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateMessageAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendEmbedAsync
  nameWithType: IFeedbackService.SendEmbedAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendEmbedAsync
- uid: Remora.Discord.API.Objects.Embed
  commentId: T:Remora.Discord.API.Objects.Embed
  parent: Remora.Discord.API.Objects
  href: Remora.Discord.API.Objects.Embed.html
  name: Embed
  nameWithType: Embed
  fullName: Remora.Discord.API.Objects.Embed
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IMessage>>
  nameWithType: Task<Result<IMessage>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IMessage>>
  nameWithType.vb: Task(Of Result(Of IMessage))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IMessage))
  name.vb: Task(Of Result(Of IMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IMessage
    name: IMessage
    href: Remora.Discord.API.Abstractions.Objects.IMessage.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Objects
  commentId: N:Remora.Discord.API.Objects
  href: Remora.html
  name: Remora.Discord.API.Objects
  nameWithType: Remora.Discord.API.Objects
  fullName: Remora.Discord.API.Objects
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Objects
    name: Objects
    href: Remora.Discord.API.Objects.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Objects
    name: Objects
    href: Remora.Discord.API.Objects.html
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualEmbedAsync_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualEmbedAsync
  nameWithType: IFeedbackService.SendContextualEmbedAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualEmbedAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateEmbedAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Objects_Embed_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateEmbedAsync
  nameWithType: IFeedbackService.SendPrivateEmbedAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateEmbedAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContentAsync
  nameWithType: IFeedbackService.SendContentAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContentAsync
- uid: System.Drawing.Color
  commentId: T:System.Drawing.Color
  parent: System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing
  commentId: N:System.Drawing
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Drawing
  nameWithType: System.Drawing
  fullName: System.Drawing
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Drawing
    name: Drawing
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualContentAsync_System_String_System_Drawing_Color_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualContentAsync
  nameWithType: IFeedbackService.SendContextualContentAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualContentAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateContentAsync_Remora_Rest_Core_Snowflake_System_String_System_Drawing_Color_Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateContentAsync
  nameWithType: IFeedbackService.SendPrivateContentAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateContentAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendAsync
  nameWithType: IFeedbackService.SendAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendAsync
- uid: Remora.Rest.Core.Optional{System.String}
  commentId: T:Remora.Rest.Core.Optional{System.String}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Optional<string>
  nameWithType: Optional<string>
  fullName: Remora.Rest.Core.Optional<string>
  nameWithType.vb: Optional(Of String)
  fullName.vb: Remora.Rest.Core.Optional(Of String)
  name.vb: Optional(Of String)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IEmbed}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IEmbed>>
  nameWithType: Optional<IReadOnlyList<IEmbed>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IEmbed>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IEmbed))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IEmbed))
  name.vb: Optional(Of IReadOnlyList(Of IEmbed))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IEmbed
    name: IEmbed
    href: Remora.Discord.API.Abstractions.Objects.IEmbed.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional`1
  commentId: T:Remora.Rest.Core.Optional`1
  isExternal: true
  name: Optional<TValue>
  nameWithType: Optional<TValue>
  fullName: Remora.Rest.Core.Optional<TValue>
  nameWithType.vb: Optional(Of TValue)
  fullName.vb: Remora.Rest.Core.Optional(Of TValue)
  name.vb: Optional(Of TValue)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendContextualAsync_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendContextualAsync
  nameWithType: IFeedbackService.SendContextualAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendContextualAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_SendPrivateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IEmbed___Remora_Discord_Commands_Feedback_Messages_FeedbackMessageOptions_System_Threading_CancellationToken_
  name: SendPrivateAsync
  nameWithType: IFeedbackService.SendPrivateAsync
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.SendPrivateAsync
- uid: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext*
  commentId: Overload:Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
  href: Remora.Discord.Commands.Feedback.Services.IFeedbackService.html#Remora_Discord_Commands_Feedback_Services_IFeedbackService_HasInteractionContext
  name: HasInteractionContext
  nameWithType: IFeedbackService.HasInteractionContext
  fullName: Remora.Discord.Commands.Feedback.Services.IFeedbackService.HasInteractionContext
