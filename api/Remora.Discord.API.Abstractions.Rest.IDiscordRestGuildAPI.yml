### YamlMime:ManagedReference
items:
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  id: IDiscordRestGuildAPI
  parent: Remora.Discord.API.Abstractions.Rest
  children:
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync(System.String,Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Drawing.Color},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt},System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},System.Boolean,Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Int32},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDiscordRestGuildAPI
  nameWithType: IDiscordRestGuildAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  type: Interface
  source:
    id: IDiscordRestGuildAPI
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 38
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Represents the Discord Guild API.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public interface IDiscordRestGuildAPI
    content.vb: >-
      <PublicAPI>

      Public Interface IDiscordRestGuildAPI
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync(System.String,Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync(System.String,Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},System.Threading.CancellationToken)
  id: CreateGuildAsync(System.String,Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildAsync(string, Optional<Stream>, Optional<VerificationLevel>, Optional<MessageNotificationLevel>, Optional<ExplicitContentFilterLevel>, Optional<IReadOnlyList<IRole>>, Optional<IReadOnlyList<IPartialChannel>>, Optional<Snowflake>, Optional<TimeSpan>, Optional<Snowflake>, Optional<SystemChannelFlags>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildAsync(string, Optional<Stream>, Optional<VerificationLevel>, Optional<MessageNotificationLevel>, Optional<ExplicitContentFilterLevel>, Optional<IReadOnlyList<IRole>>, Optional<IReadOnlyList<IPartialChannel>>, Optional<Snowflake>, Optional<TimeSpan>, Optional<Snowflake>, Optional<SystemChannelFlags>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync(string, Remora.Rest.Core.Optional<System.IO.Stream>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VerificationLevel>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IRole>>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialChannel>>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<System.TimeSpan>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SystemChannelFlags>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 61
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new guild. This can only by used by bots in less than 10 guilds.
  remarks: >-
    Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams

    afterwards, ensure that what you pass is a copy that the method can take ownership of.
  example: []
  syntax:
    content: Task<Result<IGuild>> CreateGuildAsync(string name, Optional<Stream> icon = default, Optional<VerificationLevel> verificationLevel = default, Optional<MessageNotificationLevel> defaultMessageNotifications = default, Optional<ExplicitContentFilterLevel> explicitContentFilter = default, Optional<IReadOnlyList<IRole>> roles = default, Optional<IReadOnlyList<IPartialChannel>> channels = default, Optional<Snowflake> afkChannelID = default, Optional<TimeSpan> afkTimeout = default, Optional<Snowflake> systemChannelID = default, Optional<SystemChannelFlags> systemChannelFlags = default, CancellationToken ct = default)
    parameters:
    - id: name
      type: System.String
      description: The name of the guild (2-100 characters).
    - id: icon
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The icon.
    - id: verificationLevel
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel}
      description: The verification level.
    - id: defaultMessageNotifications
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}
      description: The default message notification level.
    - id: explicitContentFilter
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}
      description: The explicit content filter level.
    - id: roles
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}
      description: The new guild roles.
    - id: channels
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}}
      description: The new guild channels.
    - id: afkChannelID
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the AFK channel.
    - id: afkTimeout
      type: Remora.Rest.Core.Optional{System.TimeSpan}
      description: The number of seconds until AFK timeout.
    - id: systemChannelID
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the system message channel.
    - id: systemChannelFlags
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags}
      description: The channel flags to use.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildAsync(name As String, icon As [Optional](Of Stream) = Nothing, verificationLevel As [Optional](Of VerificationLevel) = Nothing, defaultMessageNotifications As [Optional](Of MessageNotificationLevel) = Nothing, explicitContentFilter As [Optional](Of ExplicitContentFilterLevel) = Nothing, roles As [Optional](Of IReadOnlyList(Of IRole)) = Nothing, channels As [Optional](Of IReadOnlyList(Of IPartialChannel)) = Nothing, afkChannelID As [Optional](Of Snowflake) = Nothing, afkTimeout As [Optional](Of TimeSpan) = Nothing, systemChannelID As [Optional](Of Snowflake) = Nothing, systemChannelFlags As [Optional](Of SystemChannelFlags) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuild))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildAsync(String, Optional(Of Stream), Optional(Of VerificationLevel), Optional(Of MessageNotificationLevel), Optional(Of ExplicitContentFilterLevel), Optional(Of IReadOnlyList(Of IRole)), Optional(Of IReadOnlyList(Of IPartialChannel)), Optional(Of Snowflake), Optional(Of TimeSpan), Optional(Of Snowflake), Optional(Of SystemChannelFlags), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync(String, Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VerificationLevel), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IRole)), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialChannel)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of System.TimeSpan), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SystemChannelFlags), System.Threading.CancellationToken)
  name.vb: CreateGuildAsync(String, Optional(Of Stream), Optional(Of VerificationLevel), Optional(Of MessageNotificationLevel), Optional(Of ExplicitContentFilterLevel), Optional(Of IReadOnlyList(Of IRole)), Optional(Of IReadOnlyList(Of IPartialChannel)), Optional(Of Snowflake), Optional(Of TimeSpan), Optional(Of Snowflake), Optional(Of SystemChannelFlags), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  id: GetGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildAsync(Snowflake, Optional<bool>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildAsync(Snowflake, Optional<bool>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<bool>, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 84
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the guild with the given ID.
  example: []
  syntax:
    content: Task<Result<IGuild>> GetGuildAsync(Snowflake guildID, Optional<bool> withCounts = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: withCounts
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether member and presence counts should be included.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildAsync(guildID As Snowflake, withCounts As [Optional](Of Boolean) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuild))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync*
  nameWithType.vb: IDiscordRestGuildAPI.GetGuildAsync(Snowflake, Optional(Of Boolean), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Boolean), System.Threading.CancellationToken)
  name.vb: GetGuildAsync(Snowflake, Optional(Of Boolean), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildPreviewAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildPreviewAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildPreviewAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildPreviewAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 100
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: >-
    Gets a preview of the guild with the given ID.

    <remarks>

    This is only for public guilds.

    </remarks>
  example: []
  syntax:
    content: Task<Result<IGuildPreview>> GetGuildPreviewAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildPreview}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildPreviewAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildPreview))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.TimeSpan},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildAsync(Snowflake, Optional<string>, Optional<VerificationLevel?>, Optional<MessageNotificationLevel?>, Optional<ExplicitContentFilterLevel?>, Optional<Snowflake?>, Optional<TimeSpan>, Optional<Stream?>, Optional<Snowflake>, Optional<Stream?>, Optional<Stream?>, Optional<Stream?>, Optional<Snowflake?>, Optional<SystemChannelFlags>, Optional<Snowflake?>, Optional<Snowflake?>, Optional<string?>, Optional<IReadOnlyList<GuildFeature>>, Optional<string?>, Optional<bool>, Optional<Snowflake?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildAsync(Snowflake, Optional<string>, Optional<VerificationLevel?>, Optional<MessageNotificationLevel?>, Optional<ExplicitContentFilterLevel?>, Optional<Snowflake?>, Optional<TimeSpan>, Optional<Stream?>, Optional<Snowflake>, Optional<Stream?>, Optional<Stream?>, Optional<Stream?>, Optional<Snowflake?>, Optional<SystemChannelFlags>, Optional<Snowflake?>, Optional<Snowflake?>, Optional<string?>, Optional<IReadOnlyList<GuildFeature>>, Optional<string?>, Optional<bool>, Optional<Snowflake?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VerificationLevel?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<System.TimeSpan>, Remora.Rest.Core.Optional<System.IO.Stream?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<System.IO.Stream?>, Remora.Rest.Core.Optional<System.IO.Stream?>, Remora.Rest.Core.Optional<System.IO.Stream?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SystemChannelFlags>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.GuildFeature>>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 139
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the guild with the given ID.
  remarks: >-
    Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams

    afterwards, ensure that what you pass is a copy that the method can take ownership of.
  example: []
  syntax:
    content: Task<Result<IGuild>> ModifyGuildAsync(Snowflake guildID, Optional<string> name = default, Optional<VerificationLevel?> verificationLevel = default, Optional<MessageNotificationLevel?> defaultMessageNotifications = default, Optional<ExplicitContentFilterLevel?> explicitContentFilter = default, Optional<Snowflake?> afkChannelID = default, Optional<TimeSpan> afkTimeout = default, Optional<Stream?> icon = default, Optional<Snowflake> ownerID = default, Optional<Stream?> splash = default, Optional<Stream?> discoverySplash = default, Optional<Stream?> banner = default, Optional<Snowflake?> systemChannelID = default, Optional<SystemChannelFlags> systemChannelFlags = default, Optional<Snowflake?> rulesChannelID = default, Optional<Snowflake?> publicUpdatesChannelID = default, Optional<string?> preferredLocale = default, Optional<IReadOnlyList<GuildFeature>> features = default, Optional<string?> description = default, Optional<bool> isPremiumProgressBarEnabled = default, Optional<Snowflake?> safetyAlertsChannelID = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: Remora.Rest.Core.Optional{System.String}
      description: The new name of the guild.
    - id: verificationLevel
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}}
      description: The new verification level of the guild.
    - id: defaultMessageNotifications
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}}
      description: The new default notification level of the guild.
    - id: explicitContentFilter
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}}
      description: The new explicit filter level of the guild.
    - id: afkChannelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the new AFK channel.
    - id: afkTimeout
      type: Remora.Rest.Core.Optional{System.TimeSpan}
      description: The new AFK timeout.
    - id: icon
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The new icon.
    - id: ownerID
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the new owner.
    - id: splash
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The new splash.
    - id: discoverySplash
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The new discovery splash.
    - id: banner
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The new banner.
    - id: systemChannelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the new channel for system messages.
    - id: systemChannelFlags
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags}
      description: The new system channel flags.
    - id: rulesChannelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the new channel for rules.
    - id: publicUpdatesChannelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the new channel for public updates.
    - id: preferredLocale
      type: Remora.Rest.Core.Optional{System.String}
      description: The new preferred locale.
    - id: features
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}}
      description: The new guild features.
    - id: description
      type: Remora.Rest.Core.Optional{System.String}
      description: The new description.
    - id: isPremiumProgressBarEnabled
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the guild has the boost progress bar enabled.
    - id: safetyAlertsChannelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the channel where admins and moderators of Community guilds receive safety alerts from Discord.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyGuildAsync(guildID As Snowflake, name As [Optional](Of String) = Nothing, verificationLevel As [Optional](Of VerificationLevel?) = Nothing, defaultMessageNotifications As [Optional](Of MessageNotificationLevel?) = Nothing, explicitContentFilter As [Optional](Of ExplicitContentFilterLevel?) = Nothing, afkChannelID As [Optional](Of Snowflake?) = Nothing, afkTimeout As [Optional](Of TimeSpan) = Nothing, icon As [Optional](Of Stream) = Nothing, ownerID As [Optional](Of Snowflake) = Nothing, splash As [Optional](Of Stream) = Nothing, discoverySplash As [Optional](Of Stream) = Nothing, banner As [Optional](Of Stream) = Nothing, systemChannelID As [Optional](Of Snowflake?) = Nothing, systemChannelFlags As [Optional](Of SystemChannelFlags) = Nothing, rulesChannelID As [Optional](Of Snowflake?) = Nothing, publicUpdatesChannelID As [Optional](Of Snowflake?) = Nothing, preferredLocale As [Optional](Of String) = Nothing, features As [Optional](Of IReadOnlyList(Of GuildFeature)) = Nothing, description As [Optional](Of String) = Nothing, isPremiumProgressBarEnabled As [Optional](Of Boolean) = Nothing, safetyAlertsChannelID As [Optional](Of Snowflake?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuild))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildAsync(Snowflake, Optional(Of String), Optional(Of VerificationLevel?), Optional(Of MessageNotificationLevel?), Optional(Of ExplicitContentFilterLevel?), Optional(Of Snowflake?), Optional(Of TimeSpan), Optional(Of Stream), Optional(Of Snowflake), Optional(Of Stream), Optional(Of Stream), Optional(Of Stream), Optional(Of Snowflake?), Optional(Of SystemChannelFlags), Optional(Of Snowflake?), Optional(Of Snowflake?), Optional(Of String), Optional(Of IReadOnlyList(Of GuildFeature)), Optional(Of String), Optional(Of Boolean), Optional(Of Snowflake?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VerificationLevel?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel?), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of System.TimeSpan), Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SystemChannelFlags), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.GuildFeature)), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildAsync(Snowflake, Optional(Of String), Optional(Of VerificationLevel?), Optional(Of MessageNotificationLevel?), Optional(Of ExplicitContentFilterLevel?), Optional(Of Snowflake?), Optional(Of TimeSpan), Optional(Of Stream), Optional(Of Snowflake), Optional(Of Stream), Optional(Of Stream), Optional(Of Stream), Optional(Of Snowflake?), Optional(Of SystemChannelFlags), Optional(Of Snowflake?), Optional(Of Snowflake?), Optional(Of String), Optional(Of IReadOnlyList(Of GuildFeature)), Optional(Of String), Optional(Of Boolean), Optional(Of Snowflake?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: DeleteGuildAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: DeleteGuildAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.DeleteGuildAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeleteGuildAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 172
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Deletes the guild with the given ID.
  example: []
  syntax:
    content: Task<Result> DeleteGuildAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A deletion result which may or may not have succeeded.
    content.vb: Function DeleteGuildAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildChannelsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildChannelsAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildChannelsAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildChannelsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 180
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the channels of the given guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IChannel>>> GetGuildChannelsAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IChannel}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildChannelsAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IChannel)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildChannelAsync(Snowflake, string, Optional<ChannelType?>, Optional<string?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<string?>, Optional<VideoQualityMode?>, Optional<AutoArchiveDuration?>, Optional<IDefaultReaction?>, Optional<IReadOnlyList<IForumTag>?>, Optional<SortOrder?>, Optional<ForumLayout?>, Optional<int?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildChannelAsync(Snowflake, string, Optional<ChannelType?>, Optional<string?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<string?>, Optional<VideoQualityMode?>, Optional<AutoArchiveDuration?>, Optional<IDefaultReaction?>, Optional<IReadOnlyList<IForumTag>?>, Optional<SortOrder?>, Optional<ForumLayout?>, Optional<int?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ChannelType?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VideoQualityMode?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDefaultReaction?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IForumTag>?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SortOrder?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ForumLayout?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 213
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildChannelAsync(Snowflake guildID, string name, Optional<ChannelType?> type = default, Optional<string?> topic = default, Optional<int?> bitrate = default, Optional<int?> userLimit = default, Optional<int?> rateLimitPerUser = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<bool?> isNsfw = default, Optional<string?> rtcRegion = default, Optional<VideoQualityMode?> videoQualityMode = default, Optional<AutoArchiveDuration?> defaultAutoArchiveDuration = default, Optional<IDefaultReaction?> defaultReactionEmoji = default, Optional<IReadOnlyList<IForumTag>?> availableTags = default, Optional<SortOrder?> defaultSortOrder = default, Optional<ForumLayout?> defaultForumLayout = default, Optional<int?> defaultThreadRateLimitPerUser = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: type
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}}
      description: The type of the new channel.
    - id: topic
      type: Remora.Rest.Core.Optional{System.String}
      description: The topic of the new channel.
    - id: bitrate
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The bitrate of the new channel, if it is a voice channel.
    - id: userLimit
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The maximum number of users in the channel, if it is a voice channel.
    - id: rateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The number of seconds a user has to wait between messages.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: isNsfw
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the new channel is NSFW.
    - id: rtcRegion
      type: Remora.Rest.Core.Optional{System.String}
      description: The ID of the voice region of the voice or stage channel.
    - id: videoQualityMode
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}}
      description: The video quality mode of the voice channel.
    - id: defaultAutoArchiveDuration
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
      description: The default auto archival duration for threads.
    - id: defaultReactionEmoji
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction}
      description: The default emoji to show in reaction buttons of forum posts.
    - id: availableTags
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}}
      description: The tags that can be used in a forum channel.
    - id: defaultSortOrder
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}}
      description: The default sort order of posts.
    - id: defaultForumLayout
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}}
      description: The default layout of forums.
    - id: defaultThreadRateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The initial rate limit per user to set on newly created threads in a channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildChannelAsync(guildID As Snowflake, name As String, type As [Optional](Of ChannelType?) = Nothing, topic As [Optional](Of String) = Nothing, bitrate As [Optional](Of Integer?) = Nothing, userLimit As [Optional](Of Integer?) = Nothing, rateLimitPerUser As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, isNsfw As [Optional](Of Boolean?) = Nothing, rtcRegion As [Optional](Of String) = Nothing, videoQualityMode As [Optional](Of VideoQualityMode?) = Nothing, defaultAutoArchiveDuration As [Optional](Of AutoArchiveDuration?) = Nothing, defaultReactionEmoji As [Optional](Of IDefaultReaction) = Nothing, availableTags As [Optional](Of IReadOnlyList(Of IForumTag)) = Nothing, defaultSortOrder As [Optional](Of SortOrder?) = Nothing, defaultForumLayout As [Optional](Of ForumLayout?) = Nothing, defaultThreadRateLimitPerUser As [Optional](Of Integer?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildChannelAsync(Snowflake, String, Optional(Of ChannelType?), Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of String), Optional(Of VideoQualityMode?), Optional(Of AutoArchiveDuration?), Optional(Of IDefaultReaction), Optional(Of IReadOnlyList(Of IForumTag)), Optional(Of SortOrder?), Optional(Of ForumLayout?), Optional(Of Integer?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ChannelType?), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VideoQualityMode?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDefaultReaction), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IForumTag)), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SortOrder?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ForumLayout?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildChannelAsync(Snowflake, String, Optional(Of ChannelType?), Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of String), Optional(Of VideoQualityMode?), Optional(Of AutoArchiveDuration?), Optional(Of IDefaultReaction), Optional(Of IReadOnlyList(Of IForumTag)), Optional(Of SortOrder?), Optional(Of ForumLayout?), Optional(Of Integer?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildTextChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildTextChannelAsync(Snowflake, string, Optional<string?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<AutoArchiveDuration?>, Optional<int?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Snowflake, string, Optional<string?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<AutoArchiveDuration?>, Optional<int?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildTextChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 256
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new text channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildTextChannelAsync(Snowflake guildID, string name, Optional<string?> topic = default, Optional<int?> rateLimitPerUser = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<bool?> isNsfw = default, Optional<AutoArchiveDuration?> defaultAutoArchiveDuration = default, Optional<int?> defaultThreadRateLimitPerUser = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: topic
      type: Remora.Rest.Core.Optional{System.String}
      description: The topic of the new channel.
    - id: rateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The number of seconds a user has to wait between messages.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: isNsfw
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the new channel is NSFW.
    - id: defaultAutoArchiveDuration
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
      description: The default auto archival duration for threads.
    - id: defaultThreadRateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The initial rate limit per user to set on newly created threads in a channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildTextChannelAsync(guildID As Snowflake, name As String, topic As [Optional](Of String) = Nothing, rateLimitPerUser As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, isNsfw As [Optional](Of Boolean?) = Nothing, defaultAutoArchiveDuration As [Optional](Of AutoArchiveDuration?) = Nothing, defaultThreadRateLimitPerUser As [Optional](Of Integer?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Snowflake, String, Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of AutoArchiveDuration?), Optional(Of Integer?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildTextChannelAsync(Snowflake, String, Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of AutoArchiveDuration?), Optional(Of Integer?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildAnnouncementChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildAnnouncementChannelAsync(Snowflake, string, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<AutoArchiveDuration?>, Optional<int?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Snowflake, string, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<AutoArchiveDuration?>, Optional<int?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildAnnouncementChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 289
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new announcement channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildAnnouncementChannelAsync(Snowflake guildID, string name, Optional<int?> bitrate = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<bool?> isNsfw = default, Optional<AutoArchiveDuration?> defaultAutoArchiveDuration = default, Optional<int?> defaultThreadRateLimitPerUser = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: bitrate
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The bitrate of the new channel, if it is a voice channel.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: isNsfw
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the new channel is NSFW.
    - id: defaultAutoArchiveDuration
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
      description: The default auto archival duration for threads.
    - id: defaultThreadRateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The initial rate limit per user to set on newly created threads in a channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildAnnouncementChannelAsync(guildID As Snowflake, name As String, bitrate As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, isNsfw As [Optional](Of Boolean?) = Nothing, defaultAutoArchiveDuration As [Optional](Of AutoArchiveDuration?) = Nothing, defaultThreadRateLimitPerUser As [Optional](Of Integer?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Snowflake, String, Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of AutoArchiveDuration?), Optional(Of Integer?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildAnnouncementChannelAsync(Snowflake, String, Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of AutoArchiveDuration?), Optional(Of Integer?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildForumChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildForumChannelAsync(Snowflake, string, Optional<string?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<AutoArchiveDuration?>, Optional<IDefaultReaction?>, Optional<IReadOnlyList<IForumTag>?>, Optional<SortOrder?>, Optional<ForumLayout?>, Optional<int?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Snowflake, string, Optional<string?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<AutoArchiveDuration?>, Optional<IDefaultReaction?>, Optional<IReadOnlyList<IForumTag>?>, Optional<SortOrder?>, Optional<ForumLayout?>, Optional<int?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDefaultReaction?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IForumTag>?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SortOrder?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ForumLayout?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildForumChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 326
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new forum channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildForumChannelAsync(Snowflake guildID, string name, Optional<string?> topic = default, Optional<int?> rateLimitPerUser = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<bool?> isNsfw = default, Optional<AutoArchiveDuration?> defaultAutoArchiveDuration = default, Optional<IDefaultReaction?> defaultReactionEmoji = default, Optional<IReadOnlyList<IForumTag>?> availableTags = default, Optional<SortOrder?> defaultSortOrder = default, Optional<ForumLayout?> defaultForumLayout = default, Optional<int?> defaultThreadRateLimitPerUser = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: topic
      type: Remora.Rest.Core.Optional{System.String}
      description: The topic of the new channel.
    - id: rateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The number of seconds a user has to wait between messages.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: isNsfw
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the new channel is NSFW.
    - id: defaultAutoArchiveDuration
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
      description: The default auto archival duration for threads.
    - id: defaultReactionEmoji
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction}
      description: The default emoji to show in reaction buttons of forum posts.
    - id: availableTags
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}}
      description: The tags that can be used in a forum channel.
    - id: defaultSortOrder
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}}
      description: The default sort order of posts.
    - id: defaultForumLayout
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}}
      description: The default layout of forums.
    - id: defaultThreadRateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The initial rate limit per user to set on newly created threads in a channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildForumChannelAsync(guildID As Snowflake, name As String, topic As [Optional](Of String) = Nothing, rateLimitPerUser As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, isNsfw As [Optional](Of Boolean?) = Nothing, defaultAutoArchiveDuration As [Optional](Of AutoArchiveDuration?) = Nothing, defaultReactionEmoji As [Optional](Of IDefaultReaction) = Nothing, availableTags As [Optional](Of IReadOnlyList(Of IForumTag)) = Nothing, defaultSortOrder As [Optional](Of SortOrder?) = Nothing, defaultForumLayout As [Optional](Of ForumLayout?) = Nothing, defaultThreadRateLimitPerUser As [Optional](Of Integer?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Snowflake, String, Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of AutoArchiveDuration?), Optional(Of IDefaultReaction), Optional(Of IReadOnlyList(Of IForumTag)), Optional(Of SortOrder?), Optional(Of ForumLayout?), Optional(Of Integer?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDefaultReaction), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IForumTag)), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SortOrder?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ForumLayout?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildForumChannelAsync(Snowflake, String, Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of AutoArchiveDuration?), Optional(Of IDefaultReaction), Optional(Of IReadOnlyList(Of IForumTag)), Optional(Of SortOrder?), Optional(Of ForumLayout?), Optional(Of Integer?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildMediaChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildMediaChannelAsync(Snowflake, string, Optional<string?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<AutoArchiveDuration?>, Optional<IDefaultReaction?>, Optional<IReadOnlyList<IForumTag>?>, Optional<SortOrder?>, Optional<int?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Snowflake, string, Optional<string?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<AutoArchiveDuration?>, Optional<IDefaultReaction?>, Optional<IReadOnlyList<IForumTag>?>, Optional<SortOrder?>, Optional<int?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDefaultReaction?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IForumTag>?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SortOrder?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildMediaChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 366
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new forum channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildMediaChannelAsync(Snowflake guildID, string name, Optional<string?> topic = default, Optional<int?> rateLimitPerUser = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<AutoArchiveDuration?> defaultAutoArchiveDuration = default, Optional<IDefaultReaction?> defaultReactionEmoji = default, Optional<IReadOnlyList<IForumTag>?> availableTags = default, Optional<SortOrder?> defaultSortOrder = default, Optional<int?> defaultThreadRateLimitPerUser = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: topic
      type: Remora.Rest.Core.Optional{System.String}
      description: The topic of the new channel.
    - id: rateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The number of seconds a user has to wait between messages.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: defaultAutoArchiveDuration
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
      description: The default auto archival duration for threads.
    - id: defaultReactionEmoji
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction}
      description: The default emoji to show in reaction buttons of forum posts.
    - id: availableTags
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}}
      description: The tags that can be used in a forum channel.
    - id: defaultSortOrder
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}}
      description: The default sort order of posts.
    - id: defaultThreadRateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The initial rate limit per user to set on newly created threads in a channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildMediaChannelAsync(guildID As Snowflake, name As String, topic As [Optional](Of String) = Nothing, rateLimitPerUser As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, defaultAutoArchiveDuration As [Optional](Of AutoArchiveDuration?) = Nothing, defaultReactionEmoji As [Optional](Of IDefaultReaction) = Nothing, availableTags As [Optional](Of IReadOnlyList(Of IForumTag)) = Nothing, defaultSortOrder As [Optional](Of SortOrder?) = Nothing, defaultThreadRateLimitPerUser As [Optional](Of Integer?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Snowflake, String, Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of AutoArchiveDuration?), Optional(Of IDefaultReaction), Optional(Of IReadOnlyList(Of IForumTag)), Optional(Of SortOrder?), Optional(Of Integer?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDefaultReaction), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IForumTag)), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SortOrder?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildMediaChannelAsync(Snowflake, String, Optional(Of String), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of AutoArchiveDuration?), Optional(Of IDefaultReaction), Optional(Of IReadOnlyList(Of IForumTag)), Optional(Of SortOrder?), Optional(Of Integer?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildVoiceChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildVoiceChannelAsync(Snowflake, string, Optional<int?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<string?>, Optional<VideoQualityMode?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Snowflake, string, Optional<int?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<string?>, Optional<VideoQualityMode?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VideoQualityMode?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildVoiceChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 401
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new voice channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildVoiceChannelAsync(Snowflake guildID, string name, Optional<int?> bitrate = default, Optional<int?> userLimit = default, Optional<int?> rateLimitPerUser = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<bool?> isNsfw = default, Optional<string?> rtcRegion = default, Optional<VideoQualityMode?> videoQualityMode = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: bitrate
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The bitrate of the new channel, if it is a voice channel.
    - id: userLimit
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The maximum number of users in the channel, if it is a voice channel.
    - id: rateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The number of seconds a user has to wait between messages.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: isNsfw
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the new channel is NSFW.
    - id: rtcRegion
      type: Remora.Rest.Core.Optional{System.String}
      description: The ID of the voice region of the voice or stage channel.
    - id: videoQualityMode
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}}
      description: The video quality mode of the voice channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildVoiceChannelAsync(guildID As Snowflake, name As String, bitrate As [Optional](Of Integer?) = Nothing, userLimit As [Optional](Of Integer?) = Nothing, rateLimitPerUser As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, isNsfw As [Optional](Of Boolean?) = Nothing, rtcRegion As [Optional](Of String) = Nothing, videoQualityMode As [Optional](Of VideoQualityMode?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Snowflake, String, Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of String), Optional(Of VideoQualityMode?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VideoQualityMode?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildVoiceChannelAsync(Snowflake, String, Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of String), Optional(Of VideoQualityMode?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildStageChannelAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Nullable{System.Int32}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildStageChannelAsync(Snowflake, string, Optional<int?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<string?>, Optional<VideoQualityMode?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Snowflake, string, Optional<int?>, Optional<int?>, Optional<int?>, Optional<int?>, Optional<IReadOnlyList<IPartialPermissionOverwrite>?>, Optional<Snowflake?>, Optional<bool?>, Optional<string?>, Optional<VideoQualityMode?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<int?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VideoQualityMode?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildStageChannelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 435
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new stage channel for the guild.
  example: []
  syntax:
    content: Task<Result<IChannel>> CreateGuildStageChannelAsync(Snowflake guildID, string name, Optional<int?> bitrate = default, Optional<int?> userLimit = default, Optional<int?> rateLimitPerUser = default, Optional<int?> position = default, Optional<IReadOnlyList<IPartialPermissionOverwrite>?> permissionOverwrites = default, Optional<Snowflake?> parentID = default, Optional<bool?> isNsfw = default, Optional<string?> rtcRegion = default, Optional<VideoQualityMode?> videoQualityMode = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: bitrate
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The bitrate of the new channel, if it is a voice channel.
    - id: userLimit
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The maximum number of users in the channel, if it is a voice channel.
    - id: rateLimitPerUser
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The number of seconds a user has to wait between messages.
    - id: position
      type: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
      description: The sorting position of the new channel.
    - id: permissionOverwrites
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
      description: The permission overwrites of the new channel.
    - id: parentID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the parent category of the new channel.
    - id: isNsfw
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the new channel is NSFW.
    - id: rtcRegion
      type: Remora.Rest.Core.Optional{System.String}
      description: The ID of the voice region of the voice or stage channel.
    - id: videoQualityMode
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}}
      description: The video quality mode of the voice channel.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildStageChannelAsync(guildID As Snowflake, name As String, bitrate As [Optional](Of Integer?) = Nothing, userLimit As [Optional](Of Integer?) = Nothing, rateLimitPerUser As [Optional](Of Integer?) = Nothing, position As [Optional](Of Integer?) = Nothing, permissionOverwrites As [Optional](Of IReadOnlyList(Of IPartialPermissionOverwrite)) = Nothing, parentID As [Optional](Of Snowflake?) = Nothing, isNsfw As [Optional](Of Boolean?) = Nothing, rtcRegion As [Optional](Of String) = Nothing, videoQualityMode As [Optional](Of VideoQualityMode?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IChannel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Snowflake, String, Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of String), Optional(Of VideoQualityMode?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of Integer?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite)), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VideoQualityMode?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildStageChannelAsync(Snowflake, String, Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of Integer?), Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite)), Optional(Of Snowflake?), Optional(Of Boolean?), Optional(Of String), Optional(Of VideoQualityMode?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification},System.Threading.CancellationToken)
  id: ModifyGuildChannelPositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList<IChannelPositionModification>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList<IChannelPositionModification>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Rest.IChannelPositionModification>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildChannelPositionsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 459
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the positions of a set of channels in the guild.
  example: []
  syntax:
    content: Task<Result> ModifyGuildChannelPositionsAsync(Snowflake guildID, IReadOnlyList<IChannelPositionModification> positionModifications, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: positionModifications
      type: System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification}
      description: The new positions of the modified channels.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A result which may or may not have succeeded.
    content.vb: Function ModifyGuildChannelPositionsAsync(guildID As Snowflake, positionModifications As IReadOnlyList(Of IChannelPositionModification), ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList(Of IChannelPositionModification), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Rest.IChannelPositionModification), System.Threading.CancellationToken)
  name.vb: ModifyGuildChannelPositionsAsync(Snowflake, IReadOnlyList(Of IChannelPositionModification), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: ListActiveGuildThreadsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ListActiveGuildThreadsAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ListActiveGuildThreadsAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: ListActiveGuildThreadsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 472
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Lists the active threads in the given guild.
  example: []
  syntax:
    content: Task<Result<IGuildThreadQueryResponse>> ListActiveGuildThreadsAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse}}
      description: A result which may or may not have succeeded.
    content.vb: Function ListActiveGuildThreadsAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildThreadQueryResponse))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildMemberAsync(Snowflake, Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildMemberAsync(Snowflake, Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildMemberAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 485
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets member information about the given user.
  example: []
  syntax:
    content: Task<Result<IGuildMember>> GetGuildMemberAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildMember}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildMemberAsync(guildID As Snowflake, userID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildMember))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  id: ListGuildMembersAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ListGuildMembersAsync(Snowflake, Optional<int>, Optional<Snowflake>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ListGuildMembersAsync(Snowflake, Optional<int>, Optional<Snowflake>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ListGuildMembersAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 500
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets a list of guild members.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IGuildMember>>> ListGuildMembersAsync(Snowflake guildID, Optional<int> limit = default, Optional<Snowflake> after = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: limit
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The maximum number of guild members to return (1-1000).
    - id: after
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The highest user ID in the previously retrieved page.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IGuildMember}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function ListGuildMembersAsync(guildID As Snowflake, limit As [Optional](Of Integer) = Nothing, after As [Optional](Of Snowflake) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IGuildMember)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ListGuildMembersAsync(Snowflake, Optional(Of Integer), Optional(Of Snowflake), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), System.Threading.CancellationToken)
  name.vb: ListGuildMembersAsync(Snowflake, Optional(Of Integer), Optional(Of Snowflake), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Int32},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Int32},System.Threading.CancellationToken)
  id: SearchGuildMembersAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.Int32},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: SearchGuildMembersAsync(Snowflake, string, Optional<int>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.SearchGuildMembersAsync(Snowflake, string, Optional<int>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<int>, System.Threading.CancellationToken)
  type: Method
  source:
    id: SearchGuildMembersAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 516
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets a list of guild members whose username or nickname start with the query string.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IGuildMember>>> SearchGuildMembersAsync(Snowflake guildID, string query, Optional<int> limit = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: query
      type: System.String
      description: The query string.
    - id: limit
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The maximum number of members to return (1-1000).
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IGuildMember}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function SearchGuildMembersAsync(guildID As Snowflake, query As String, limit As [Optional](Of Integer) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IGuildMember)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync*
  nameWithType.vb: IDiscordRestGuildAPI.SearchGuildMembersAsync(Snowflake, String, Optional(Of Integer), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of Integer), System.Threading.CancellationToken)
  name.vb: SearchGuildMembersAsync(Snowflake, String, Optional(Of Integer), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  id: AddGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: AddGuildMemberAsync(Snowflake, Snowflake, string, Optional<string>, Optional<IReadOnlyList<Snowflake>>, Optional<bool>, Optional<bool>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.AddGuildMemberAsync(Snowflake, Snowflake, string, Optional<string>, Optional<IReadOnlyList<Snowflake>>, Optional<bool>, Optional<bool>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>>, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<bool>, System.Threading.CancellationToken)
  type: Method
  source:
    id: AddGuildMemberAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 539
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Adds a user to the guild using their OAuth2 access token.
  remarks: The returned value will be null if the user is already in the guild.
  example: []
  syntax:
    content: Task<Result<IGuildMember?>> AddGuildMemberAsync(Snowflake guildID, Snowflake userID, string accessToken, Optional<string> nickname = default, Optional<IReadOnlyList<Snowflake>> roles = default, Optional<bool> isMuted = default, Optional<bool> isDeafened = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user to add.
    - id: accessToken
      type: System.String
      description: The OAuth2 access token.
    - id: nickname
      type: Remora.Rest.Core.Optional{System.String}
      description: The user's new nickname.
    - id: roles
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
      description: The roles the user should have.
    - id: isMuted
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the user should be muted in voice channels.
    - id: isDeafened
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the user should be deafened in voice channels.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildMember}}
      description: A creation result that may or may not have succeeded.
    content.vb: Function AddGuildMemberAsync(guildID As Snowflake, userID As Snowflake, accessToken As String, nickname As [Optional](Of String) = Nothing, roles As [Optional](Of IReadOnlyList(Of Snowflake)) = Nothing, isMuted As [Optional](Of Boolean) = Nothing, isDeafened As [Optional](Of Boolean) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildMember))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync*
  nameWithType.vb: IDiscordRestGuildAPI.AddGuildMemberAsync(Snowflake, Snowflake, String, Optional(Of String), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of Boolean), Optional(Of Boolean), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake)), Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of Boolean), System.Threading.CancellationToken)
  name.vb: AddGuildMemberAsync(Snowflake, Snowflake, String, Optional(Of String), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of Boolean), Optional(Of Boolean), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildMemberAsync(Snowflake, Snowflake, Optional<string?>, Optional<IReadOnlyList<Snowflake>?>, Optional<bool?>, Optional<bool?>, Optional<Snowflake?>, Optional<DateTimeOffset?>, Optional<GuildMemberFlags>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildMemberAsync(Snowflake, Snowflake, Optional<string?>, Optional<IReadOnlyList<Snowflake>?>, Optional<bool?>, Optional<bool?>, Optional<Snowflake?>, Optional<DateTimeOffset?>, Optional<GuildMemberFlags>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<System.DateTimeOffset?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.GuildMemberFlags>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildMemberAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 568
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies attributes of a guild member.
  example: []
  syntax:
    content: Task<Result> ModifyGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string?> nickname = default, Optional<IReadOnlyList<Snowflake>?> roles = default, Optional<bool?> isMuted = default, Optional<bool?> isDeafened = default, Optional<Snowflake?> channelID = default, Optional<DateTimeOffset?> communicationDisabledUntil = default, Optional<GuildMemberFlags> flags = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: nickname
      type: Remora.Rest.Core.Optional{System.String}
      description: The new nickname of the user.
    - id: roles
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
      description: The new roles of the user.
    - id: isMuted
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: The new mute state of the user.
    - id: isDeafened
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: The new deaf state of the user.
    - id: channelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The new voice channel of the user.
    - id: communicationDisabledUntil
      type: Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}}
      description: The date and time until which the user has communication disabled.
    - id: flags
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags}
      description: The new flags of the user.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A rest result which may or may not have succeeded.
    content.vb: Function ModifyGuildMemberAsync(guildID As Snowflake, userID As Snowflake, nickname As [Optional](Of String) = Nothing, roles As [Optional](Of IReadOnlyList(Of Snowflake)) = Nothing, isMuted As [Optional](Of Boolean?) = Nothing, isDeafened As [Optional](Of Boolean?) = Nothing, channelID As [Optional](Of Snowflake?) = Nothing, communicationDisabledUntil As [Optional](Of DateTimeOffset?) = Nothing, flags As [Optional](Of GuildMemberFlags) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildMemberAsync(Snowflake, Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of Boolean?), Optional(Of Boolean?), Optional(Of Snowflake?), Optional(Of DateTimeOffset?), Optional(Of GuildMemberFlags), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake)), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of System.DateTimeOffset?), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.GuildMemberFlags), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildMemberAsync(Snowflake, Snowflake, Optional(Of String), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of Boolean?), Optional(Of Boolean?), Optional(Of Snowflake?), Optional(Of DateTimeOffset?), Optional(Of GuildMemberFlags), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyCurrentMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyCurrentMemberAsync(Snowflake, Optional<string?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Snowflake, Optional<string?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyCurrentMemberAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 591
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the current member.
  example: []
  syntax:
    content: Task<Result<IGuildMember>> ModifyCurrentMemberAsync(Snowflake guildID, Optional<string?> nickname = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: nickname
      type: Remora.Rest.Core.Optional{System.String}
      description: The new nickname.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildMember}}
      description: A modification result which may or may not have succeeded, containing the updated member.
    content.vb: Function ModifyCurrentMemberAsync(guildID As Snowflake, nickname As [Optional](Of String) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildMember))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Snowflake, Optional(Of String), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyCurrentMemberAsync(Snowflake, Optional(Of String), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: AddGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: AddGuildMemberRoleAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 608
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Adds a role to a guild member.
  example: []
  syntax:
    content: Task<Result> AddGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: roleID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the role.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A result which may or may not have succeeded.
    content.vb: Function AddGuildMemberRoleAsync(guildID As Snowflake, userID As Snowflake, roleID As Snowflake, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync*
  nameWithType.vb: IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: AddGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: RemoveGuildMemberRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveGuildMemberRoleAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 626
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Removes a role from a guild member.
  example: []
  syntax:
    content: Task<Result> RemoveGuildMemberRoleAsync(Snowflake guildID, Snowflake userID, Snowflake roleID, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: roleID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the role.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A deletion result which may or may not have succeeded.
    content.vb: Function RemoveGuildMemberRoleAsync(guildID As Snowflake, userID As Snowflake, roleID As Snowflake, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync*
  nameWithType.vb: IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: RemoveGuildMemberRoleAsync(Snowflake, Snowflake, Snowflake, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: RemoveGuildMemberAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: RemoveGuildMemberAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.RemoveGuildMemberAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveGuildMemberAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 643
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Removes a member from the guild.
  example: []
  syntax:
    content: Task<Result> RemoveGuildMemberAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A deletion result which may or may not have succeeded.
    content.vb: Function RemoveGuildMemberAsync(guildID As Snowflake, userID As Snowflake, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync*
  nameWithType.vb: IDiscordRestGuildAPI.RemoveGuildMemberAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: RemoveGuildMemberAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  id: GetGuildBansAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildBansAsync(Snowflake, Optional<int>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildBansAsync(Snowflake, Optional<int>, Optional<Snowflake>, Optional<Snowflake>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildBansAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 666
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets a list of bans.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IBan>>> GetGuildBansAsync(Snowflake guildID, Optional<int> limit = default, Optional<Snowflake> before = default, Optional<Snowflake> after = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: limit
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The maximum number of bans to return (max 1000).
    - id: before
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: >-
        The ID of the ban to get bans before. This is a mutually exclusive option with <code class="paramref">after</code>, though

        Discord accepts both at the same time.
    - id: after
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: >-
        The ID of the ban to get bans after. This is a mutually exclusive option with <code class="paramref">before</code>, though

        Discord accepts both at the same time.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IBan}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildBansAsync(guildID As Snowflake, limit As [Optional](Of Integer) = Nothing, before As [Optional](Of Snowflake) = Nothing, after As [Optional](Of Snowflake) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IBan)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync*
  nameWithType.vb: IDiscordRestGuildAPI.GetGuildBansAsync(Snowflake, Optional(Of Integer), Optional(Of Snowflake), Optional(Of Snowflake), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), System.Threading.CancellationToken)
  name.vb: GetGuildBansAsync(Snowflake, Optional(Of Integer), Optional(Of Snowflake), Optional(Of Snowflake), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildBanAsync(Snowflake, Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildBanAsync(Snowflake, Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildBanAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 682
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets a ban object for the given user.
  example: []
  syntax:
    content: Task<Result<IBan>> GetGuildBanAsync(Snowflake guildID, Snowflake userID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IBan}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildBanAsync(guildID As Snowflake, userID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IBan))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildBanAsync(Snowflake, Snowflake, Optional<int>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildBanAsync(Snowflake, Snowflake, Optional<int>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildBanAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 700
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Bans the given user.
  example: []
  syntax:
    content: Task<Result> CreateGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<int> deleteMessageSeconds = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: deleteMessageSeconds
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The number of seconds to delete messages for (0-604800). Defaults to 0.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A result which may or may not have succeeded.
    content.vb: Function CreateGuildBanAsync(guildID As Snowflake, userID As Snowflake, deleteMessageSeconds As [Optional](Of Integer) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildBanAsync(Snowflake, Snowflake, Optional(Of Integer), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildBanAsync(Snowflake, Snowflake, Optional(Of Integer), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: RemoveGuildBanAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: RemoveGuildBanAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.RemoveGuildBanAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveGuildBanAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 717
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Unbans the given user.
  example: []
  syntax:
    content: Task<Result> RemoveGuildBanAsync(Snowflake guildID, Snowflake userID, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A deletion result which may or may not have succeeded.
    content.vb: Function RemoveGuildBanAsync(guildID As Snowflake, userID As Snowflake, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync*
  nameWithType.vb: IDiscordRestGuildAPI.RemoveGuildBanAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: RemoveGuildBanAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: BulkGuildBanAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: BulkGuildBanAsync(Snowflake, IReadOnlyList<Snowflake>, Optional<int>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.BulkGuildBanAsync(Snowflake, IReadOnlyList<Snowflake>, Optional<int>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: BulkGuildBanAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 736
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Bans up to 200 users from the given guild.
  example: []
  syntax:
    content: Task<Result<IBulkBanResponse>> BulkGuildBanAsync(Snowflake guildID, IReadOnlyList<Snowflake> userIDs, Optional<int> deleteMessageSeconds = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userIDs
      type: System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}
      description: The IDs of the users to ban.
    - id: deleteMessageSeconds
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The number of seconds to delete messages for (0-604800). Defaults to 0.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Rest.IBulkBanResponse}}
      description: The bulk banning response.
    content.vb: Function BulkGuildBanAsync(guildID As Snowflake, userIDs As IReadOnlyList(Of Snowflake), deleteMessageSeconds As [Optional](Of Integer) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IBulkBanResponse))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync*
  nameWithType.vb: IDiscordRestGuildAPI.BulkGuildBanAsync(Snowflake, IReadOnlyList(Of Snowflake), Optional(Of Integer), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: BulkGuildBanAsync(Snowflake, IReadOnlyList(Of Snowflake), Optional(Of Integer), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildRolesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildRolesAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildRolesAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildRolesAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 751
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the roles in the guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IRole>>> GetGuildRolesAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildRolesAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IRole)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Drawing.Color},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Drawing.Color},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Drawing.Color},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: CreateGuildRoleAsync(Snowflake, Optional<string>, Optional<IDiscordPermissionSet>, Optional<Color>, Optional<bool>, Optional<Stream?>, Optional<string?>, Optional<bool>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.CreateGuildRoleAsync(Snowflake, Optional<string>, Optional<IDiscordPermissionSet>, Optional<Color>, Optional<bool>, Optional<Stream?>, Optional<string?>, Optional<bool>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet>, Remora.Rest.Core.Optional<System.Drawing.Color>, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<System.IO.Stream?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildRoleAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 775
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new guild role.
  remarks: >-
    Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams

    afterwards, ensure that what you pass is a copy that the method can take ownership of.
  example: []
  syntax:
    content: Task<Result<IRole>> CreateGuildRoleAsync(Snowflake guildID, Optional<string> name = default, Optional<IDiscordPermissionSet> permissions = default, Optional<Color> colour = default, Optional<bool> isHoisted = default, Optional<Stream?> icon = default, Optional<string?> unicodeEmoji = default, Optional<bool> isMentionable = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: Remora.Rest.Core.Optional{System.String}
      description: The name of the new role.
    - id: permissions
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet}
      description: The permissions of the new role.
    - id: colour
      type: Remora.Rest.Core.Optional{System.Drawing.Color}
      description: The colour of the new role.
    - id: isHoisted
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the new role is displayed separately in the sidebar.
    - id: icon
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The role's icon image.
    - id: unicodeEmoji
      type: Remora.Rest.Core.Optional{System.String}
      description: The role's unicode emoji icon.
    - id: isMentionable
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the new role is mentionable.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IRole}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildRoleAsync(guildID As Snowflake, name As [Optional](Of String) = Nothing, permissions As [Optional](Of IDiscordPermissionSet) = Nothing, colour As [Optional](Of Color) = Nothing, isHoisted As [Optional](Of Boolean) = Nothing, icon As [Optional](Of Stream) = Nothing, unicodeEmoji As [Optional](Of String) = Nothing, isMentionable As [Optional](Of Boolean) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IRole))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync*
  nameWithType.vb: IDiscordRestGuildAPI.CreateGuildRoleAsync(Snowflake, Optional(Of String), Optional(Of IDiscordPermissionSet), Optional(Of Color), Optional(Of Boolean), Optional(Of Stream), Optional(Of String), Optional(Of Boolean), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet), Remora.Rest.Core.Optional(Of System.Drawing.Color), Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildRoleAsync(Snowflake, Optional(Of String), Optional(Of IDiscordPermissionSet), Optional(Of Color), Optional(Of Boolean), Optional(Of Stream), Optional(Of String), Optional(Of Boolean), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildRolePositionsAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<(Remora.Rest.Core.Snowflake RoleID, Remora.Rest.Core.Optional<int?> Position)>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildRolePositionsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 797
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the positions of a set of roles in the guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IRole>>> ModifyGuildRolePositionsAsync(Snowflake guildID, IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)> modifiedPositions, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: modifiedPositions
      type: System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}}
      description: The modified role positions.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyGuildRolePositionsAsync(guildID As Snowflake, modifiedPositions As IReadOnlyList(Of (RoleID As Snowflake, Position As [Optional](Of Integer?))), reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IRole)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList(Of (RoleID As Snowflake, Position As Optional(Of Integer?))), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of (RoleID As Remora.Rest.Core.Snowflake, Position As Remora.Rest.Core.Optional(Of Integer?))), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildRolePositionsAsync(Snowflake, IReadOnlyList(Of (RoleID As Snowflake, Position As Optional(Of Integer?))), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet},Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.IO.Stream},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildRoleAsync(Snowflake, Snowflake, Optional<string?>, Optional<IDiscordPermissionSet?>, Optional<Color?>, Optional<bool?>, Optional<Stream?>, Optional<string?>, Optional<bool?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildRoleAsync(Snowflake, Snowflake, Optional<string?>, Optional<IDiscordPermissionSet?>, Optional<Color?>, Optional<bool?>, Optional<Stream?>, Optional<string?>, Optional<bool?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet?>, Remora.Rest.Core.Optional<System.Drawing.Color?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<System.IO.Stream?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildRoleAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 824
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the given role.
  remarks: >-
    Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams

    afterwards, ensure that what you pass is a copy that the method can take ownership of.
  example: []
  syntax:
    content: Task<Result<IRole>> ModifyGuildRoleAsync(Snowflake guildID, Snowflake roleID, Optional<string?> name = default, Optional<IDiscordPermissionSet?> permissions = default, Optional<Color?> color = default, Optional<bool?> isHoisted = default, Optional<Stream?> icon = default, Optional<string?> unicodeEmoji = default, Optional<bool?> isMentionable = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: roleID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the role.
    - id: name
      type: Remora.Rest.Core.Optional{System.String}
      description: The new name of the role.
    - id: permissions
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet}
      description: The new permissions of the role.
    - id: color
      type: Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}}
      description: The new color of the role.
    - id: isHoisted
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the role is displayed separately in the sidebar.
    - id: icon
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The role's icon image.
    - id: unicodeEmoji
      type: Remora.Rest.Core.Optional{System.String}
      description: The role's unicode emoji icon.
    - id: isMentionable
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the role is mentionable.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IRole}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyGuildRoleAsync(guildID As Snowflake, roleID As Snowflake, name As [Optional](Of String) = Nothing, permissions As [Optional](Of IDiscordPermissionSet) = Nothing, color As [Optional](Of Color?) = Nothing, isHoisted As [Optional](Of Boolean?) = Nothing, icon As [Optional](Of Stream) = Nothing, unicodeEmoji As [Optional](Of String) = Nothing, isMentionable As [Optional](Of Boolean?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IRole))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildRoleAsync(Snowflake, Snowflake, Optional(Of String), Optional(Of IDiscordPermissionSet), Optional(Of Color?), Optional(Of Boolean?), Optional(Of Stream), Optional(Of String), Optional(Of Boolean?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet), Remora.Rest.Core.Optional(Of System.Drawing.Color?), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of System.IO.Stream), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildRoleAsync(Snowflake, Snowflake, Optional(Of String), Optional(Of IDiscordPermissionSet), Optional(Of Color?), Optional(Of Boolean?), Optional(Of Stream), Optional(Of String), Optional(Of Boolean?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildMFALevelAsync(Remora.Rest.Core.Snowflake,Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildMFALevelAsync(Snowflake, MultiFactorAuthenticationLevel, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Snowflake, MultiFactorAuthenticationLevel, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildMFALevelAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 847
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies a guild's multi-factor authentication level. Requires guild ownership.
  example: []
  syntax:
    content: Task<Result<MultiFactorAuthenticationLevel>> ModifyGuildMFALevelAsync(Snowflake guildID, MultiFactorAuthenticationLevel level, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild to modify.
    - id: level
      type: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel
      description: The new MFA level.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyGuildMFALevelAsync(guildID As Snowflake, level As MultiFactorAuthenticationLevel, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of MultiFactorAuthenticationLevel))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Snowflake, MultiFactorAuthenticationLevel, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync(Remora.Rest.Core.Snowflake, Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildMFALevelAsync(Snowflake, MultiFactorAuthenticationLevel, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: DeleteGuildRoleAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: DeleteGuildRoleAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.DeleteGuildRoleAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeleteGuildRoleAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 863
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Deletes the given role.
  example: []
  syntax:
    content: Task<Result> DeleteGuildRoleAsync(Snowflake guildID, Snowflake roleID, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: roleID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the role.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A deletion result which may or may not have succeeded.
    content.vb: Function DeleteGuildRoleAsync(guildID As Snowflake, roleID As Snowflake, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync*
  nameWithType.vb: IDiscordRestGuildAPI.DeleteGuildRoleAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: DeleteGuildRoleAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},System.Threading.CancellationToken)
  id: GetGuildPruneCountAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildPruneCountAsync(Snowflake, Optional<int>, Optional<IReadOnlyList<Snowflake>>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildPruneCountAsync(Snowflake, Optional<int>, Optional<IReadOnlyList<Snowflake>>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>>, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildPruneCountAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 879
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the number of users that would be pruned in a prune operation.
  example: []
  syntax:
    content: Task<Result<IPruneCount>> GetGuildPruneCountAsync(Snowflake guildID, Optional<int> days = default, Optional<IReadOnlyList<Snowflake>> includeRoles = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: days
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The days a user needs to have been inactive for them to be pruned.
    - id: includeRoles
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
      description: The roles that should be included in a prune operation.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPruneCount}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildPruneCountAsync(guildID As Snowflake, days As [Optional](Of Integer) = Nothing, includeRoles As [Optional](Of IReadOnlyList(Of Snowflake)) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IPruneCount))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync*
  nameWithType.vb: IDiscordRestGuildAPI.GetGuildPruneCountAsync(Snowflake, Optional(Of Integer), Optional(Of IReadOnlyList(Of Snowflake)), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake)), System.Threading.CancellationToken)
  name.vb: GetGuildPruneCountAsync(Snowflake, Optional(Of Integer), Optional(Of IReadOnlyList(Of Snowflake)), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: BeginGuildPruneAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Int32},Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: BeginGuildPruneAsync(Snowflake, Optional<int>, Optional<bool>, Optional<IReadOnlyList<Snowflake>>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.BeginGuildPruneAsync(Snowflake, Optional<int>, Optional<bool>, Optional<IReadOnlyList<Snowflake>>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<int>, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: BeginGuildPruneAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 897
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Initiates a prune of the guild members.
  example: []
  syntax:
    content: Task<Result<IPruneCount>> BeginGuildPruneAsync(Snowflake guildID, Optional<int> days = default, Optional<bool> computePruneCount = default, Optional<IReadOnlyList<Snowflake>> includeRoles = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: days
      type: Remora.Rest.Core.Optional{System.Int32}
      description: The days a user needs to have been inactive for them to be pruned.
    - id: computePruneCount
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the number of pruned users should be computed and returned.
    - id: includeRoles
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
      description: The roles that should be included in a prune operation.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPruneCount}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function BeginGuildPruneAsync(guildID As Snowflake, days As [Optional](Of Integer) = Nothing, computePruneCount As [Optional](Of Boolean) = Nothing, includeRoles As [Optional](Of IReadOnlyList(Of Snowflake)) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IPruneCount))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync*
  nameWithType.vb: IDiscordRestGuildAPI.BeginGuildPruneAsync(Snowflake, Optional(Of Integer), Optional(Of Boolean), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Integer), Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake)), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: BeginGuildPruneAsync(Snowflake, Optional(Of Integer), Optional(Of Boolean), Optional(Of IReadOnlyList(Of Snowflake)), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildVoiceRegionsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildVoiceRegionsAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildVoiceRegionsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 913
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the voice regions for the guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IVoiceRegion>>> GetGuildVoiceRegionsAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IVoiceRegion}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildVoiceRegionsAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IVoiceRegion)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildInvitesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildInvitesAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildInvitesAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildInvitesAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 925
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the invites for the guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IInviteWithMetadata>>> GetGuildInvitesAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildInvitesAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IInviteWithMetadata)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildIntegrationsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildIntegrationsAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildIntegrationsAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildIntegrationsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 937
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the integrations for the guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<IIntegration>>> GetGuildIntegrationsAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IIntegration}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildIntegrationsAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of IIntegration)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: DeleteGuildIntegrationAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: DeleteGuildIntegrationAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Snowflake, Snowflake, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeleteGuildIntegrationAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 951
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Deletes the integration with the given ID for the guild.
  example: []
  syntax:
    content: Task<Result> DeleteGuildIntegrationAsync(Snowflake guildID, Snowflake integrationID, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: integrationID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the integration.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A deletion result which may or may not have succeeded.
    content.vb: Function DeleteGuildIntegrationAsync(guildID As Snowflake, integrationID As Snowflake, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync*
  nameWithType.vb: IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: DeleteGuildIntegrationAsync(Snowflake, Snowflake, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildWidgetSettingsAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildWidgetSettingsAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildWidgetSettingsAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 965
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the guild widget.
  example: []
  syntax:
    content: Task<Result<IGuildWidgetSettings>> GetGuildWidgetSettingsAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildWidgetSettingsAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildWidgetSettings))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildWidgetAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildWidgetAsync(Snowflake, Optional<bool>, Optional<Snowflake?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Snowflake, Optional<bool>, Optional<Snowflake?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildWidgetAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 980
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the guild widget for the guild.
  example: []
  syntax:
    content: Task<Result<IGuildWidgetSettings>> ModifyGuildWidgetAsync(Snowflake guildID, Optional<bool> isEnabled = default, Optional<Snowflake?> channelID = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: isEnabled
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether the widget is enabled.
    - id: channelID
      type: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
      description: The ID of the channel invites will be generated for.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyGuildWidgetAsync(guildID As Snowflake, isEnabled As [Optional](Of Boolean) = Nothing, channelID As [Optional](Of Snowflake?) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildWidgetSettings))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Snowflake, Optional(Of Boolean), Optional(Of Snowflake?), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildWidgetAsync(Snowflake, Optional(Of Boolean), Optional(Of Snowflake?), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildWidgetAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildWidgetAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildWidgetAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildWidgetAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 995
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the status and invite widget for the guild.
  example: []
  syntax:
    content: Task<Result<IGuildWidget>> GetGuildWidgetAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidget}}
      description: A result which may or may not have succeeded.
    content.vb: Function GetGuildWidgetAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildWidget))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildVanityUrlAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildVanityUrlAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildVanityUrlAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildVanityUrlAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1007
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the vanity invite for the given guild.
  example: []
  syntax:
    content: Task<Result<IPartialInvite>> GetGuildVanityUrlAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPartialInvite}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildVanityUrlAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IPartialInvite))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle},System.Threading.CancellationToken)
  id: GetGuildWidgetImageAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildWidgetImageAsync(Snowflake, Optional<WidgetImageStyle>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Snowflake, Optional<WidgetImageStyle>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.WidgetImageStyle>, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildWidgetImageAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1020
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the image for the guild widget.
  example: []
  syntax:
    content: Task<Result<Stream>> GetGuildWidgetImageAsync(Snowflake guildID, Optional<WidgetImageStyle> style = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: style
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle}
      description: The image style.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.IO.Stream}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildWidgetImageAsync(guildID As Snowflake, style As [Optional](Of WidgetImageStyle) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of Stream))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync*
  nameWithType.vb: IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Snowflake, Optional(Of WidgetImageStyle), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.WidgetImageStyle), System.Threading.CancellationToken)
  name.vb: GetGuildWidgetImageAsync(Snowflake, Optional(Of WidgetImageStyle), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildWelcomeScreenAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildWelcomeScreenAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1033
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the guild's welcome screen.
  example: []
  syntax:
    content: Task<Result<IWelcomeScreen>> GetGuildWelcomeScreenAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IWelcomeScreen}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildWelcomeScreenAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IWelcomeScreen))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Boolean}},Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}},Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildWelcomeScreenAsync(Snowflake, Optional<bool?>, Optional<IReadOnlyList<IWelcomeScreenChannel>?>, Optional<string?>, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Snowflake, Optional<bool?>, Optional<IReadOnlyList<IWelcomeScreenChannel>?>, Optional<string?>, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<bool?>, Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel>?>, Remora.Rest.Core.Optional<string?>, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildWelcomeScreenAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1049
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the guild's welcome screen.
  example: []
  syntax:
    content: Task<Result<IWelcomeScreen>> ModifyGuildWelcomeScreenAsync(Snowflake guildID, Optional<bool?> isEnabled = default, Optional<IReadOnlyList<IWelcomeScreenChannel>?> welcomeChannels = default, Optional<string?> description = default, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: isEnabled
      type: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
      description: Whether the welcome screen is enabled.
    - id: welcomeChannels
      type: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}}
      description: The channels displayed.
    - id: description
      type: Remora.Rest.Core.Optional{System.String}
      description: The guild's description.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IWelcomeScreen}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function ModifyGuildWelcomeScreenAsync(guildID As Snowflake, isEnabled As [Optional](Of Boolean?) = Nothing, welcomeChannels As [Optional](Of IReadOnlyList(Of IWelcomeScreenChannel)) = Nothing, description As [Optional](Of String) = Nothing, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IWelcomeScreen))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Snowflake, Optional(Of Boolean?), Optional(Of IReadOnlyList(Of IWelcomeScreenChannel)), Optional(Of String), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Boolean?), Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel)), Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildWelcomeScreenAsync(Snowflake, Optional(Of Boolean?), Optional(Of IReadOnlyList(Of IWelcomeScreenChannel)), Optional(Of String), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: GetGuildOnboardingAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.GetGuildOnboardingAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildOnboardingAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1065
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the guild's onboarding flow.
  example: []
  syntax:
    content: Task<Result<IGuildOnboarding>> GetGuildOnboardingAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildOnboarding}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildOnboardingAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildOnboarding))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt},System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},System.Boolean,Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt},System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},System.Boolean,Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildOnboardingAsync(Remora.Rest.Core.Snowflake,System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt},System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake},System.Boolean,Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildOnboardingAsync(Snowflake, IReadOnlyList<IOnboardingPrompt>, IReadOnlyList<Snowflake>, bool, GuildOnboardingMode, Optional<string>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Snowflake, IReadOnlyList<IOnboardingPrompt>, IReadOnlyList<Snowflake>, bool, GuildOnboardingMode, Optional<string>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt>, System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>, bool, Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode, Remora.Rest.Core.Optional<string>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildOnboardingAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1082
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the guild's onboarding flow.
  example: []
  syntax:
    content: Task<Result<IGuildOnboarding>> ModifyGuildOnboardingAsync(Snowflake guildID, IReadOnlyList<IOnboardingPrompt> prompts, IReadOnlyList<Snowflake> defaultChannelIDs, bool isEnabled, GuildOnboardingMode mode, Optional<string> reason = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: prompts
      type: System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt}
      description: The prompts shown during onboarding.
    - id: defaultChannelIDs
      type: System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}
      description: Channel IDs that members get opted into automatically.
    - id: isEnabled
      type: System.Boolean
      description: Whether onboarding is enabled.
    - id: mode
      type: Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode
      description: The onboarding mode.
    - id: reason
      type: Remora.Rest.Core.Optional{System.String}
      description: The reason to mark the action in the audit log with.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildOnboarding}}
      description: The new onboarding configuration.
    content.vb: Function ModifyGuildOnboardingAsync(guildID As Snowflake, prompts As IReadOnlyList(Of IOnboardingPrompt), defaultChannelIDs As IReadOnlyList(Of Snowflake), isEnabled As Boolean, mode As GuildOnboardingMode, reason As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuildOnboarding))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Snowflake, IReadOnlyList(Of IOnboardingPrompt), IReadOnlyList(Of Snowflake), Boolean, GuildOnboardingMode, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync(Remora.Rest.Core.Snowflake, System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt), System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake), Boolean, Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildOnboardingAsync(Snowflake, IReadOnlyList(Of IOnboardingPrompt), IReadOnlyList(Of Snowflake), Boolean, GuildOnboardingMode, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},System.Threading.CancellationToken)
  id: ModifyCurrentUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Boolean},Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional<bool>, Optional<DateTimeOffset?>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional<bool>, Optional<DateTimeOffset?>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<bool>, Remora.Rest.Core.Optional<System.DateTimeOffset?>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyCurrentUserVoiceStateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1102
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the voice state of the current user.
  example: []
  syntax:
    content: Task<Result> ModifyCurrentUserVoiceStateAsync(Snowflake guildID, Snowflake channelID, Optional<bool> suppress = default, Optional<DateTimeOffset?> requestToSpeakTimestamp = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: channelID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the voice channel the user is currently in.
    - id: suppress
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether to toggle the user's suppression state.
    - id: requestToSpeakTimestamp
      type: Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}}
      description: The time when the user requested to speak.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyCurrentUserVoiceStateAsync(guildID As Snowflake, channelID As Snowflake, suppress As [Optional](Of Boolean) = Nothing, requestToSpeakTimestamp As [Optional](Of DateTimeOffset?) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result)
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional(Of Boolean), Optional(Of DateTimeOffset?), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Boolean), Remora.Rest.Core.Optional(Of System.DateTimeOffset?), System.Threading.CancellationToken)
  name.vb: ModifyCurrentUserVoiceStateAsync(Snowflake, Snowflake, Optional(Of Boolean), Optional(Of DateTimeOffset?), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  id: ModifyUserVoiceStateAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Snowflake,System.Nullable{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Boolean},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  langs:
  - csharp
  - vb
  name: ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake?, Optional<bool>, CancellationToken)
  nameWithType: IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake?, Optional<bool>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake?, Remora.Rest.Core.Optional<bool>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyUserVoiceStateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestGuildAPI.cs
    startLine: 1120
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the voice state of another user.
  example: []
  syntax:
    content: Task<Result<IVoiceState>> ModifyUserVoiceStateAsync(Snowflake guildID, Snowflake userID, Snowflake? channelID = null, Optional<bool> suppress = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the user.
    - id: channelID
      type: System.Nullable{Remora.Rest.Core.Snowflake}
      description: The ID of the voice channel the user is currently in.
    - id: suppress
      type: Remora.Rest.Core.Optional{System.Boolean}
      description: Whether to toggle the user's suppression state.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IVoiceState}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyUserVoiceStateAsync(guildID As Snowflake, userID As Snowflake, channelID As Snowflake? = Nothing, suppress As [Optional](Of Boolean) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IVoiceState))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync*
  nameWithType.vb: IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake?, Optional(Of Boolean), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake, Remora.Rest.Core.Snowflake?, Remora.Rest.Core.Optional(Of Boolean), System.Threading.CancellationToken)
  name.vb: ModifyUserVoiceStateAsync(Snowflake, Snowflake, Snowflake?, Optional(Of Boolean), CancellationToken)
references:
- uid: Remora.Discord.API.Abstractions.Rest
  commentId: N:Remora.Discord.API.Abstractions.Rest
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Rest
  nameWithType: Remora.Discord.API.Abstractions.Rest
  fullName: Remora.Discord.API.Abstractions.Rest
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildAsync_System_String_Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_VerificationLevel__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_MessageNotificationLevel__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_ExplicitContentFilterLevel__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IRole___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialChannel___Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_TimeSpan__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_SystemChannelFlags__System_Threading_CancellationToken_
  name: CreateGuildAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Remora.Rest.Core.Optional{System.IO.Stream}
  commentId: T:Remora.Rest.Core.Optional{System.IO.Stream}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Optional<Stream>
  nameWithType: Optional<Stream>
  fullName: Remora.Rest.Core.Optional<System.IO.Stream>
  nameWithType.vb: Optional(Of Stream)
  fullName.vb: Remora.Rest.Core.Optional(Of System.IO.Stream)
  name.vb: Optional(Of Stream)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.VerificationLevel}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.VerificationLevel.html
  name: Optional<VerificationLevel>
  nameWithType: Optional<VerificationLevel>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VerificationLevel>
  nameWithType.vb: Optional(Of VerificationLevel)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VerificationLevel)
  name.vb: Optional(Of VerificationLevel)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.VerificationLevel
    name: VerificationLevel
    href: Remora.Discord.API.Abstractions.Objects.VerificationLevel.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.VerificationLevel
    name: VerificationLevel
    href: Remora.Discord.API.Abstractions.Objects.VerificationLevel.html
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html
  name: Optional<MessageNotificationLevel>
  nameWithType: Optional<MessageNotificationLevel>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel>
  nameWithType.vb: Optional(Of MessageNotificationLevel)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel)
  name.vb: Optional(Of MessageNotificationLevel)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel
    name: MessageNotificationLevel
    href: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel
    name: MessageNotificationLevel
    href: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html
  name: Optional<ExplicitContentFilterLevel>
  nameWithType: Optional<ExplicitContentFilterLevel>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel>
  nameWithType.vb: Optional(Of ExplicitContentFilterLevel)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel)
  name.vb: Optional(Of ExplicitContentFilterLevel)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel
    name: ExplicitContentFilterLevel
    href: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel
    name: ExplicitContentFilterLevel
    href: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IRole>>
  nameWithType: Optional<IReadOnlyList<IRole>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IRole>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IRole))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IRole))
  name.vb: Optional(Of IReadOnlyList(Of IRole))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialChannel}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IPartialChannel>>
  nameWithType: Optional<IReadOnlyList<IPartialChannel>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialChannel>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IPartialChannel))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialChannel))
  name.vb: Optional(Of IReadOnlyList(Of IPartialChannel))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialChannel
    name: IPartialChannel
    href: Remora.Discord.API.Abstractions.Objects.IPartialChannel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialChannel
    name: IPartialChannel
    href: Remora.Discord.API.Abstractions.Objects.IPartialChannel.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
  commentId: T:Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  name: Optional<Snowflake>
  nameWithType: Optional<Snowflake>
  fullName: Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>
  nameWithType.vb: Optional(Of Snowflake)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake)
  name.vb: Optional(Of Snowflake)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: )
- uid: Remora.Rest.Core.Optional{System.TimeSpan}
  commentId: T:Remora.Rest.Core.Optional{System.TimeSpan}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.timespan
  name: Optional<TimeSpan>
  nameWithType: Optional<TimeSpan>
  fullName: Remora.Rest.Core.Optional<System.TimeSpan>
  nameWithType.vb: Optional(Of TimeSpan)
  fullName.vb: Remora.Rest.Core.Optional(Of System.TimeSpan)
  name.vb: Optional(Of TimeSpan)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.TimeSpan
    name: TimeSpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.timespan
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.SystemChannelFlags}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.SystemChannelFlags.html
  name: Optional<SystemChannelFlags>
  nameWithType: Optional<SystemChannelFlags>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SystemChannelFlags>
  nameWithType.vb: Optional(Of SystemChannelFlags)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SystemChannelFlags)
  name.vb: Optional(Of SystemChannelFlags)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.SystemChannelFlags
    name: SystemChannelFlags
    href: Remora.Discord.API.Abstractions.Objects.SystemChannelFlags.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.SystemChannelFlags
    name: SystemChannelFlags
    href: Remora.Discord.API.Abstractions.Objects.SystemChannelFlags.html
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuild>>
  nameWithType: Task<Result<IGuild>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuild>>
  nameWithType.vb: Task(Of Result(Of IGuild))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuild))
  name.vb: Task(Of Result(Of IGuild))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuild
    name: IGuild
    href: Remora.Discord.API.Abstractions.Objects.IGuild.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuild
    name: IGuild
    href: Remora.Discord.API.Abstractions.Objects.IGuild.html
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Remora.Rest.Core.Optional`1
  commentId: T:Remora.Rest.Core.Optional`1
  isExternal: true
  name: Optional<TValue>
  nameWithType: Optional<TValue>
  fullName: Remora.Rest.Core.Optional<TValue>
  nameWithType.vb: Optional(Of TValue)
  fullName.vb: Remora.Rest.Core.Optional(Of TValue)
  name.vb: Optional(Of TValue)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Remora.Rest.Core
  commentId: N:Remora.Rest.Core
  isExternal: true
  name: Remora.Rest.Core
  nameWithType: Remora.Rest.Core
  fullName: Remora.Rest.Core
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Boolean__System_Threading_CancellationToken_
  name: GetGuildAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildAsync
- uid: Remora.Rest.Core.Snowflake
  commentId: T:Remora.Rest.Core.Snowflake
  parent: Remora.Rest.Core
  isExternal: true
  name: Snowflake
  nameWithType: Snowflake
  fullName: Remora.Rest.Core.Snowflake
- uid: Remora.Rest.Core.Optional{System.Boolean}
  commentId: T:Remora.Rest.Core.Optional{System.Boolean}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Optional<bool>
  nameWithType: Optional<bool>
  fullName: Remora.Rest.Core.Optional<bool>
  nameWithType.vb: Optional(Of Boolean)
  fullName.vb: Remora.Rest.Core.Optional(Of Boolean)
  name.vb: Optional(Of Boolean)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildPreviewAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildPreviewAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildPreviewAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPreviewAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildPreview}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildPreview}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuildPreview>>
  nameWithType: Task<Result<IGuildPreview>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuildPreview>>
  nameWithType.vb: Task(Of Result(Of IGuildPreview))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuildPreview))
  name.vb: Task(Of Result(Of IGuildPreview))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildPreview
    name: IGuildPreview
    href: Remora.Discord.API.Abstractions.Objects.IGuildPreview.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildPreview
    name: IGuildPreview
    href: Remora.Discord.API.Abstractions.Objects.IGuildPreview.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_VerificationLevel___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_MessageNotificationLevel___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_ExplicitContentFilterLevel___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_TimeSpan__Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_SystemChannelFlags__Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_GuildFeature___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildAsync
- uid: Remora.Rest.Core.Optional{System.String}
  commentId: T:Remora.Rest.Core.Optional{System.String}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Optional<string>
  nameWithType: Optional<string>
  fullName: Remora.Rest.Core.Optional<string>
  nameWithType.vb: Optional(Of String)
  fullName.vb: Remora.Rest.Core.Optional(Of String)
  name.vb: Optional(Of String)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VerificationLevel}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.VerificationLevel.html
  name: Optional<VerificationLevel?>
  nameWithType: Optional<VerificationLevel?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VerificationLevel?>
  nameWithType.vb: Optional(Of VerificationLevel?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VerificationLevel?)
  name.vb: Optional(Of VerificationLevel?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.VerificationLevel
    name: VerificationLevel
    href: Remora.Discord.API.Abstractions.Objects.VerificationLevel.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.VerificationLevel
    name: VerificationLevel
    href: Remora.Discord.API.Abstractions.Objects.VerificationLevel.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html
  name: Optional<MessageNotificationLevel?>
  nameWithType: Optional<MessageNotificationLevel?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel?>
  nameWithType.vb: Optional(Of MessageNotificationLevel?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel?)
  name.vb: Optional(Of MessageNotificationLevel?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel
    name: MessageNotificationLevel
    href: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel
    name: MessageNotificationLevel
    href: Remora.Discord.API.Abstractions.Objects.MessageNotificationLevel.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html
  name: Optional<ExplicitContentFilterLevel?>
  nameWithType: Optional<ExplicitContentFilterLevel?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel?>
  nameWithType.vb: Optional(Of ExplicitContentFilterLevel?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel?)
  name.vb: Optional(Of ExplicitContentFilterLevel?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel
    name: ExplicitContentFilterLevel
    href: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel
    name: ExplicitContentFilterLevel
    href: Remora.Discord.API.Abstractions.Objects.ExplicitContentFilterLevel.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Rest.Core.Snowflake}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  name: Optional<Snowflake?>
  nameWithType: Optional<Snowflake?>
  fullName: Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake?>
  nameWithType.vb: Optional(Of Snowflake?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake?)
  name.vb: Optional(Of Snowflake?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.GuildFeature}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<GuildFeature>>
  nameWithType: Optional<IReadOnlyList<GuildFeature>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.GuildFeature>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of GuildFeature))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.GuildFeature))
  name.vb: Optional(Of IReadOnlyList(Of GuildFeature))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.GuildFeature
    name: GuildFeature
    href: Remora.Discord.API.Abstractions.Objects.GuildFeature.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.GuildFeature
    name: GuildFeature
    href: Remora.Discord.API.Abstractions.Objects.GuildFeature.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_DeleteGuildAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: DeleteGuildAsync
  nameWithType: IDiscordRestGuildAPI.DeleteGuildAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result>
  nameWithType: Task<Result>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result>
  nameWithType.vb: Task(Of Result)
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result)
  name.vb: Task(Of Result)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result
    name: Result
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result
    name: Result
    isExternal: true
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildChannelsAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildChannelsAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildChannelsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildChannelsAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IChannel}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IChannel}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IChannel>>>
  nameWithType: Task<Result<IReadOnlyList<IChannel>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IChannel>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IChannel)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IChannel)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IChannel)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IChannel
    name: IChannel
    href: Remora.Discord.API.Abstractions.Objects.IChannel.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IChannel
    name: IChannel
    href: Remora.Discord.API.Abstractions.Objects.IChannel.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_ChannelType___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_VideoQualityMode___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_AutoArchiveDuration___Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_IDefaultReaction__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IForumTag___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_SortOrder___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_ForumLayout___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildChannelAsync
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ChannelType}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.ChannelType.html
  name: Optional<ChannelType?>
  nameWithType: Optional<ChannelType?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ChannelType?>
  nameWithType.vb: Optional(Of ChannelType?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ChannelType?)
  name.vb: Optional(Of ChannelType?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ChannelType
    name: ChannelType
    href: Remora.Discord.API.Abstractions.Objects.ChannelType.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ChannelType
    name: ChannelType
    href: Remora.Discord.API.Abstractions.Objects.ChannelType.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{System.Int32}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: Optional<int?>
  nameWithType: Optional<int?>
  fullName: Remora.Rest.Core.Optional<int?>
  nameWithType.vb: Optional(Of Integer?)
  fullName.vb: Remora.Rest.Core.Optional(Of Integer?)
  name.vb: Optional(Of Integer?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IPartialPermissionOverwrite>>
  nameWithType: Optional<IReadOnlyList<IPartialPermissionOverwrite>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite))
  name.vb: Optional(Of IReadOnlyList(Of IPartialPermissionOverwrite))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite
    name: IPartialPermissionOverwrite
    href: Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite
    name: IPartialPermissionOverwrite
    href: Remora.Discord.API.Abstractions.Objects.IPartialPermissionOverwrite.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{System.Boolean}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: Optional<bool?>
  nameWithType: Optional<bool?>
  fullName: Remora.Rest.Core.Optional<bool?>
  nameWithType.vb: Optional(Of Boolean?)
  fullName.vb: Remora.Rest.Core.Optional(Of Boolean?)
  name.vb: Optional(Of Boolean?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.VideoQualityMode}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.VideoQualityMode.html
  name: Optional<VideoQualityMode?>
  nameWithType: Optional<VideoQualityMode?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.VideoQualityMode?>
  nameWithType.vb: Optional(Of VideoQualityMode?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.VideoQualityMode?)
  name.vb: Optional(Of VideoQualityMode?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.VideoQualityMode
    name: VideoQualityMode
    href: Remora.Discord.API.Abstractions.Objects.VideoQualityMode.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.VideoQualityMode
    name: VideoQualityMode
    href: Remora.Discord.API.Abstractions.Objects.VideoQualityMode.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration.html
  name: Optional<AutoArchiveDuration?>
  nameWithType: Optional<AutoArchiveDuration?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?>
  nameWithType.vb: Optional(Of AutoArchiveDuration?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration?)
  name.vb: Optional(Of AutoArchiveDuration?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration
    name: AutoArchiveDuration
    href: Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration
    name: AutoArchiveDuration
    href: Remora.Discord.API.Abstractions.Objects.AutoArchiveDuration.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDefaultReaction}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.IDefaultReaction.html
  name: Optional<IDefaultReaction>
  nameWithType: Optional<IDefaultReaction>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDefaultReaction>
  nameWithType.vb: Optional(Of IDefaultReaction)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDefaultReaction)
  name.vb: Optional(Of IDefaultReaction)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IDefaultReaction
    name: IDefaultReaction
    href: Remora.Discord.API.Abstractions.Objects.IDefaultReaction.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IDefaultReaction
    name: IDefaultReaction
    href: Remora.Discord.API.Abstractions.Objects.IDefaultReaction.html
  - name: )
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IForumTag}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IForumTag>>
  nameWithType: Optional<IReadOnlyList<IForumTag>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IForumTag>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IForumTag))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IForumTag))
  name.vb: Optional(Of IReadOnlyList(Of IForumTag))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IForumTag
    name: IForumTag
    href: Remora.Discord.API.Abstractions.Objects.IForumTag.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IForumTag
    name: IForumTag
    href: Remora.Discord.API.Abstractions.Objects.IForumTag.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.SortOrder}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.SortOrder.html
  name: Optional<SortOrder?>
  nameWithType: Optional<SortOrder?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.SortOrder?>
  nameWithType.vb: Optional(Of SortOrder?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.SortOrder?)
  name.vb: Optional(Of SortOrder?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.SortOrder
    name: SortOrder
    href: Remora.Discord.API.Abstractions.Objects.SortOrder.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.SortOrder
    name: SortOrder
    href: Remora.Discord.API.Abstractions.Objects.SortOrder.html
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{Remora.Discord.API.Abstractions.Objects.ForumLayout}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.ForumLayout.html
  name: Optional<ForumLayout?>
  nameWithType: Optional<ForumLayout?>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.ForumLayout?>
  nameWithType.vb: Optional(Of ForumLayout?)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.ForumLayout?)
  name.vb: Optional(Of ForumLayout?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ForumLayout
    name: ForumLayout
    href: Remora.Discord.API.Abstractions.Objects.ForumLayout.html
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ForumLayout
    name: ForumLayout
    href: Remora.Discord.API.Abstractions.Objects.ForumLayout.html
  - name: '?'
  - name: )
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IChannel>>
  nameWithType: Task<Result<IChannel>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IChannel>>
  nameWithType.vb: Task(Of Result(Of IChannel))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IChannel))
  name.vb: Task(Of Result(Of IChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IChannel
    name: IChannel
    href: Remora.Discord.API.Abstractions.Objects.IChannel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IChannel
    name: IChannel
    href: Remora.Discord.API.Abstractions.Objects.IChannel.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildTextChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_AutoArchiveDuration___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildTextChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildTextChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildTextChannelAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildAnnouncementChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_AutoArchiveDuration___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildAnnouncementChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildAnnouncementChannelAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildForumChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_AutoArchiveDuration___Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_IDefaultReaction__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IForumTag___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_SortOrder___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_ForumLayout___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildForumChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildForumChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildForumChannelAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildMediaChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_AutoArchiveDuration___Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_IDefaultReaction__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IForumTag___Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_SortOrder___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildMediaChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildMediaChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildMediaChannelAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildVoiceChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_VideoQualityMode___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildVoiceChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildVoiceChannelAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildStageChannelAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Nullable_System_Int32___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IPartialPermissionOverwrite___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_Remora_Discord_API_Abstractions_Objects_VideoQualityMode___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildStageChannelAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildStageChannelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildStageChannelAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildChannelPositionsAsync_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Rest_IChannelPositionModification__System_Threading_CancellationToken_
  name: ModifyGuildChannelPositionsAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildChannelPositionsAsync
- uid: System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification}
  commentId: T:System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Rest.IChannelPositionModification}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<IChannelPositionModification>
  nameWithType: IReadOnlyList<IChannelPositionModification>
  fullName: System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Rest.IChannelPositionModification>
  nameWithType.vb: IReadOnlyList(Of IChannelPositionModification)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Rest.IChannelPositionModification)
  name.vb: IReadOnlyList(Of IChannelPositionModification)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Rest.IChannelPositionModification
    name: IChannelPositionModification
    href: Remora.Discord.API.Abstractions.Rest.IChannelPositionModification.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Rest.IChannelPositionModification
    name: IChannelPositionModification
    href: Remora.Discord.API.Abstractions.Rest.IChannelPositionModification.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ListActiveGuildThreadsAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: ListActiveGuildThreadsAsync
  nameWithType: IDiscordRestGuildAPI.ListActiveGuildThreadsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListActiveGuildThreadsAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuildThreadQueryResponse>>
  nameWithType: Task<Result<IGuildThreadQueryResponse>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse>>
  nameWithType.vb: Task(Of Result(Of IGuildThreadQueryResponse))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse))
  name.vb: Task(Of Result(Of IGuildThreadQueryResponse))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse
    name: IGuildThreadQueryResponse
    href: Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse
    name: IGuildThreadQueryResponse
    href: Remora.Discord.API.Abstractions.Objects.IGuildThreadQueryResponse.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildMemberAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildMemberAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildMemberAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildMemberAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildMember}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildMember}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuildMember>>
  nameWithType: Task<Result<IGuildMember>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuildMember>>
  nameWithType.vb: Task(Of Result(Of IGuildMember))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuildMember))
  name.vb: Task(Of Result(Of IGuildMember))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ListGuildMembersAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__System_Threading_CancellationToken_
  name: ListGuildMembersAsync
  nameWithType: IDiscordRestGuildAPI.ListGuildMembersAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ListGuildMembersAsync
- uid: Remora.Rest.Core.Optional{System.Int32}
  commentId: T:Remora.Rest.Core.Optional{System.Int32}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: Optional<int>
  nameWithType: Optional<int>
  fullName: Remora.Rest.Core.Optional<int>
  nameWithType.vb: Optional(Of Integer)
  fullName.vb: Remora.Rest.Core.Optional(Of Integer)
  name.vb: Optional(Of Integer)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IGuildMember}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IGuildMember}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IGuildMember>>>
  nameWithType: Task<Result<IReadOnlyList<IGuildMember>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IGuildMember>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IGuildMember)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IGuildMember)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IGuildMember)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_SearchGuildMembersAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_Int32__System_Threading_CancellationToken_
  name: SearchGuildMembersAsync
  nameWithType: IDiscordRestGuildAPI.SearchGuildMembersAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.SearchGuildMembersAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_AddGuildMemberAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_Boolean__System_Threading_CancellationToken_
  name: AddGuildMemberAsync
  nameWithType: IDiscordRestGuildAPI.AddGuildMemberAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberAsync
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<Snowflake>>
  nameWithType: Optional<IReadOnlyList<Snowflake>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of Snowflake))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake))
  name.vb: Optional(Of IReadOnlyList(Of Snowflake))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildMemberAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_Nullable_System_DateTimeOffset___Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_GuildMemberFlags__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildMemberAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildMemberAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMemberAsync
- uid: Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{System.DateTimeOffset}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  name: Optional<DateTimeOffset?>
  nameWithType: Optional<DateTimeOffset?>
  fullName: Remora.Rest.Core.Optional<System.DateTimeOffset?>
  nameWithType.vb: Optional(Of DateTimeOffset?)
  fullName.vb: Remora.Rest.Core.Optional(Of System.DateTimeOffset?)
  name.vb: Optional(Of DateTimeOffset?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.datetimeoffset
  - name: '?'
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.GuildMemberFlags}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.GuildMemberFlags.html
  name: Optional<GuildMemberFlags>
  nameWithType: Optional<GuildMemberFlags>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.GuildMemberFlags>
  nameWithType.vb: Optional(Of GuildMemberFlags)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.GuildMemberFlags)
  name.vb: Optional(Of GuildMemberFlags)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.GuildMemberFlags
    name: GuildMemberFlags
    href: Remora.Discord.API.Abstractions.Objects.GuildMemberFlags.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.GuildMemberFlags
    name: GuildMemberFlags
    href: Remora.Discord.API.Abstractions.Objects.GuildMemberFlags.html
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyCurrentMemberAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyCurrentMemberAsync
  nameWithType: IDiscordRestGuildAPI.ModifyCurrentMemberAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentMemberAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_AddGuildMemberRoleAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: AddGuildMemberRoleAsync
  nameWithType: IDiscordRestGuildAPI.AddGuildMemberRoleAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.AddGuildMemberRoleAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_RemoveGuildMemberRoleAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: RemoveGuildMemberRoleAsync
  nameWithType: IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberRoleAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_RemoveGuildMemberAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: RemoveGuildMemberAsync
  nameWithType: IDiscordRestGuildAPI.RemoveGuildMemberAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildMemberAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildBansAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__System_Threading_CancellationToken_
  name: GetGuildBansAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildBansAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBansAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IBan}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IBan}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IBan>>>
  nameWithType: Task<Result<IReadOnlyList<IBan>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IBan>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IBan)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IBan)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IBan)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IBan
    name: IBan
    href: Remora.Discord.API.Abstractions.Objects.IBan.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IBan
    name: IBan
    href: Remora.Discord.API.Abstractions.Objects.IBan.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildBanAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildBanAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildBanAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildBanAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IBan}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IBan}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IBan>>
  nameWithType: Task<Result<IBan>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IBan>>
  nameWithType.vb: Task(Of Result(Of IBan))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IBan))
  name.vb: Task(Of Result(Of IBan))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IBan
    name: IBan
    href: Remora.Discord.API.Abstractions.Objects.IBan.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IBan
    name: IBan
    href: Remora.Discord.API.Abstractions.Objects.IBan.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildBanAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildBanAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildBanAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildBanAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_RemoveGuildBanAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: RemoveGuildBanAsync
  nameWithType: IDiscordRestGuildAPI.RemoveGuildBanAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.RemoveGuildBanAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_BulkGuildBanAsync_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: BulkGuildBanAsync
  nameWithType: IDiscordRestGuildAPI.BulkGuildBanAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BulkGuildBanAsync
- uid: System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}
  commentId: T:System.Collections.Generic.IReadOnlyList{Remora.Rest.Core.Snowflake}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<Snowflake>
  nameWithType: IReadOnlyList<Snowflake>
  fullName: System.Collections.Generic.IReadOnlyList<Remora.Rest.Core.Snowflake>
  nameWithType.vb: IReadOnlyList(Of Snowflake)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Remora.Rest.Core.Snowflake)
  name.vb: IReadOnlyList(Of Snowflake)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: )
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Rest.IBulkBanResponse}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Rest.IBulkBanResponse}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IBulkBanResponse>>
  nameWithType: Task<Result<IBulkBanResponse>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Rest.IBulkBanResponse>>
  nameWithType.vb: Task(Of Result(Of IBulkBanResponse))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Rest.IBulkBanResponse))
  name.vb: Task(Of Result(Of IBulkBanResponse))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Rest.IBulkBanResponse
    name: IBulkBanResponse
    href: Remora.Discord.API.Abstractions.Rest.IBulkBanResponse.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Rest.IBulkBanResponse
    name: IBulkBanResponse
    href: Remora.Discord.API.Abstractions.Rest.IBulkBanResponse.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildRolesAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildRolesAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildRolesAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildRolesAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IRole}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IRole>>>
  nameWithType: Task<Result<IReadOnlyList<IRole>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IRole>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IRole)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IRole)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IRole)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_CreateGuildRoleAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_IDiscordPermissionSet__Remora_Rest_Core_Optional_System_Drawing_Color__Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildRoleAsync
  nameWithType: IDiscordRestGuildAPI.CreateGuildRoleAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.CreateGuildRoleAsync
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet.html
  name: Optional<IDiscordPermissionSet>
  nameWithType: Optional<IDiscordPermissionSet>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet>
  nameWithType.vb: Optional(Of IDiscordPermissionSet)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet)
  name.vb: Optional(Of IDiscordPermissionSet)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet
    name: IDiscordPermissionSet
    href: Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet
    name: IDiscordPermissionSet
    href: Remora.Discord.API.Abstractions.Objects.IDiscordPermissionSet.html
  - name: )
- uid: Remora.Rest.Core.Optional{System.Drawing.Color}
  commentId: T:Remora.Rest.Core.Optional{System.Drawing.Color}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Optional<Color>
  nameWithType: Optional<Color>
  fullName: Remora.Rest.Core.Optional<System.Drawing.Color>
  nameWithType.vb: Optional(Of Color)
  fullName.vb: Remora.Rest.Core.Optional(Of System.Drawing.Color)
  name.vb: Optional(Of Color)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: )
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IRole}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IRole}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IRole>>
  nameWithType: Task<Result<IRole>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IRole>>
  nameWithType.vb: Task(Of Result(Of IRole))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IRole))
  name.vb: Task(Of Result(Of IRole))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildRolePositionsAsync_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_System_ValueTuple_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Nullable_System_Int32_____Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildRolePositionsAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRolePositionsAsync
- uid: System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)>
  nameWithType: IReadOnlyList<(Snowflake RoleID, Optional<int?> Position)>
  fullName: System.Collections.Generic.IReadOnlyList<(Remora.Rest.Core.Snowflake RoleID, Remora.Rest.Core.Optional<int?> Position)>
  nameWithType.vb: IReadOnlyList(Of (RoleID As Snowflake, Position As Optional(Of Integer?)))
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of (RoleID As Remora.Rest.Core.Snowflake, Position As Remora.Rest.Core.Optional(Of Integer?)))
  name.vb: IReadOnlyList(Of (RoleID As Snowflake, Position As Optional(Of Integer?)))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: (
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}.RoleID
    name: RoleID
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-remora.rest.core.snowflake,remora.rest.core.optional-system.nullable-system.int32---.roleid
  - name: ','
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: '>'
  - name: " "
  - uid: System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}.Position
    name: Position
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-remora.rest.core.snowflake,remora.rest.core.optional-system.nullable-system.int32---.position
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}.RoleID
    name: RoleID
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-remora.rest.core.snowflake,remora.rest.core.optional-system.nullable-system.int32---.roleid
  - name: " "
  - name: As
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{System.Nullable{System.Int32}}}.Position
    name: Position
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-remora.rest.core.snowflake,remora.rest.core.optional-system.nullable-system.int32---.position
  - name: " "
  - name: As
  - name: " "
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildRoleAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_IDiscordPermissionSet__Remora_Rest_Core_Optional_System_Nullable_System_Drawing_Color___Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_IO_Stream__Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildRoleAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildRoleAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildRoleAsync
- uid: Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}}
  commentId: T:Remora.Rest.Core.Optional{System.Nullable{System.Drawing.Color}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  name: Optional<Color?>
  nameWithType: Optional<Color?>
  fullName: Remora.Rest.Core.Optional<System.Drawing.Color?>
  nameWithType.vb: Optional(Of Color?)
  fullName.vb: Remora.Rest.Core.Optional(Of System.Drawing.Color?)
  name.vb: Optional(Of Color?)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Drawing.Color
    name: Color
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.drawing.color
  - name: '?'
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildMFALevelAsync_Remora_Rest_Core_Snowflake_Remora_Discord_API_Abstractions_Objects_MultiFactorAuthenticationLevel_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildMFALevelAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildMFALevelAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildMFALevelAsync
- uid: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel
  commentId: T:Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel
  parent: Remora.Discord.API.Abstractions.Objects
  href: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel.html
  name: MultiFactorAuthenticationLevel
  nameWithType: MultiFactorAuthenticationLevel
  fullName: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<MultiFactorAuthenticationLevel>>
  nameWithType: Task<Result<MultiFactorAuthenticationLevel>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel>>
  nameWithType.vb: Task(Of Result(Of MultiFactorAuthenticationLevel))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel))
  name.vb: Task(Of Result(Of MultiFactorAuthenticationLevel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel
    name: MultiFactorAuthenticationLevel
    href: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel
    name: MultiFactorAuthenticationLevel
    href: Remora.Discord.API.Abstractions.Objects.MultiFactorAuthenticationLevel.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects
  commentId: N:Remora.Discord.API.Abstractions.Objects
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Objects
  nameWithType: Remora.Discord.API.Abstractions.Objects
  fullName: Remora.Discord.API.Abstractions.Objects
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Objects
    name: Objects
    href: Remora.Discord.API.Abstractions.Objects.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Objects
    name: Objects
    href: Remora.Discord.API.Abstractions.Objects.html
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_DeleteGuildRoleAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: DeleteGuildRoleAsync
  nameWithType: IDiscordRestGuildAPI.DeleteGuildRoleAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildRoleAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildPruneCountAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake___System_Threading_CancellationToken_
  name: GetGuildPruneCountAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildPruneCountAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildPruneCountAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPruneCount}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPruneCount}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IPruneCount>>
  nameWithType: Task<Result<IPruneCount>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IPruneCount>>
  nameWithType.vb: Task(Of Result(Of IPruneCount))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IPruneCount))
  name.vb: Task(Of Result(Of IPruneCount))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IPruneCount
    name: IPruneCount
    href: Remora.Discord.API.Abstractions.Objects.IPruneCount.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IPruneCount
    name: IPruneCount
    href: Remora.Discord.API.Abstractions.Objects.IPruneCount.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_BeginGuildPruneAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Int32__Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: BeginGuildPruneAsync
  nameWithType: IDiscordRestGuildAPI.BeginGuildPruneAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.BeginGuildPruneAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildVoiceRegionsAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildVoiceRegionsAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVoiceRegionsAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IVoiceRegion}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IVoiceRegion}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IVoiceRegion>>>
  nameWithType: Task<Result<IReadOnlyList<IVoiceRegion>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IVoiceRegion>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IVoiceRegion)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IVoiceRegion)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IVoiceRegion)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IVoiceRegion
    name: IVoiceRegion
    href: Remora.Discord.API.Abstractions.Objects.IVoiceRegion.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IVoiceRegion
    name: IVoiceRegion
    href: Remora.Discord.API.Abstractions.Objects.IVoiceRegion.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildInvitesAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildInvitesAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildInvitesAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildInvitesAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IInviteWithMetadata>>>
  nameWithType: Task<Result<IReadOnlyList<IInviteWithMetadata>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IInviteWithMetadata)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IInviteWithMetadata)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata
    name: IInviteWithMetadata
    href: Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata
    name: IInviteWithMetadata
    href: Remora.Discord.API.Abstractions.Objects.IInviteWithMetadata.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildIntegrationsAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildIntegrationsAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildIntegrationsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildIntegrationsAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IIntegration}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IIntegration}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<IIntegration>>>
  nameWithType: Task<Result<IReadOnlyList<IIntegration>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IIntegration>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of IIntegration)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IIntegration)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of IIntegration)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IIntegration
    name: IIntegration
    href: Remora.Discord.API.Abstractions.Objects.IIntegration.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IIntegration
    name: IIntegration
    href: Remora.Discord.API.Abstractions.Objects.IIntegration.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_DeleteGuildIntegrationAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: DeleteGuildIntegrationAsync
  nameWithType: IDiscordRestGuildAPI.DeleteGuildIntegrationAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.DeleteGuildIntegrationAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildWidgetSettingsAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildWidgetSettingsAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetSettingsAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuildWidgetSettings>>
  nameWithType: Task<Result<IGuildWidgetSettings>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings>>
  nameWithType.vb: Task(Of Result(Of IGuildWidgetSettings))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings))
  name.vb: Task(Of Result(Of IGuildWidgetSettings))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings
    name: IGuildWidgetSettings
    href: Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings
    name: IGuildWidgetSettings
    href: Remora.Discord.API.Abstractions.Objects.IGuildWidgetSettings.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildWidgetAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_Nullable_Remora_Rest_Core_Snowflake___Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildWidgetAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildWidgetAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWidgetAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildWidgetAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildWidgetAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildWidgetAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidget}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildWidget}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuildWidget>>
  nameWithType: Task<Result<IGuildWidget>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuildWidget>>
  nameWithType.vb: Task(Of Result(Of IGuildWidget))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuildWidget))
  name.vb: Task(Of Result(Of IGuildWidget))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildWidget
    name: IGuildWidget
    href: Remora.Discord.API.Abstractions.Objects.IGuildWidget.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildWidget
    name: IGuildWidget
    href: Remora.Discord.API.Abstractions.Objects.IGuildWidget.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildVanityUrlAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildVanityUrlAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildVanityUrlAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildVanityUrlAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPartialInvite}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IPartialInvite}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IPartialInvite>>
  nameWithType: Task<Result<IPartialInvite>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IPartialInvite>>
  nameWithType.vb: Task(Of Result(Of IPartialInvite))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IPartialInvite))
  name.vb: Task(Of Result(Of IPartialInvite))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialInvite
    name: IPartialInvite
    href: Remora.Discord.API.Abstractions.Objects.IPartialInvite.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IPartialInvite
    name: IPartialInvite
    href: Remora.Discord.API.Abstractions.Objects.IPartialInvite.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildWidgetImageAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_WidgetImageStyle__System_Threading_CancellationToken_
  name: GetGuildWidgetImageAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildWidgetImageAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWidgetImageAsync
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.WidgetImageStyle}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.WidgetImageStyle.html
  name: Optional<WidgetImageStyle>
  nameWithType: Optional<WidgetImageStyle>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.WidgetImageStyle>
  nameWithType.vb: Optional(Of WidgetImageStyle)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.WidgetImageStyle)
  name.vb: Optional(Of WidgetImageStyle)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.WidgetImageStyle
    name: WidgetImageStyle
    href: Remora.Discord.API.Abstractions.Objects.WidgetImageStyle.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.WidgetImageStyle
    name: WidgetImageStyle
    href: Remora.Discord.API.Abstractions.Objects.WidgetImageStyle.html
  - name: )
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.IO.Stream}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.IO.Stream}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<Stream>>
  nameWithType: Task<Result<Stream>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.IO.Stream>>
  nameWithType.vb: Task(Of Result(Of Stream))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.IO.Stream))
  name.vb: Task(Of Result(Of Stream))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildWelcomeScreenAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildWelcomeScreenAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildWelcomeScreenAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IWelcomeScreen}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IWelcomeScreen}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IWelcomeScreen>>
  nameWithType: Task<Result<IWelcomeScreen>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IWelcomeScreen>>
  nameWithType.vb: Task(Of Result(Of IWelcomeScreen))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IWelcomeScreen))
  name.vb: Task(Of Result(Of IWelcomeScreen))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IWelcomeScreen
    name: IWelcomeScreen
    href: Remora.Discord.API.Abstractions.Objects.IWelcomeScreen.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IWelcomeScreen
    name: IWelcomeScreen
    href: Remora.Discord.API.Abstractions.Objects.IWelcomeScreen.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildWelcomeScreenAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Nullable_System_Boolean___Remora_Rest_Core_Optional_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IWelcomeScreenChannel___Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildWelcomeScreenAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildWelcomeScreenAsync
- uid: Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}}
  commentId: T:Remora.Rest.Core.Optional{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel}}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: Optional<IReadOnlyList<IWelcomeScreenChannel>>
  nameWithType: Optional<IReadOnlyList<IWelcomeScreenChannel>>
  fullName: Remora.Rest.Core.Optional<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel>>
  nameWithType.vb: Optional(Of IReadOnlyList(Of IWelcomeScreenChannel))
  fullName.vb: Remora.Rest.Core.Optional(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel))
  name.vb: Optional(Of IReadOnlyList(Of IWelcomeScreenChannel))
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel
    name: IWelcomeScreenChannel
    href: Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel
    name: IWelcomeScreenChannel
    href: Remora.Discord.API.Abstractions.Objects.IWelcomeScreenChannel.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_GetGuildOnboardingAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildOnboardingAsync
  nameWithType: IDiscordRestGuildAPI.GetGuildOnboardingAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.GetGuildOnboardingAsync
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildOnboarding}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuildOnboarding}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuildOnboarding>>
  nameWithType: Task<Result<IGuildOnboarding>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuildOnboarding>>
  nameWithType.vb: Task(Of Result(Of IGuildOnboarding))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuildOnboarding))
  name.vb: Task(Of Result(Of IGuildOnboarding))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildOnboarding
    name: IGuildOnboarding
    href: Remora.Discord.API.Abstractions.Objects.IGuildOnboarding.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildOnboarding
    name: IGuildOnboarding
    href: Remora.Discord.API.Abstractions.Objects.IGuildOnboarding.html
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyGuildOnboardingAsync_Remora_Rest_Core_Snowflake_System_Collections_Generic_IReadOnlyList_Remora_Discord_API_Abstractions_Objects_IOnboardingPrompt__System_Collections_Generic_IReadOnlyList_Remora_Rest_Core_Snowflake__System_Boolean_Remora_Discord_API_Abstractions_Objects_GuildOnboardingMode_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildOnboardingAsync
  nameWithType: IDiscordRestGuildAPI.ModifyGuildOnboardingAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyGuildOnboardingAsync
- uid: System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt}
  commentId: T:System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<IOnboardingPrompt>
  nameWithType: IReadOnlyList<IOnboardingPrompt>
  fullName: System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt>
  nameWithType.vb: IReadOnlyList(Of IOnboardingPrompt)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt)
  name.vb: IReadOnlyList(Of IOnboardingPrompt)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt
    name: IOnboardingPrompt
    href: Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt
    name: IOnboardingPrompt
    href: Remora.Discord.API.Abstractions.Objects.IOnboardingPrompt.html
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode
  commentId: T:Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode
  parent: Remora.Discord.API.Abstractions.Objects
  href: Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode.html
  name: GuildOnboardingMode
  nameWithType: GuildOnboardingMode
  fullName: Remora.Discord.API.Abstractions.Objects.GuildOnboardingMode
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyCurrentUserVoiceStateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_System_Boolean__Remora_Rest_Core_Optional_System_Nullable_System_DateTimeOffset___System_Threading_CancellationToken_
  name: ModifyCurrentUserVoiceStateAsync
  nameWithType: IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyCurrentUserVoiceStateAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_ModifyUserVoiceStateAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Snowflake_System_Nullable_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_Boolean__System_Threading_CancellationToken_
  name: ModifyUserVoiceStateAsync
  nameWithType: IDiscordRestGuildAPI.ModifyUserVoiceStateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.ModifyUserVoiceStateAsync
- uid: System.Nullable{Remora.Rest.Core.Snowflake}
  commentId: T:System.Nullable{Remora.Rest.Core.Snowflake}
  parent: System
  definition: System.Nullable`1
  name: Snowflake?
  nameWithType: Snowflake?
  fullName: Remora.Rest.Core.Snowflake?
  spec.csharp:
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '?'
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IVoiceState}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IVoiceState}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IVoiceState>>
  nameWithType: Task<Result<IVoiceState>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IVoiceState>>
  nameWithType.vb: Task(Of Result(Of IVoiceState))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IVoiceState))
  name.vb: Task(Of Result(Of IVoiceState))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IVoiceState
    name: IVoiceState
    href: Remora.Discord.API.Abstractions.Objects.IVoiceState.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IVoiceState
    name: IVoiceState
    href: Remora.Discord.API.Abstractions.Objects.IVoiceState.html
  - name: )
  - name: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
