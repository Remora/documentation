### YamlMime:ManagedReference
items:
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI
  id: IDiscordRestAuditLogAPI
  parent: Remora.Discord.API.Abstractions.Rest
  children:
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Byte},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDiscordRestAuditLogAPI
  nameWithType: IDiscordRestAuditLogAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI
  type: Interface
  source:
    id: IDiscordRestAuditLogAPI
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestAuditLogAPI.cs
    startLine: 34
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Represents the Discord Audit Log API.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public interface IDiscordRestAuditLogAPI
    content.vb: >-
      <PublicAPI>

      Public Interface IDiscordRestAuditLogAPI
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Byte},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Byte},System.Threading.CancellationToken)
  id: GetGuildAuditLogAsync(Remora.Rest.Core.Snowflake,Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake},Remora.Rest.Core.Optional{System.Byte},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI
  langs:
  - csharp
  - vb
  name: GetGuildAuditLogAsync(Snowflake, Optional<Snowflake>, Optional<AuditLogEvent>, Optional<Snowflake>, Optional<Snowflake>, Optional<byte>, CancellationToken)
  nameWithType: IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Snowflake, Optional<Snowflake>, Optional<AuditLogEvent>, Optional<Snowflake>, Optional<Snowflake>, Optional<byte>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AuditLogEvent>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>, Remora.Rest.Core.Optional<byte>, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildAuditLogAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestAuditLogAPI.cs
    startLine: 48
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets an audit log page for the given guild.
  example: []
  syntax:
    content: Task<Result<IAuditLog>> GetGuildAuditLogAsync(Snowflake guildID, Optional<Snowflake> userID = default, Optional<AuditLogEvent> actionType = default, Optional<Snowflake> before = default, Optional<Snowflake> after = default, Optional<byte> limit = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: userID
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the user to filter on.
    - id: actionType
      type: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent}
      description: The action type to filter on.
    - id: before
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the audit log entry to limit searches before.
    - id: after
      type: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
      description: The ID of the audit log entry to limit searches after.
    - id: limit
      type: Remora.Rest.Core.Optional{System.Byte}
      description: The number of log entries to limit the request to.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IAuditLog}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildAuditLogAsync(guildID As Snowflake, userID As [Optional](Of Snowflake) = Nothing, actionType As [Optional](Of AuditLogEvent) = Nothing, before As [Optional](Of Snowflake) = Nothing, after As [Optional](Of Snowflake) = Nothing, limit As [Optional](Of Byte) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IAuditLog))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync*
  nameWithType.vb: IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Snowflake, Optional(Of Snowflake), Optional(Of AuditLogEvent), Optional(Of Snowflake), Optional(Of Snowflake), Optional(Of Byte), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync(Remora.Rest.Core.Snowflake, Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AuditLogEvent), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake), Remora.Rest.Core.Optional(Of Byte), System.Threading.CancellationToken)
  name.vb: GetGuildAuditLogAsync(Snowflake, Optional(Of Snowflake), Optional(Of AuditLogEvent), Optional(Of Snowflake), Optional(Of Snowflake), Optional(Of Byte), CancellationToken)
references:
- uid: Remora.Discord.API.Abstractions.Rest
  commentId: N:Remora.Discord.API.Abstractions.Rest
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Rest
  nameWithType: Remora.Discord.API.Abstractions.Rest
  fullName: Remora.Discord.API.Abstractions.Rest
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestAuditLogAPI_GetGuildAuditLogAsync_Remora_Rest_Core_Snowflake_Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_Remora_Discord_API_Abstractions_Objects_AuditLogEvent__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_Remora_Rest_Core_Snowflake__Remora_Rest_Core_Optional_System_Byte__System_Threading_CancellationToken_
  name: GetGuildAuditLogAsync
  nameWithType: IDiscordRestAuditLogAPI.GetGuildAuditLogAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestAuditLogAPI.GetGuildAuditLogAsync
- uid: Remora.Rest.Core.Snowflake
  commentId: T:Remora.Rest.Core.Snowflake
  parent: Remora.Rest.Core
  isExternal: true
  name: Snowflake
  nameWithType: Snowflake
  fullName: Remora.Rest.Core.Snowflake
- uid: Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
  commentId: T:Remora.Rest.Core.Optional{Remora.Rest.Core.Snowflake}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  name: Optional<Snowflake>
  nameWithType: Optional<Snowflake>
  fullName: Remora.Rest.Core.Optional<Remora.Rest.Core.Snowflake>
  nameWithType.vb: Optional(Of Snowflake)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Rest.Core.Snowflake)
  name.vb: Optional(Of Snowflake)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Rest.Core.Snowflake
    name: Snowflake
    isExternal: true
  - name: )
- uid: Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent}
  commentId: T:Remora.Rest.Core.Optional{Remora.Discord.API.Abstractions.Objects.AuditLogEvent}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: Remora.Discord.API.Abstractions.Objects.AuditLogEvent.html
  name: Optional<AuditLogEvent>
  nameWithType: Optional<AuditLogEvent>
  fullName: Remora.Rest.Core.Optional<Remora.Discord.API.Abstractions.Objects.AuditLogEvent>
  nameWithType.vb: Optional(Of AuditLogEvent)
  fullName.vb: Remora.Rest.Core.Optional(Of Remora.Discord.API.Abstractions.Objects.AuditLogEvent)
  name.vb: Optional(Of AuditLogEvent)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.AuditLogEvent
    name: AuditLogEvent
    href: Remora.Discord.API.Abstractions.Objects.AuditLogEvent.html
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.AuditLogEvent
    name: AuditLogEvent
    href: Remora.Discord.API.Abstractions.Objects.AuditLogEvent.html
  - name: )
- uid: Remora.Rest.Core.Optional{System.Byte}
  commentId: T:Remora.Rest.Core.Optional{System.Byte}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: Optional<byte>
  nameWithType: Optional<byte>
  fullName: Remora.Rest.Core.Optional<byte>
  nameWithType.vb: Optional(Of Byte)
  fullName.vb: Remora.Rest.Core.Optional(Of Byte)
  name.vb: Optional(Of Byte)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IAuditLog}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IAuditLog}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IAuditLog>>
  nameWithType: Task<Result<IAuditLog>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IAuditLog>>
  nameWithType.vb: Task(Of Result(Of IAuditLog))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IAuditLog))
  name.vb: Task(Of Result(Of IAuditLog))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IAuditLog
    name: IAuditLog
    href: Remora.Discord.API.Abstractions.Objects.IAuditLog.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IAuditLog
    name: IAuditLog
    href: Remora.Discord.API.Abstractions.Objects.IAuditLog.html
  - name: )
  - name: )
- uid: Remora.Rest.Core
  commentId: N:Remora.Rest.Core
  isExternal: true
  name: Remora.Rest.Core
  nameWithType: Remora.Rest.Core
  fullName: Remora.Rest.Core
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
- uid: Remora.Rest.Core.Optional`1
  commentId: T:Remora.Rest.Core.Optional`1
  isExternal: true
  name: Optional<TValue>
  nameWithType: Optional<TValue>
  fullName: Remora.Rest.Core.Optional<TValue>
  nameWithType.vb: Optional(Of TValue)
  fullName.vb: Remora.Rest.Core.Optional(Of TValue)
  name.vb: Optional(Of TValue)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
