### YamlMime:ManagedReference
items:
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  commentId: T:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  id: RequireDiscordPermissionCondition
  parent: Remora.Discord.Commands.Conditions
  children:
  - Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.Commands.Contexts.IOperationContext)
  - Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
  - Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: RequireDiscordPermissionCondition
  nameWithType: RequireDiscordPermissionCondition
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  type: Class
  source:
    id: RequireDiscordPermissionCondition
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Conditions\RequireDiscordPermissionCondition.cs
    startLine: 42
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Conditions
  summary: Determines whether the invoking user fulfills a set of requirements related to Discord permissions.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public class RequireDiscordPermissionCondition : ICondition<RequireDiscordPermissionAttribute>, ICondition<RequireDiscordPermissionAttribute, IUser>, ICondition<RequireDiscordPermissionAttribute, IGuildMember>, ICondition<RequireDiscordPermissionAttribute, IRole>, ICondition
    content.vb: >-
      <PublicAPI>

      Public Class RequireDiscordPermissionCondition Implements ICondition(Of RequireDiscordPermissionAttribute), ICondition(Of RequireDiscordPermissionAttribute, IUser), ICondition(Of RequireDiscordPermissionAttribute, IGuildMember), ICondition(Of RequireDiscordPermissionAttribute, IRole), ICondition
  inheritance:
  - System.Object
  implements:
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}
  - Remora.Commands.Conditions.ICondition
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.Commands.Contexts.IOperationContext)
  commentId: M:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.Commands.Contexts.IOperationContext)
  id: '#ctor(Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI,Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI,Remora.Discord.Commands.Contexts.IOperationContext)'
  parent: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  langs:
  - csharp
  - vb
  name: RequireDiscordPermissionCondition(IDiscordRestGuildAPI, IDiscordRestChannelAPI, IOperationContext)
  nameWithType: RequireDiscordPermissionCondition.RequireDiscordPermissionCondition(IDiscordRestGuildAPI, IDiscordRestChannelAPI, IOperationContext)
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.RequireDiscordPermissionCondition(Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI, Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI, Remora.Discord.Commands.Contexts.IOperationContext)
  type: Constructor
  source:
    id: .ctor
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Conditions\RequireDiscordPermissionCondition.cs
    startLine: 59
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Conditions
  summary: Initializes a new instance of the <xref href="Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public RequireDiscordPermissionCondition(IDiscordRestGuildAPI guildAPI, IDiscordRestChannelAPI channelAPI, IOperationContext context)
    parameters:
    - id: guildAPI
      type: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
      description: The guild API.
    - id: channelAPI
      type: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
      description: The channel API.
    - id: context
      type: Remora.Discord.Commands.Contexts.IOperationContext
      description: The command context.
    content.vb: Public Sub New(guildAPI As IDiscordRestGuildAPI, channelAPI As IDiscordRestChannelAPI, context As IOperationContext)
  overload: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.#ctor*
  nameWithType.vb: RequireDiscordPermissionCondition.New(IDiscordRestGuildAPI, IDiscordRestChannelAPI, IOperationContext)
  fullName.vb: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.New(Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI, Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI, Remora.Discord.Commands.Contexts.IOperationContext)
  name.vb: New(IDiscordRestGuildAPI, IDiscordRestChannelAPI, IOperationContext)
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
  id: CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  langs:
  - csharp
  - vb
  name: CheckAsync(RequireDiscordPermissionAttribute, CancellationToken)
  nameWithType: RequireDiscordPermissionCondition.CheckAsync(RequireDiscordPermissionAttribute, CancellationToken)
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, System.Threading.CancellationToken)
  type: Method
  source:
    id: CheckAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Conditions\RequireDiscordPermissionCondition.cs
    startLine: 75
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Conditions
  summary: Checks the condition against the given data, using contextual data available in the given attribute.
  remarks: This method checks the condition against the invoking user.
  example: []
  syntax:
    content: public ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, CancellationToken ct = default)
    parameters:
    - id: attribute
      type: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
      description: The attribute.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result}
      description: A condition result which may or may not have succeeded.
    content.vb: Public Function CheckAsync(attribute As RequireDiscordPermissionAttribute, ct As CancellationToken = Nothing) As ValueTask(Of Result)
  overload: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync*
  implements:
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
  id: CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  langs:
  - csharp
  - vb
  name: CheckAsync(RequireDiscordPermissionAttribute, IUser, CancellationToken)
  nameWithType: RequireDiscordPermissionCondition.CheckAsync(RequireDiscordPermissionAttribute, IUser, CancellationToken)
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser, System.Threading.CancellationToken)
  type: Method
  source:
    id: CheckAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Conditions\RequireDiscordPermissionCondition.cs
    startLine: 123
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Conditions
  summary: Checks the condition against the given data, using contextual data available in the given attribute.
  remarks: This method checks the condition against the target user.
  example: []
  syntax:
    content: public ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, IUser user, CancellationToken ct = default)
    parameters:
    - id: attribute
      type: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
      description: The attribute.
    - id: user
      type: Remora.Discord.API.Abstractions.Objects.IUser
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result}
      description: A condition result which may or may not have succeeded.
    content.vb: Public Function CheckAsync(attribute As RequireDiscordPermissionAttribute, user As IUser, ct As CancellationToken = Nothing) As ValueTask(Of Result)
  overload: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync*
  implements:
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
  id: CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  langs:
  - csharp
  - vb
  name: CheckAsync(RequireDiscordPermissionAttribute, IGuildMember, CancellationToken)
  nameWithType: RequireDiscordPermissionCondition.CheckAsync(RequireDiscordPermissionAttribute, IGuildMember, CancellationToken)
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember, System.Threading.CancellationToken)
  type: Method
  source:
    id: CheckAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Conditions\RequireDiscordPermissionCondition.cs
    startLine: 154
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Conditions
  summary: Checks the condition against the given data, using contextual data available in the given attribute.
  remarks: This method checks the condition against the target member.
  example: []
  syntax:
    content: public ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, IGuildMember member, CancellationToken ct = default)
    parameters:
    - id: attribute
      type: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
      description: The attribute.
    - id: member
      type: Remora.Discord.API.Abstractions.Objects.IGuildMember
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result}
      description: A condition result which may or may not have succeeded.
    content.vb: Public Function CheckAsync(attribute As RequireDiscordPermissionAttribute, member As IGuildMember, ct As CancellationToken = Nothing) As ValueTask(Of Result)
  overload: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync*
  implements:
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
  id: CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
  parent: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  langs:
  - csharp
  - vb
  name: CheckAsync(RequireDiscordPermissionAttribute, IRole, CancellationToken)
  nameWithType: RequireDiscordPermissionCondition.CheckAsync(RequireDiscordPermissionAttribute, IRole, CancellationToken)
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole, System.Threading.CancellationToken)
  type: Method
  source:
    id: CheckAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Remora.Discord.Commands\Conditions\RequireDiscordPermissionCondition.cs
    startLine: 250
  assemblies:
  - Remora.Discord.Commands
  namespace: Remora.Discord.Commands.Conditions
  summary: Checks the condition against the given data, using contextual data available in the given attribute.
  remarks: This method checks the condition against the target role.
  example: []
  syntax:
    content: public ValueTask<Result> CheckAsync(RequireDiscordPermissionAttribute attribute, IRole role, CancellationToken ct = default)
    parameters:
    - id: attribute
      type: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
      description: The attribute.
    - id: role
      type: Remora.Discord.API.Abstractions.Objects.IRole
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.ValueTask{Remora.Results.Result}
      description: A condition result which may or may not have succeeded.
    content.vb: Public Function CheckAsync(attribute As RequireDiscordPermissionAttribute, role As IRole, ct As CancellationToken = Nothing) As ValueTask(Of Result)
  overload: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync*
  implements:
  - Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
references:
- uid: Remora.Discord.Commands.Conditions
  commentId: N:Remora.Discord.Commands.Conditions
  href: Remora.html
  name: Remora.Discord.Commands.Conditions
  nameWithType: Remora.Discord.Commands.Conditions
  fullName: Remora.Discord.Commands.Conditions
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Conditions
    name: Conditions
    href: Remora.Discord.Commands.Conditions.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Conditions
    name: Conditions
    href: Remora.Discord.Commands.Conditions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}
  commentId: T:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}
  parent: Remora.Commands.Conditions
  definition: Remora.Commands.Conditions.ICondition`1
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: ICondition<RequireDiscordPermissionAttribute>
  nameWithType: ICondition<RequireDiscordPermissionAttribute>
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute>
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute)
  name.vb: ICondition(Of RequireDiscordPermissionAttribute)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`1
    name: ICondition
    isExternal: true
  - name: <
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: '>'
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`1
    name: ICondition
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: )
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}
  commentId: T:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}
  parent: Remora.Commands.Conditions
  definition: Remora.Commands.Conditions.ICondition`2
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: ICondition<RequireDiscordPermissionAttribute, IUser>
  nameWithType: ICondition<RequireDiscordPermissionAttribute, IUser>
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser>
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute, IUser)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser)
  name.vb: ICondition(Of RequireDiscordPermissionAttribute, IUser)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: <
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IUser
    name: IUser
    href: Remora.Discord.API.Abstractions.Objects.IUser.html
  - name: '>'
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IUser
    name: IUser
    href: Remora.Discord.API.Abstractions.Objects.IUser.html
  - name: )
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}
  commentId: T:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}
  parent: Remora.Commands.Conditions
  definition: Remora.Commands.Conditions.ICondition`2
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: ICondition<RequireDiscordPermissionAttribute, IGuildMember>
  nameWithType: ICondition<RequireDiscordPermissionAttribute, IGuildMember>
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember>
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute, IGuildMember)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember)
  name.vb: ICondition(Of RequireDiscordPermissionAttribute, IGuildMember)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: <
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: '>'
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: )
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}
  commentId: T:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}
  parent: Remora.Commands.Conditions
  definition: Remora.Commands.Conditions.ICondition`2
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: ICondition<RequireDiscordPermissionAttribute, IRole>
  nameWithType: ICondition<RequireDiscordPermissionAttribute, IRole>
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole>
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute, IRole)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole)
  name.vb: ICondition(Of RequireDiscordPermissionAttribute, IRole)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: <
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: '>'
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: )
- uid: Remora.Commands.Conditions.ICondition
  commentId: T:Remora.Commands.Conditions.ICondition
  parent: Remora.Commands.Conditions
  isExternal: true
  name: ICondition
  nameWithType: ICondition
  fullName: Remora.Commands.Conditions.ICondition
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Remora.Commands.Conditions.ICondition`1
  commentId: T:Remora.Commands.Conditions.ICondition`1
  isExternal: true
  name: ICondition<TAttribute>
  nameWithType: ICondition<TAttribute>
  fullName: Remora.Commands.Conditions.ICondition<TAttribute>
  nameWithType.vb: ICondition(Of TAttribute)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of TAttribute)
  name.vb: ICondition(Of TAttribute)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`1
    name: ICondition
    isExternal: true
  - name: <
  - name: TAttribute
  - name: '>'
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`1
    name: ICondition
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TAttribute
  - name: )
- uid: Remora.Commands.Conditions
  commentId: N:Remora.Commands.Conditions
  isExternal: true
  name: Remora.Commands.Conditions
  nameWithType: Remora.Commands.Conditions
  fullName: Remora.Commands.Conditions
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Commands
    name: Commands
    isExternal: true
  - name: .
  - uid: Remora.Commands.Conditions
    name: Conditions
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Commands
    name: Commands
    isExternal: true
  - name: .
  - uid: Remora.Commands.Conditions
    name: Conditions
    isExternal: true
- uid: Remora.Commands.Conditions.ICondition`2
  commentId: T:Remora.Commands.Conditions.ICondition`2
  isExternal: true
  name: ICondition<TAttribute, TData>
  nameWithType: ICondition<TAttribute, TData>
  fullName: Remora.Commands.Conditions.ICondition<TAttribute, TData>
  nameWithType.vb: ICondition(Of TAttribute, TData)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of TAttribute, TData)
  name.vb: ICondition(Of TAttribute, TData)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: <
  - name: TAttribute
  - name: ','
  - name: " "
  - name: TData
  - name: '>'
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`2
    name: ICondition
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TAttribute
  - name: ','
  - name: " "
  - name: TData
  - name: )
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  commentId: T:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.html
  name: RequireDiscordPermissionCondition
  nameWithType: RequireDiscordPermissionCondition
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.#ctor*
  commentId: Overload:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.#ctor
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.html#Remora_Discord_Commands_Conditions_RequireDiscordPermissionCondition__ctor_Remora_Discord_API_Abstractions_Rest_IDiscordRestGuildAPI_Remora_Discord_API_Abstractions_Rest_IDiscordRestChannelAPI_Remora_Discord_Commands_Contexts_IOperationContext_
  name: RequireDiscordPermissionCondition
  nameWithType: RequireDiscordPermissionCondition.RequireDiscordPermissionCondition
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.RequireDiscordPermissionCondition
  nameWithType.vb: RequireDiscordPermissionCondition.New
  fullName.vb: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.New
  name.vb: New
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
  parent: Remora.Discord.API.Abstractions.Rest
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI.html
  name: IDiscordRestGuildAPI
  nameWithType: IDiscordRestGuildAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestGuildAPI
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
  parent: Remora.Discord.API.Abstractions.Rest
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI.html
  name: IDiscordRestChannelAPI
  nameWithType: IDiscordRestChannelAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestChannelAPI
- uid: Remora.Discord.Commands.Contexts.IOperationContext
  commentId: T:Remora.Discord.Commands.Contexts.IOperationContext
  parent: Remora.Discord.Commands.Contexts
  href: Remora.Discord.Commands.Contexts.IOperationContext.html
  name: IOperationContext
  nameWithType: IOperationContext
  fullName: Remora.Discord.Commands.Contexts.IOperationContext
- uid: Remora.Discord.API.Abstractions.Rest
  commentId: N:Remora.Discord.API.Abstractions.Rest
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Rest
  nameWithType: Remora.Discord.API.Abstractions.Rest
  fullName: Remora.Discord.API.Abstractions.Rest
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
- uid: Remora.Discord.Commands.Contexts
  commentId: N:Remora.Discord.Commands.Contexts
  href: Remora.html
  name: Remora.Discord.Commands.Contexts
  nameWithType: Remora.Discord.Commands.Contexts
  fullName: Remora.Discord.Commands.Contexts
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Contexts
    name: Contexts
    href: Remora.Discord.Commands.Contexts.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Contexts
    name: Contexts
    href: Remora.Discord.Commands.Contexts.html
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync*
  commentId: Overload:Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.html#Remora_Discord_Commands_Conditions_RequireDiscordPermissionCondition_CheckAsync_Remora_Discord_Commands_Conditions_RequireDiscordPermissionAttribute_System_Threading_CancellationToken_
  name: CheckAsync
  nameWithType: RequireDiscordPermissionCondition.CheckAsync
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionCondition.CheckAsync
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
  commentId: M:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
  parent: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}
  definition: Remora.Commands.Conditions.ICondition`1.CheckAsync(`0,System.Threading.CancellationToken)
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: CheckAsync(RequireDiscordPermissionAttribute, CancellationToken)
  nameWithType: ICondition<RequireDiscordPermissionAttribute>.CheckAsync(RequireDiscordPermissionAttribute, CancellationToken)
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute>.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, System.Threading.CancellationToken)
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute).CheckAsync(RequireDiscordPermissionAttribute, CancellationToken)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute).CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
  commentId: T:Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
  parent: Remora.Discord.Commands.Conditions
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: RequireDiscordPermissionAttribute
  nameWithType: RequireDiscordPermissionAttribute
  fullName: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.ValueTask{Remora.Results.Result}
  commentId: T:System.Threading.Tasks.ValueTask{Remora.Results.Result}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.ValueTask`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<Result>
  nameWithType: ValueTask<Result>
  fullName: System.Threading.Tasks.ValueTask<Remora.Results.Result>
  nameWithType.vb: ValueTask(Of Result)
  fullName.vb: System.Threading.Tasks.ValueTask(Of Remora.Results.Result)
  name.vb: ValueTask(Of Result)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - uid: Remora.Results.Result
    name: Result
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result
    name: Result
    isExternal: true
  - name: )
- uid: Remora.Commands.Conditions.ICondition`1.CheckAsync(`0,System.Threading.CancellationToken)
  commentId: M:Remora.Commands.Conditions.ICondition`1.CheckAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CheckAsync(TAttribute, CancellationToken)
  nameWithType: ICondition<TAttribute>.CheckAsync(TAttribute, CancellationToken)
  fullName: Remora.Commands.Conditions.ICondition<TAttribute>.CheckAsync(TAttribute, System.Threading.CancellationToken)
  nameWithType.vb: ICondition(Of TAttribute).CheckAsync(TAttribute, CancellationToken)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of TAttribute).CheckAsync(TAttribute, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`1.CheckAsync(`0,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - name: TAttribute
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`1.CheckAsync(`0,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - name: TAttribute
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.ValueTask`1
  commentId: T:System.Threading.Tasks.ValueTask`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  name: ValueTask<TResult>
  nameWithType: ValueTask<TResult>
  fullName: System.Threading.Tasks.ValueTask<TResult>
  nameWithType.vb: ValueTask(Of TResult)
  fullName.vb: System.Threading.Tasks.ValueTask(Of TResult)
  name.vb: ValueTask(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.valuetask-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
  commentId: M:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
  parent: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}
  definition: Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: CheckAsync(RequireDiscordPermissionAttribute, IUser, CancellationToken)
  nameWithType: ICondition<RequireDiscordPermissionAttribute, IUser>.CheckAsync(RequireDiscordPermissionAttribute, IUser, CancellationToken)
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser>.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser, System.Threading.CancellationToken)
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute, IUser).CheckAsync(RequireDiscordPermissionAttribute, IUser, CancellationToken)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser).CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IUser
    name: IUser
    href: Remora.Discord.API.Abstractions.Objects.IUser.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IUser,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IUser
    name: IUser
    href: Remora.Discord.API.Abstractions.Objects.IUser.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects.IUser
  commentId: T:Remora.Discord.API.Abstractions.Objects.IUser
  parent: Remora.Discord.API.Abstractions.Objects
  href: Remora.Discord.API.Abstractions.Objects.IUser.html
  name: IUser
  nameWithType: IUser
  fullName: Remora.Discord.API.Abstractions.Objects.IUser
- uid: Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
  commentId: M:Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CheckAsync(TAttribute, TData, CancellationToken)
  nameWithType: ICondition<TAttribute, TData>.CheckAsync(TAttribute, TData, CancellationToken)
  fullName: Remora.Commands.Conditions.ICondition<TAttribute, TData>.CheckAsync(TAttribute, TData, System.Threading.CancellationToken)
  nameWithType.vb: ICondition(Of TAttribute, TData).CheckAsync(TAttribute, TData, CancellationToken)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of TAttribute, TData).CheckAsync(TAttribute, TData, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - name: TAttribute
  - name: ','
  - name: " "
  - name: TData
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - name: TAttribute
  - name: ','
  - name: " "
  - name: TData
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects
  commentId: N:Remora.Discord.API.Abstractions.Objects
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Objects
  nameWithType: Remora.Discord.API.Abstractions.Objects
  fullName: Remora.Discord.API.Abstractions.Objects
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Objects
    name: Objects
    href: Remora.Discord.API.Abstractions.Objects.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Objects
    name: Objects
    href: Remora.Discord.API.Abstractions.Objects.html
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
  commentId: M:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
  parent: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}
  definition: Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: CheckAsync(RequireDiscordPermissionAttribute, IGuildMember, CancellationToken)
  nameWithType: ICondition<RequireDiscordPermissionAttribute, IGuildMember>.CheckAsync(RequireDiscordPermissionAttribute, IGuildMember, CancellationToken)
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember>.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember, System.Threading.CancellationToken)
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute, IGuildMember).CheckAsync(RequireDiscordPermissionAttribute, IGuildMember, CancellationToken)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember).CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IGuildMember, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IGuildMember,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
    name: IGuildMember
    href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects.IGuildMember
  commentId: T:Remora.Discord.API.Abstractions.Objects.IGuildMember
  parent: Remora.Discord.API.Abstractions.Objects
  href: Remora.Discord.API.Abstractions.Objects.IGuildMember.html
  name: IGuildMember
  nameWithType: IGuildMember
  fullName: Remora.Discord.API.Abstractions.Objects.IGuildMember
- uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
  commentId: M:Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
  parent: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}
  definition: Remora.Commands.Conditions.ICondition`2.CheckAsync(`0,`1,System.Threading.CancellationToken)
  href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  name: CheckAsync(RequireDiscordPermissionAttribute, IRole, CancellationToken)
  nameWithType: ICondition<RequireDiscordPermissionAttribute, IRole>.CheckAsync(RequireDiscordPermissionAttribute, IRole, CancellationToken)
  fullName: Remora.Commands.Conditions.ICondition<Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole>.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole, System.Threading.CancellationToken)
  nameWithType.vb: ICondition(Of RequireDiscordPermissionAttribute, IRole).CheckAsync(RequireDiscordPermissionAttribute, IRole, CancellationToken)
  fullName.vb: Remora.Commands.Conditions.ICondition(Of Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole).CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute, Remora.Discord.API.Abstractions.Objects.IRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
  spec.vb:
  - uid: Remora.Commands.Conditions.ICondition{Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole}.CheckAsync(Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute,Remora.Discord.API.Abstractions.Objects.IRole,System.Threading.CancellationToken)
    name: CheckAsync
    isExternal: true
  - name: (
  - uid: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute
    name: RequireDiscordPermissionAttribute
    href: Remora.Discord.Commands.Conditions.RequireDiscordPermissionAttribute.html
  - name: ','
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IRole
    name: IRole
    href: Remora.Discord.API.Abstractions.Objects.IRole.html
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects.IRole
  commentId: T:Remora.Discord.API.Abstractions.Objects.IRole
  parent: Remora.Discord.API.Abstractions.Objects
  href: Remora.Discord.API.Abstractions.Objects.IRole.html
  name: IRole
  nameWithType: IRole
  fullName: Remora.Discord.API.Abstractions.Objects.IRole
