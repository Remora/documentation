### YamlMime:ManagedReference
items:
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  commentId: T:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  id: IDiscordRestTemplateAPI
  parent: Remora.Discord.API.Abstractions.Rest
  children:
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(System.String,System.String,Remora.Rest.Core.Optional{System.IO.Stream},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync(System.String,System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  - Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDiscordRestTemplateAPI
  nameWithType: IDiscordRestTemplateAPI
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  type: Interface
  source:
    id: IDiscordRestTemplateAPI
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 36
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Represents the Discord Template API.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public interface IDiscordRestTemplateAPI
    content.vb: >-
      <PublicAPI>

      Public Interface IDiscordRestTemplateAPI
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync(System.String,System.Threading.CancellationToken)
  id: GetTemplateAsync(System.String,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: GetTemplateAsync(string, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.GetTemplateAsync(string, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync(string, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetTemplateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 45
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the template object for the given code.
  example: []
  syntax:
    content: Task<Result<ITemplate>> GetTemplateAsync(string templateCode, CancellationToken ct = default)
    parameters:
    - id: templateCode
      type: System.String
      description: The template code.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetTemplateAsync(templateCode As String, ct As CancellationToken = Nothing) As Task(Of Result(Of ITemplate))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync*
  nameWithType.vb: IDiscordRestTemplateAPI.GetTemplateAsync(String, CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync(String, System.Threading.CancellationToken)
  name.vb: GetTemplateAsync(String, CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(System.String,System.String,Remora.Rest.Core.Optional{System.IO.Stream},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(System.String,System.String,Remora.Rest.Core.Optional{System.IO.Stream},System.Threading.CancellationToken)
  id: CreateGuildFromTemplateAsync(System.String,System.String,Remora.Rest.Core.Optional{System.IO.Stream},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: CreateGuildFromTemplateAsync(string, string, Optional<Stream>, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(string, string, Optional<Stream>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(string, string, Remora.Rest.Core.Optional<System.IO.Stream>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildFromTemplateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 63
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new guild from the given template.
  remarks: >-
    Any streams passed to this method will be disposed of at the end of the call. If you want to reuse the streams

    afterwards, ensure that what you pass is a copy that the method can take ownership of.
  example: []
  syntax:
    content: Task<Result<IGuild>> CreateGuildFromTemplateAsync(string templateCode, string name, Optional<Stream> icon = default, CancellationToken ct = default)
    parameters:
    - id: templateCode
      type: System.String
      description: The template code.
    - id: name
      type: System.String
      description: The name of the new guild.
    - id: icon
      type: Remora.Rest.Core.Optional{System.IO.Stream}
      description: The icon of the new guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildFromTemplateAsync(templateCode As String, name As String, icon As [Optional](Of Stream) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of IGuild))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync*
  nameWithType.vb: IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(String, String, Optional(Of Stream), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync(String, String, Remora.Rest.Core.Optional(Of System.IO.Stream), System.Threading.CancellationToken)
  name.vb: CreateGuildFromTemplateAsync(String, String, Optional(Of Stream), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  id: GetGuildTemplatesAsync(Remora.Rest.Core.Snowflake,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: GetGuildTemplatesAsync(Snowflake, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.GetGuildTemplatesAsync(Snowflake, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync(Remora.Rest.Core.Snowflake, System.Threading.CancellationToken)
  type: Method
  source:
    id: GetGuildTemplatesAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 77
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Gets the template for the given guild.
  example: []
  syntax:
    content: Task<Result<IReadOnlyList<ITemplate>>> GetGuildTemplatesAsync(Snowflake guildID, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.ITemplate}}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function GetGuildTemplatesAsync(guildID As Snowflake, ct As CancellationToken = Nothing) As Task(Of Result(Of IReadOnlyList(Of ITemplate)))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync*
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: CreateGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: CreateGuildTemplateAsync(Snowflake, string, Optional<string?>, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Snowflake, string, Optional<string?>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<string?>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateGuildTemplateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 91
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Creates a new guild template from the given guild.
  example: []
  syntax:
    content: Task<Result<ITemplate>> CreateGuildTemplateAsync(Snowflake guildID, string name, Optional<string?> description = default, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: name
      type: System.String
      description: The name of the template.
    - id: description
      type: Remora.Rest.Core.Optional{System.String}
      description: The description of the template.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
      description: A creation result which may or may not have succeeded.
    content.vb: Function CreateGuildTemplateAsync(guildID As Snowflake, name As String, description As [Optional](Of String) = Nothing, ct As CancellationToken = Nothing) As Task(Of Result(Of ITemplate))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync*
  nameWithType.vb: IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Snowflake, String, Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: CreateGuildTemplateAsync(Snowflake, String, Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  id: SyncGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: SyncGuildTemplateAsync(Snowflake, string, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Snowflake, string, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Remora.Rest.Core.Snowflake, string, System.Threading.CancellationToken)
  type: Method
  source:
    id: SyncGuildTemplateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 106
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Synchronized the template to the guild's current state.
  example: []
  syntax:
    content: Task<Result<ITemplate>> SyncGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: templateCode
      type: System.String
      description: The template code.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
      description: A retrieval result which may or may not have succeeded.
    content.vb: Function SyncGuildTemplateAsync(guildID As Snowflake, templateCode As String, ct As CancellationToken = Nothing) As Task(Of Result(Of ITemplate))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync*
  nameWithType.vb: IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Snowflake, String, CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync(Remora.Rest.Core.Snowflake, String, System.Threading.CancellationToken)
  name.vb: SyncGuildTemplateAsync(Snowflake, String, CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  id: ModifyGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,Remora.Rest.Core.Optional{System.String},Remora.Rest.Core.Optional{System.String},System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: ModifyGuildTemplateAsync(Snowflake, string, Optional<string>, Optional<string?>, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Snowflake, string, Optional<string>, Optional<string?>, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Remora.Rest.Core.Snowflake, string, Remora.Rest.Core.Optional<string>, Remora.Rest.Core.Optional<string?>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ModifyGuildTemplateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 122
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Modifies the template's metadata.
  example: []
  syntax:
    content: Task<Result<ITemplate>> ModifyGuildTemplateAsync(Snowflake guildID, string templateCode, Optional<string> name, Optional<string?> description, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: templateCode
      type: System.String
      description: The template code.
    - id: name
      type: Remora.Rest.Core.Optional{System.String}
      description: The new name of the template.
    - id: description
      type: Remora.Rest.Core.Optional{System.String}
      description: The new description of the template.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
      description: A modification result which may or may not have succeeded.
    content.vb: Function ModifyGuildTemplateAsync(guildID As Snowflake, templateCode As String, name As [Optional](Of String), description As [Optional](Of String), ct As CancellationToken = Nothing) As Task(Of Result(Of ITemplate))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync*
  nameWithType.vb: IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Snowflake, String, Optional(Of String), Optional(Of String), CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync(Remora.Rest.Core.Snowflake, String, Remora.Rest.Core.Optional(Of String), Remora.Rest.Core.Optional(Of String), System.Threading.CancellationToken)
  name.vb: ModifyGuildTemplateAsync(Snowflake, String, Optional(Of String), Optional(Of String), CancellationToken)
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  commentId: M:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  id: DeleteGuildTemplateAsync(Remora.Rest.Core.Snowflake,System.String,System.Threading.CancellationToken)
  parent: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI
  langs:
  - csharp
  - vb
  name: DeleteGuildTemplateAsync(Snowflake, string, CancellationToken)
  nameWithType: IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Snowflake, string, CancellationToken)
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Remora.Rest.Core.Snowflake, string, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeleteGuildTemplateAsync
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Backend\Remora.Discord.API.Abstractions\API\Rest\IDiscordRestTemplateAPI.cs
    startLine: 138
  assemblies:
  - Remora.Discord.API.Abstractions
  namespace: Remora.Discord.API.Abstractions.Rest
  summary: Deletes the given guild template.
  example: []
  syntax:
    content: Task<Result<ITemplate>> DeleteGuildTemplateAsync(Snowflake guildID, string templateCode, CancellationToken ct = default)
    parameters:
    - id: guildID
      type: Remora.Rest.Core.Snowflake
      description: The ID of the guild.
    - id: templateCode
      type: System.String
      description: The template code.
    - id: ct
      type: System.Threading.CancellationToken
      description: The cancellation token for this operation.
    return:
      type: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
      description: A retrieval result which may or may not have succeeded. This contains the deleted template.
    content.vb: Function DeleteGuildTemplateAsync(guildID As Snowflake, templateCode As String, ct As CancellationToken = Nothing) As Task(Of Result(Of ITemplate))
  overload: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync*
  nameWithType.vb: IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Snowflake, String, CancellationToken)
  fullName.vb: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync(Remora.Rest.Core.Snowflake, String, System.Threading.CancellationToken)
  name.vb: DeleteGuildTemplateAsync(Snowflake, String, CancellationToken)
references:
- uid: Remora.Discord.API.Abstractions.Rest
  commentId: N:Remora.Discord.API.Abstractions.Rest
  href: Remora.html
  name: Remora.Discord.API.Abstractions.Rest
  nameWithType: Remora.Discord.API.Abstractions.Rest
  fullName: Remora.Discord.API.Abstractions.Rest
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.API
    name: API
    href: Remora.Discord.API.html
  - name: .
  - uid: Remora.Discord.API.Abstractions
    name: Abstractions
    href: Remora.Discord.API.Abstractions.html
  - name: .
  - uid: Remora.Discord.API.Abstractions.Rest
    name: Rest
    href: Remora.Discord.API.Abstractions.Rest.html
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_GetTemplateAsync_System_String_System_Threading_CancellationToken_
  name: GetTemplateAsync
  nameWithType: IDiscordRestTemplateAPI.GetTemplateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetTemplateAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.ITemplate}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<ITemplate>>
  nameWithType: Task<Result<ITemplate>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.ITemplate>>
  nameWithType.vb: Task(Of Result(Of ITemplate))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.ITemplate))
  name.vb: Task(Of Result(Of ITemplate))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ITemplate
    name: ITemplate
    href: Remora.Discord.API.Abstractions.Objects.ITemplate.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ITemplate
    name: ITemplate
    href: Remora.Discord.API.Abstractions.Objects.ITemplate.html
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_CreateGuildFromTemplateAsync_System_String_System_String_Remora_Rest_Core_Optional_System_IO_Stream__System_Threading_CancellationToken_
  name: CreateGuildFromTemplateAsync
  nameWithType: IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildFromTemplateAsync
- uid: Remora.Rest.Core.Optional{System.IO.Stream}
  commentId: T:Remora.Rest.Core.Optional{System.IO.Stream}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.io.stream
  name: Optional<Stream>
  nameWithType: Optional<Stream>
  fullName: Remora.Rest.Core.Optional<System.IO.Stream>
  nameWithType.vb: Optional(Of Stream)
  fullName.vb: Remora.Rest.Core.Optional(Of System.IO.Stream)
  name.vb: Optional(Of Stream)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.IO.Stream
    name: Stream
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io.stream
  - name: )
- uid: System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{Remora.Discord.API.Abstractions.Objects.IGuild}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IGuild>>
  nameWithType: Task<Result<IGuild>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<Remora.Discord.API.Abstractions.Objects.IGuild>>
  nameWithType.vb: Task(Of Result(Of IGuild))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of Remora.Discord.API.Abstractions.Objects.IGuild))
  name.vb: Task(Of Result(Of IGuild))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.IGuild
    name: IGuild
    href: Remora.Discord.API.Abstractions.Objects.IGuild.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.IGuild
    name: IGuild
    href: Remora.Discord.API.Abstractions.Objects.IGuild.html
  - name: )
  - name: )
- uid: Remora.Rest.Core.Optional`1
  commentId: T:Remora.Rest.Core.Optional`1
  isExternal: true
  name: Optional<TValue>
  nameWithType: Optional<TValue>
  fullName: Remora.Rest.Core.Optional<TValue>
  nameWithType.vb: Optional(Of TValue)
  fullName.vb: Remora.Rest.Core.Optional(Of TValue)
  name.vb: Optional(Of TValue)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: Remora.Rest.Core
  commentId: N:Remora.Rest.Core
  isExternal: true
  name: Remora.Rest.Core
  nameWithType: Remora.Rest.Core
  fullName: Remora.Rest.Core
  spec.csharp:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
  spec.vb:
  - uid: Remora
    name: Remora
    isExternal: true
  - name: .
  - uid: Remora.Rest
    name: Rest
    isExternal: true
  - name: .
  - uid: Remora.Rest.Core
    name: Core
    isExternal: true
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_GetGuildTemplatesAsync_Remora_Rest_Core_Snowflake_System_Threading_CancellationToken_
  name: GetGuildTemplatesAsync
  nameWithType: IDiscordRestTemplateAPI.GetGuildTemplatesAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.GetGuildTemplatesAsync
- uid: Remora.Rest.Core.Snowflake
  commentId: T:Remora.Rest.Core.Snowflake
  parent: Remora.Rest.Core
  isExternal: true
  name: Snowflake
  nameWithType: Snowflake
  fullName: Remora.Rest.Core.Snowflake
- uid: System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.ITemplate}}}
  commentId: T:System.Threading.Tasks.Task{Remora.Results.Result{System.Collections.Generic.IReadOnlyList{Remora.Discord.API.Abstractions.Objects.ITemplate}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Result<IReadOnlyList<ITemplate>>>
  nameWithType: Task<Result<IReadOnlyList<ITemplate>>>
  fullName: System.Threading.Tasks.Task<Remora.Results.Result<System.Collections.Generic.IReadOnlyList<Remora.Discord.API.Abstractions.Objects.ITemplate>>>
  nameWithType.vb: Task(Of Result(Of IReadOnlyList(Of ITemplate)))
  fullName.vb: System.Threading.Tasks.Task(Of Remora.Results.Result(Of System.Collections.Generic.IReadOnlyList(Of Remora.Discord.API.Abstractions.Objects.ITemplate)))
  name.vb: Task(Of Result(Of IReadOnlyList(Of ITemplate)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Remora.Discord.API.Abstractions.Objects.ITemplate
    name: ITemplate
    href: Remora.Discord.API.Abstractions.Objects.ITemplate.html
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Results.Result`1
    name: Result
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Remora.Discord.API.Abstractions.Objects.ITemplate
    name: ITemplate
    href: Remora.Discord.API.Abstractions.Objects.ITemplate.html
  - name: )
  - name: )
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_CreateGuildTemplateAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: CreateGuildTemplateAsync
  nameWithType: IDiscordRestTemplateAPI.CreateGuildTemplateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.CreateGuildTemplateAsync
- uid: Remora.Rest.Core.Optional{System.String}
  commentId: T:Remora.Rest.Core.Optional{System.String}
  parent: Remora.Rest.Core
  definition: Remora.Rest.Core.Optional`1
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: Optional<string>
  nameWithType: Optional<string>
  fullName: Remora.Rest.Core.Optional<string>
  nameWithType.vb: Optional(Of String)
  fullName.vb: Remora.Rest.Core.Optional(Of String)
  name.vb: Optional(Of String)
  spec.csharp:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: Remora.Rest.Core.Optional`1
    name: Optional
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_SyncGuildTemplateAsync_Remora_Rest_Core_Snowflake_System_String_System_Threading_CancellationToken_
  name: SyncGuildTemplateAsync
  nameWithType: IDiscordRestTemplateAPI.SyncGuildTemplateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.SyncGuildTemplateAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_ModifyGuildTemplateAsync_Remora_Rest_Core_Snowflake_System_String_Remora_Rest_Core_Optional_System_String__Remora_Rest_Core_Optional_System_String__System_Threading_CancellationToken_
  name: ModifyGuildTemplateAsync
  nameWithType: IDiscordRestTemplateAPI.ModifyGuildTemplateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.ModifyGuildTemplateAsync
- uid: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync*
  commentId: Overload:Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync
  href: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.html#Remora_Discord_API_Abstractions_Rest_IDiscordRestTemplateAPI_DeleteGuildTemplateAsync_Remora_Rest_Core_Snowflake_System_String_System_Threading_CancellationToken_
  name: DeleteGuildTemplateAsync
  nameWithType: IDiscordRestTemplateAPI.DeleteGuildTemplateAsync
  fullName: Remora.Discord.API.Abstractions.Rest.IDiscordRestTemplateAPI.DeleteGuildTemplateAsync
